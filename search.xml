<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Butterfly主题双栏布局卡片高度不一致解决方法</title>
      <link href="/butterfly1/"/>
      <url>/butterfly1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前美化好主题后一直没有注意，首页第一篇文章和第二篇文章与信息栏卡片高度不一致。本站的双栏布局使用的小冰的双栏布局插件，这个插件已经很长时间不更新了，但我的主题版本是4.6版本的，可能是主题版本太新了导致显示bug。</p><div align=center><img src="https://i.328888.xyz/2023/04/20/iGSyEN.jpeg" /></div><p>通过上图可以看到明显第二个卡片低一点。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>在糖果屋QQ群里面经过某大佬指点，找到两种解决方法：</p><p>第一种，不需要修改主题配置文件(很安全)</p><p>第二种，修改主题配置文件(很完美，我选的第二种)</p><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><p>修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#recent-posts&gt;.recent-post-item &#123;</span></span><br><span class="line">    margin-top: 1rem; 原双栏布局引用的css找到这个位置把1rem。改成20px</span><br><span class="line">    display: inline-block;</span><br><span class="line">    height: auto;</span><br><span class="line">    width: 49%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align=center><img src="https://i.328888.xyz/2023/04/20/iGSnvq.png" /></div><p>实际上改完后发现比信息栏卡片要低一点，所以想要持平的话，请使用<strong>第二种解决方法</strong></p><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p><strong>修改</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ./themes/butterfly/source/css/_page/homepage.styl</span><br></pre></td></tr></table></figure><p>删除前两行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#recent-posts</span></span><br><span class="line">  &amp; &gt; .recent-post-item:not(:first-child)</span><br><span class="line">    margin-top: 20px</span><br><span class="line"><span class="comment"># 把上面的这两行删除掉，直接三连就可以看效果了</span></span><br><span class="line">  &amp; &gt; .recent-post-item</span><br><span class="line">    @extend .cardHover</span><br><span class="line">    display: flex</span><br><span class="line">    flex-direction: row</span><br><span class="line">    align-items: center</span><br><span class="line">    overflow: hidden</span><br><span class="line">    height: 18em</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><div align=center><img src="https://i.328888.xyz/2023/04/20/iGSW4z.png" /></div><p>此时高度已经完美显示了。</p>]]></content>
      
      
      <categories>
          
          <category> 技巧杂烩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx学习笔记</title>
      <link href="/nginx/"/>
      <url>/nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>nginx(“engine x”)</p><ul><li>是俄罗斯人编写的十分轻量级的http服务器</li><li>是一个高性能的http和反向代理服务器，同时也是IMAP/POP3/SMTP代理服务器</li><li>官方网站：<a href="http://nginx.org/">http://nginx.org/</a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>这里基于<strong>rocky9</strong>系统版本</p><p>安装常用软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y tar wget</span><br></pre></td></tr></table></figure><p>下载源码包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.22.1.tar.gz</span><br><span class="line">tar -zxvf nginx-1.22.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.22.1</span><br><span class="line"><span class="comment"># 这里使用1.22.1版本</span></span><br></pre></td></tr></table></figure><p>安装编译依赖软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc pcre-devel openssl-devel zlib-devel</span><br></pre></td></tr></table></figure><p>创建一个无法登录的用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin nginx</span><br></pre></td></tr></table></figure><p>编译安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./configure --user=nginx --group=nginx --with-http_ssl_module --prefix=/usr/local/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#--with-http_ssl_module --prefix=/usr/local/nginx 支持https和指定安装路径</span></span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h1 id="配置文件及目录"><a href="#配置文件及目录" class="headerlink" title="配置文件及目录"></a>配置文件及目录</h1><ul><li>nginx配置文件及目录<ul><li>/usr/local/nginx/    //安装目录</li><li>conf/nginx.conf     //主配置文件</li><li>html                //网页目录</li><li>logs                //日志文件</li><li>sbin/nginx          //启动脚本</li></ul></li></ul><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><ul><li>启动nginx服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><ul><li>常用选项<ul><li>-V：查看编译参数</li><li>-c：指定配置文件，启动服务</li><li>-t：测试配置文件语法是否有错误</li></ul></li></ul><h1 id="平滑升级Nginx"><a href="#平滑升级Nginx" class="headerlink" title="平滑升级Nginx"></a>平滑升级Nginx</h1><p><strong>这里升级到1.24.0版本</strong></p><ul><li>下载并解压源码包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.24.0.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf nginx-1.24.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> nginx-1.24.0/</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>编译</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-http_ssl_module</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在执行make之后当前目录同级目录objs下面就有了编译好的nginx新版了</span></span><br></pre></td></tr></table></figure><ul><li><p>使用新版nginx替换旧版nginx</p><ul><li>备份旧版nginx</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@rocky nginx-1.24.0]<span class="comment"># mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old</span></span><br></pre></td></tr></table></figure><ul><li>拷贝<code>objs/nginx</code>到<code>/usr/local/nginx/sbin/</code>目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> objs/nginx /usr/local/nginx/sbin/</span><br></pre></td></tr></table></figure><ul><li>把老的已经启动过的nginx禁止换成新版本的nginx</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@rocky nginx-1.24.0]<span class="comment"># make upgrade</span></span><br><span class="line"><span class="comment"># 需要在源码包目录下执行。注意：make命令在哪个目录执行的make upgrade命令就在哪个目录下执行</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -t</span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"><span class="built_in">kill</span> -USR2 `<span class="built_in">cat</span> /usr/local/nginx/logs/nginx.pid`</span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"><span class="built_in">test</span> -f /usr/local/nginx/logs/nginx.pid.oldbin</span><br><span class="line"><span class="built_in">kill</span> -QUIT `<span class="built_in">cat</span> /usr/local/nginx/logs/nginx.pid.oldbin`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时用户前面是无感知的，但是通过ps -ef|grep nginx发现进程ID已经发生改变</span></span><br></pre></td></tr></table></figure><ul><li>查看升级完成版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rocky nginx-1.24.0]<span class="comment"># /usr/local/nginx/sbin/nginx -v</span></span><br><span class="line">nginx version: nginx/1.24.0</span><br></pre></td></tr></table></figure></li></ul><h1 id="Nginx基础配置"><a href="#Nginx基础配置" class="headerlink" title="Nginx基础配置"></a>Nginx基础配置</h1><h2 id="主配置文件结构"><a href="#主配置文件结构" class="headerlink" title="主配置文件结构"></a>主配置文件结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"><span class="comment"># 工作的进程数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># nginx默认支持的并发量</span></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80; <span class="comment"># 监听的端口</span></span><br><span class="line">        server_name  localhost; <span class="comment"># 绑定的域名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>默认情况下在<code>events</code>和<code>http</code>之外的内容都可以称为全局块</strong></p><p>第一大块是<code>全局块</code></p><p>第二大块是<code>events块</code></p><p>第三大块是<code>http块</code></p><p><strong>在第三大块http块中</strong>每一个server代表的是一个虚拟主机，server域中解释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80; <span class="comment"># 监听的端口</span></span><br><span class="line">    server_name  localhost; <span class="comment"># 绑定的域名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    location / &#123;    </span><br><span class="line">        root   html; <span class="comment"># 指定网站的根路径，这里是相对路径，相对于nginx安装目录</span></span><br><span class="line">        index  index.html index.htm; <span class="comment"># 网站的默认首页</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>http块结构图</p><div align=center><img src="https://jihulab.com/yuntian/img/-/raw/main/Nginx/image-20230420154340090.png"/></div><h1 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h1><blockquote><p>默认nginx是所有人都可以访问，做用户认证就是希望不要让所有人打开网站，需要输入账号密码</p></blockquote><h2 id="用户认证实战"><a href="#用户认证实战" class="headerlink" title="用户认证实战"></a>用户认证实战</h2><div align=center><img src="https://jihulab.com/yuntian/img/-/raw/main/Nginx/image-20230420161753907.png"/></div><h2 id="重新加载配置文件"><a href="#重新加载配置文件" class="headerlink" title="重新加载配置文件"></a>重新加载配置文件</h2><ul><li>因为修改了配置文件，所以需要reload重新加载配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><h1 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h1><h2 id="基于域名"><a href="#基于域名" class="headerlink" title="基于域名"></a>基于域名</h2><p>基于域名的虚拟主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen80;</span><br><span class="line">server_name yyt1.gs<span class="comment"># 域名1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">listen80;</span><br><span class="line">server_name yyt2.gs <span class="comment"># 域名2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=red size=3px>注意：</font>基于域名的虚拟主机是通过更改<code>server_name</code>后面的域名来实现的</p><h2 id="基于端口"><a href="#基于端口" class="headerlink" title="基于端口"></a>基于端口</h2><p>基于端口的虚拟主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen80;<span class="comment"># 端口</span></span><br><span class="line">server_name yyt.gs<span class="comment"># 域名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">listen81;<span class="comment"># 端口</span></span><br><span class="line">server_name yyt.gs <span class="comment"># 域名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=red size=3px>注意：</font>基于端口的虚拟主机是通过更改<code>listen</code>监听的端口来实现的</p><h2 id="基于IP"><a href="#基于IP" class="headerlink" title="基于IP"></a>基于IP</h2><p>基于IP的虚拟主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen192.168.0.100:80;<span class="comment"># 端口</span></span><br><span class="line">server_name yyt.gs<span class="comment"># 域名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">listen192.168.0.101:81;<span class="comment"># 端口</span></span><br><span class="line">server_name yyt.gs <span class="comment"># 域名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=red size=3px>注意：</font>基于ip的虚拟主机是通过更改<code>listen</code>监听端口的前面添加IP来实现的</p><h1 id="HTTPS网站加密"><a href="#HTTPS网站加密" class="headerlink" title="HTTPS网站加密"></a>HTTPS网站加密</h1><blockquote><p>默认网站http是明文协议，https是加密协议</p></blockquote><p><strong>常见密钥算法</strong></p><ul><li>对称加密<ul><li>AES、DES  # 加密和解密的方法都是同一个钥匙</li></ul></li><li>非对称加密<ul><li>RSA、DSA  # 加密和解密非同一把钥匙</li></ul></li></ul><div align=center><img src="https://jihulab.com/yuntian/img/-/raw/main/Nginx/image-20230421162748304.png"/></div><p>攻击者可以直接抓取到明文密码</p><div align=center><img src="https://jihulab.com/yuntian/img/-/raw/main/Nginx/image-20230421163108665.png"/></div><p>密钥不能在网络上传输，会被别人获取，就不在安全</p><div align=center><img src="https://jihulab.com/yuntian/img/-/raw/main/Nginx/image-20230421164606754.png"/></div><h2 id="ssl虚拟主机"><a href="#ssl虚拟主机" class="headerlink" title="ssl虚拟主机"></a>ssl虚拟主机</h2><ul><li>SSL加密网站的核心技术是非对称生成密钥<ul><li>公钥、私钥、证书</li></ul></li></ul><p>nginx默认会去<code>conf</code>目录下去找对应的公钥或私钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/conf</span><br><span class="line"></span><br><span class="line">openssl genrsa &gt; yyt.key</span><br><span class="line"><span class="comment"># 生成私钥</span></span><br><span class="line"></span><br><span class="line">openssl req -new -x509 -key yyt.key &gt; yyt.pem</span><br><span class="line"><span class="comment"># req 申请的意思 new新建 x509是证书的格式类似word的扩展名doc  key指定私钥 </span></span><br><span class="line"><span class="comment"># 生成证书</span></span><br><span class="line"><span class="comment"># 证书其实是加了封皮的公钥</span></span><br></pre></td></tr></table></figure><div align=center><img src="https://jihulab.com/yuntian/img/-/raw/main/Nginx/image-20230421171813958.png"/></div><p>修改配置文件</p><div align=center><img src="https://jihulab.com/yuntian/img/-/raw/main/Nginx/image-20230421171910564.png"/></div><h1 id="地址重写"><a href="#地址重写" class="headerlink" title="地址重写"></a>地址重写</h1>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智勇临时使用</title>
      <link href="/test/"/>
      <url>/test/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.328888.xyz/2023/04/16/iE5cZU.png" alt="智勇"><br><br><br><br><br><img src="https://i.328888.xyz/2023/04/16/iE589x.png"><br><br><br><br><br><img src="https://i.328888.xyz/2023/04/16/iE5jpa.png"><br><br><br><br><br><img src="https://i.328888.xyz/2023/04/16/iE52Eq.png"><br><br><br><br><br><img src="https://i.328888.xyz/2023/04/16/iE5Cud.png"><br><br><br><br><br><img src="https://i.328888.xyz/2023/04/16/iE5Upc.png"><br><br><br><br><br><img src="https://i.328888.xyz/2023/04/16/iE5yEX.png"><br><br><br><br><br><img src="https://i.328888.xyz/2023/04/16/iE5iuC.png"><br><br><br><br></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack学习笔记</title>
      <link href="/openstack/"/>
      <url>/openstack/</url>
      
        <content type="html"><![CDATA[<h1 id="openstack"><a href="#openstack" class="headerlink" title="openstack"></a>openstack</h1><h2 id="项目及用户管理"><a href="#项目及用户管理" class="headerlink" title="项目及用户管理"></a>项目及用户管理</h2><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><ul><li>项目是由admin角色的用户创建的</li><li>项目:一组隔离的资源和对象。由一组关联的用户进行管理</li><li>根据配置需求，项目对应一个组织、一个公司或是一个使用客户等</li><li>项目中可以有多个用户，项目中的用户用来管理虚拟资源</li><li>项目相关信息保存到数据库中</li></ul><p><strong>命令行管理项目</strong></p><p>创建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack project create 项目名</span><br></pre></td></tr></table></figure><p>查看项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack project list</span><br></pre></td></tr></table></figure><p>删除项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack project delete 项目名 </span><br></pre></td></tr></table></figure><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ul><li>用户在openstack中用于身份认证</li><li>管理员用户admin在openstack安装过程中创建</li><li>其他用户由管理员用户创建，并指定可以访问的项目</li><li>非管理员用户创建后，保存到数据库中</li></ul><p>非管理员用户具有以下权限</p><ol><li>启动实例</li><li>创建卷和快照</li><li>创建镜像</li><li>分配浮动IP</li><li>创建网络和路由器</li><li>创建防火墙以及规则，规则策略</li><li>查看网络拓扑，项目使用概况等</li></ol><p>创建yyt用户，指定密码为yyt1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack user create --password yyt1 yyt </span><br></pre></td></tr></table></figure><p>列出已有用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack user list</span><br></pre></td></tr></table></figure><p>删除用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack user delete yyt</span><br></pre></td></tr></table></figure><p>修改密码为yyt2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack user <span class="built_in">set</span> --password yyt2 yyt</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>项目是管理资源的</li><li>用户是管理项目的</li></ul><h2 id="glance镜像和云主机类型"><a href="#glance镜像和云主机类型" class="headerlink" title="glance镜像和云主机类型"></a>glance镜像和云主机类型</h2><ul><li>云主机类型就是资源的模板</li><li>它定义了一台云主机可以使用的资源，如内存大小，CPU核心数</li><li>openstack提供了几个默认的云主机类型</li><li>管理员还可以自定义云主机类型</li></ul><p>创建一个云主机类型default1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack flavor create --public default1 --<span class="built_in">id</span> auto --ram 512 --disk 10 --vcpus 1</span><br></pre></td></tr></table></figure><p>列出所有的云主机类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack flavor list</span><br></pre></td></tr></table></figure><p>删除云主机类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack flavor delete default1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenStack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法笔记</title>
      <link href="/MarkDown/"/>
      <url>/MarkDown/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-介绍"><a href="#Markdown-介绍" class="headerlink" title="Markdown 介绍"></a>Markdown 介绍</h1><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><blockquote><p>Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia、简书等。</p></blockquote><h2 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h2><p>要创建标题，请在句子或短语前面添加井<code>#</code>号。井号的数量代表了标题的级别。例如，添加三个<code>#</code>表示创建一个三级标题(&lt;h3&gt;)</p><p><strong>可选语法</strong></p><p>在文本下方添加任意数量的<code>==</code>号来标识一级标题，或者–号来标识二级标题</p><h2 id="段落语法"><a href="#段落语法" class="headerlink" title="段落语法"></a>段落语法</h2><p>要创建段落，使用空白行将一行或多行文本进行分隔。<font color=red>注意：</font>不要用空格或制表符缩进段落</p><h2 id="换行语法"><a href="#换行语法" class="headerlink" title="换行语法"></a>换行语法</h2><p>在一行的末尾添加两个或多个空格，然后按回车键，即可创建一个换行（&lt;br&gt;）</p><h2 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h2><p>通过将文本设置为粗体或斜体来强调其重要性</p><p>要加粗文本，可以在单词或者是短语的前后各添加两个**或__，如需加粗一个单词或短语的中间部分用以表示强调的话，在需要强调的部分两侧各添加两个星号</p><p>要用斜体显示文本，可以在单词或者是短语的前后各添加一个*   星号或_  下划线。</p><h2 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h2><p>要创建块引用，请在段落前添加一个&gt;符号</p><p>多个段落的块引用</p><p>块引用可以包含多个段落。为列表之间空白行添加一个&gt;符号</p><p>嵌套块引用</p><p>块引用可以嵌套，在要嵌套的段落前加一个&gt;&gt;符号</p><h2 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h2><p>可以将多个条目组织成有序或无序列表</p><p><strong>无序列表</strong></p><p>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字可以不按照数学顺序排列但是列表应当以数字1起始。</p><p><strong>有序列表</strong></p><p>要创建无序列表，在每个列表前面加上破折号(-),星号(*)或加号(+)。缩进一个或多个列表项，可创建嵌套列表</p><h2 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h2><p>要将单词或短语表示为代码请将其包裹在(`)中。</p><p><code>bash</code></p><p>转义反引号</p><p>可以使用\或者是 用两个``包裹起来</p><h2 id="分隔线语法"><a href="#分隔线语法" class="headerlink" title="分隔线语法"></a>分隔线语法</h2><p>要创建分隔线，请在单独一行上使用三个或多个星号(***)、破折号(---)或下划线，并且不能包含其他内容，类似&lt;hr&gt;</p><p>为了兼容性，请在分隔线的前后均添加空白行</p><h2 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h2><p>超链接语法<code>[超链接显示名](超链接地址 “超链接”)</code></p><p>对应的HTML代码：<code>&lt;a href=&quot;超链接地址&quot; title=&quot;超链接title&quot;&gt;超链接显示名&lt;/a&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [yyt blog](https://yyt.gs)</span><br></pre></td></tr></table></figure><p>渲染效果 <a href="https://yyt.gs/">yyt blog</a></p><p><strong>网址和email地址</strong></p><p>使用尖括号可以很方便地把URL或email地址变成可点击的链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;https://yyt.gs&gt;</span><br><span class="line">&lt;2913319095@qq.com&gt;</span><br></pre></td></tr></table></figure><p>渲染效果如下</p><p><a href="https://yyt.gs/">https://yyt.gs</a><br><a href="mailto:&#x32;&#57;&#x31;&#51;&#x33;&#49;&#x39;&#x30;&#x39;&#53;&#x40;&#113;&#x71;&#x2e;&#99;&#x6f;&#x6d;">&#x32;&#57;&#x31;&#51;&#x33;&#49;&#x39;&#x30;&#x39;&#53;&#x40;&#113;&#x71;&#x2e;&#99;&#x6f;&#x6d;</a></p><h2 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h2><p>与添加链接语法相似，在链接语法前面加一个!感叹号</p><p>语法格式:<code>![图片](图片地址 “图片title”)</code></p><p>对应的HTML代码：<code>&lt;img src=&quot;图片链接&quot; alt=&quot;图片alt&quot; title=&quot;图片title&quot;&gt;</code></p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>常用的就\</p><h1 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><blockquote><p>ohn Gruber的原始设计文档中概述的<a href="https://markdown.com.cn/basic_syntax">基本语法</a>主要是为了应付大多数情况下的日常所需元素，但对于某些人来说还不够，这就是扩展语法的用武之地。</p><p>一些个人和组织开始通过添加其他元素（例如表，代码块，语法突出显示，URL自动链接和脚注）来扩展基本语法。可以通过使用基于基本Markdown语法的轻量级标记语言，或通过向兼容的Markdown处理器添加扩展来启用这些元素。</p></blockquote><h2 id="扩展语法可用性"><a href="#扩展语法可用性" class="headerlink" title="扩展语法可用性"></a>扩展语法可用性</h2><blockquote><p>并非所有Markdown应用程序都支持扩展语法元素。您需要检查您的应用程序所使用的轻量级标记语言是否支持您要使用的扩展语法元素。如果没有，那么仍然有可能在Markdown处理器中启用扩展。</p></blockquote><h3 id="轻量标记语言"><a href="#轻量标记语言" class="headerlink" title="轻量标记语言"></a>轻量标记语言</h3><p>有几种轻量级标记语言是Markdown的超集。它们包含Gruber的基本语法，并通过添加其他元素（例如表，代码块，语法突出显示，URL自动链接和脚注）在此基础上构建。许多最受欢迎的Markdown应用程序使用以下轻量级标记语言之一：</p><ul><li><a href="https://commonmark.org/">CommonMark</a></li><li><a href="https://github.github.com/gfm/">GitHub Flavored Markdown (GFM)</a></li><li><a href="https://michelf.ca/projects/php-markdown/extra/">Markdown Extra</a></li><li><a href="https://fletcherpenney.net/multimarkdown/">MultiMarkdown</a></li><li><a href="https://rmarkdown.rstudio.com/">R Markdown</a></li></ul><h3 id="Markdown-处理器"><a href="#Markdown-处理器" class="headerlink" title="Markdown 处理器"></a>Markdown 处理器</h3><p>有许多<a href="https://github.com/markdown/markdown.github.com/wiki/Implementations">Markdown处理器</a>可用。它们中的许多允许您添加启用扩展语法元素的扩展。查看您所使用处理器的文档以获取更多信息。</p><h2 id="表格语法"><a href="#表格语法" class="headerlink" title="表格语法"></a>表格语法</h2><p>要添加表，请使用是哪个或多个连字符(—)创建每列的标题，并使用管道(|)分隔每列。  </p><p>可以选择在表的任意一端添加管道</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><p>单元格宽度可以变化，如下所示。呈现的输出将看起来相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax | Description |</span><br><span class="line">| --- | ----------- |</span><br><span class="line">| Header | Title |</span><br><span class="line">| Paragraph | Text |</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> 使用连字符和管道创建表可能很麻烦。为了加快该过程，请尝试使用<a href="https://www.tablesgenerator.com/markdown_tables">Markdown Tables Generator</a>。使用图形界面构建表，然后将生成的Markdown格式的文本复制到文件中。</p><h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（<code>:</code>），将列中的文本对齐到左侧，右侧或中心。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description | Test Text     |</span><br><span class="line">| :---        |    :----:   |          ---: |</span><br><span class="line">| Header      | Title       | Here&#x27;s this   |</span><br><span class="line">| Paragraph   | Text        | And more      |</span><br></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><table><thead><tr><th align="left">Syntax</th><th align="center">Description</th><th align="right">Test Text</th></tr></thead><tbody><tr><td align="left">Header</td><td align="center">Title</td><td align="right">Here’s this</td></tr><tr><td align="left">Paragraph</td><td align="center">Text</td><td align="right">And more</td></tr></tbody></table><h3 id="格式化表格中的文字"><a href="#格式化表格中的文字" class="headerlink" title="格式化表格中的文字"></a>格式化表格中的文字</h3><p>您可以在表格中设置文本格式。例如，您可以添加链接，代码（仅反引号（`）中的单词或短语，而不是代码块）和强调。</p><p>您不能添加标题，块引用，列表，水平规则，图像或HTML标签。</p><h3 id="在表中转义管道字符"><a href="#在表中转义管道字符" class="headerlink" title="在表中转义管道字符"></a>在表中转义管道字符</h3><p>您可以使用表格的HTML字符代码（<code>|</code>）在表中显示竖线（<code>|</code>）字符。</p><h2 id="Markdown-围栏代码块"><a href="#Markdown-围栏代码块" class="headerlink" title="Markdown 围栏代码块"></a>Markdown 围栏代码块</h2><p>Markdown基本语法允许您通过将行缩进四个空格或一个制表符来创建<a href="https://markdown.com.cn/basic-syntax/code-blocks.html">代码块</a>。如果发现不方便，请尝试使用受保护的代码块。根据Markdown处理器或编辑器的不同，您将在代码块之前和之后的行上使用三个反引号（(```）或三个波浪号（~~~）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">&#123;</span><br><span class="line">  &quot;firstName&quot;: &quot;John&quot;,</span><br><span class="line">  &quot;lastName&quot;: &quot;Smith&quot;,</span><br><span class="line">  &quot;age&quot;: 25</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;firstName&quot;: &quot;John&quot;,</span><br><span class="line">  &quot;lastName&quot;: &quot;Smith&quot;,</span><br><span class="line">  &quot;age&quot;: 25</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**Tip:**要在代码块中显示反引号？请参阅了解如何<a href="https://markdown.com.cn/basic-syntax/escaping-backticks.html">转义</a>它们。</p><h3 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h3><p>许多Markdown处理器都支持受围栏代码块的语法突出显示。使用此功能，您可以为编写代码的任何语言添加颜色突出显示。要添加语法突出显示，请在受防护的代码块之前的反引号旁边指定一种语言。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">```json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;firstName&quot;: &quot;John&quot;,</span><br><span class="line">  &quot;lastName&quot;: &quot;Smith&quot;,</span><br><span class="line">  &quot;age&quot;: 25</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><p>{ “firstName”: “John”, “lastName”: “Smith”, “age”: 25 }</p><h2 id="Markdown-脚注"><a href="#Markdown-脚注" class="headerlink" title="Markdown 脚注"></a>Markdown 脚注</h2><p>脚注使您可以添加注释和参考，而不会使文档正文混乱。当您创建脚注时，带有脚注的上标数字会出现在您添加脚注参考的位置。读者可以单击链接以跳至页面底部的脚注内容。</p><p>要创建脚注参考，请在方括号（<code>[^1]</code>）内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。标识符仅将脚注参考与脚注本身相关联-在输出中，脚注按顺序编号。</p><p>在括号内使用另一个插入符号和数字添加脚注，并用冒号和文本（<code>[^1]: My footnote.</code>）。您不必在文档末尾添加脚注。您可以将它们放在除列表，块引号和表之类的其他元素之外的任何位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Here&#x27;s a simple footnote,[^1] and here&#x27;s a longer one.[^bignote]</span><br><span class="line"></span><br><span class="line">[^1]: This is the first footnote.</span><br><span class="line"></span><br><span class="line">[^bignote]: Here&#x27;s one with multiple paragraphs and code.</span><br><span class="line"></span><br><span class="line">    Indent paragraphs to include them in the footnote.</span><br><span class="line"></span><br><span class="line">    `&#123; my code &#125;`</span><br><span class="line"></span><br><span class="line">    Add as many paragraphs as you like.</span><br></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><p>Here’s a simple footnote,[^1] and here’s a longer one.[^bignote]</p><p>[^1]: This is the first footnote.<br>[^bignote]: Here&#39;s one with multiple paragraphs and code.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Indent paragraphs to include them in the footnote.</span><br><span class="line"></span><br><span class="line">`&#123; my code &#125;`</span><br><span class="line"></span><br><span class="line">Add as many paragraphs as you like.</span><br></pre></td></tr></table></figure><h2 id="Markdown-标题编号"><a href="#Markdown-标题编号" class="headerlink" title="Markdown 标题编号"></a>Markdown 标题编号</h2><p>许多Markdown处理器支持<a href="https://markdown.com.cn/basic-syntax/headings.html">标题</a>的自定义ID - 一些Markdown处理器会自动添加它们。添加自定义ID允许您直接链接到标题并使用CSS对其进行修改。要添加自定义标题ID，请在与标题相同的行上用大括号括起该自定义ID。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### My Great Heading &#123;#custom-id&#125;</span><br></pre></td></tr></table></figure><p>HTML看起来像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3 id=&quot;custom-id&quot;&gt;My Great Heading&lt;/h3&gt;</span><br></pre></td></tr></table></figure><p>通过创建带有数字符号（<code>#</code>）和自定义标题ID的<a href="/basic-syntax/links.html">标准链接</a>，可以链接到文件中具有自定义ID的标题。</p><table><thead><tr><th>Markdown</th><th>HTML</th><th>预览效果</th></tr></thead><tbody><tr><td><code>[Heading IDs](#heading-ids)</code></td><td><code>&lt;a href=&quot;#heading-ids&quot;&gt;Heading IDs&lt;/a&gt;</code></td><td><a href="https://markdown.com.cn/extended-syntax/heading-ids.html#heading-ids">Heading IDs</a></td></tr></tbody></table><p>其他网站可以通过将自定义标题ID添加到网页的完整URL（例如<code>[Heading IDs](https://markdown.com.cn/extended-syntax/heading-ids.html#headid)</code>）来链接到标题。</p><h3 id="Markdown-定义列表"><a href="#Markdown-定义列表" class="headerlink" title="Markdown 定义列表"></a>Markdown 定义列表</h3><p>一些Markdown处理器允许您创建术语及其对应定义的<em>定义列表</em>。要创建定义列表，请在第一行上键入术语。在下一行，键入一个冒号，后跟一个空格和定义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">First Term</span><br><span class="line">: This is the definition of the first term.</span><br><span class="line"></span><br><span class="line">Second Term</span><br><span class="line">: This is one definition of the second term.</span><br><span class="line">: This is another definition of the second term.</span><br></pre></td></tr></table></figure><p>HTML看起来像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">  &lt;dt&gt;First Term&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;This is the definition of the first term.&lt;/dd&gt;</span><br><span class="line">  &lt;dt&gt;Second Term&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;This is one definition of the second term. &lt;/dd&gt;</span><br><span class="line">  &lt;dd&gt;This is another definition of the second term.&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure><h2 id="markdown-删除线"><a href="#markdown-删除线" class="headerlink" title="markdown 删除线"></a>markdown 删除线</h2><p>您可以通过在单词中心放置一条水平线来删除单词。结果看起来像这样。此功能使您可以指示某些单词是一个错误，要从文档中删除。若要删除单词，请在单词前后使用两个波浪号<code>~~</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~世界是平坦的。~~ 我们现在知道世界是圆的。</span><br></pre></td></tr></table></figure><h2 id="Markdown-任务列表语法"><a href="#Markdown-任务列表语法" class="headerlink" title="Markdown 任务列表语法"></a>Markdown 任务列表语法</h2><p>任务列表使您可以创建带有复选框的项目列表。在支持任务列表的Markdown应用程序中，复选框将显示在内容旁边。要创建任务列表，请在任务列表项之前添加破折号<code>-</code>和方括号<code>[ ]</code>，并在<code>[ ]</code>前面加上空格。要选择一个复选框，请在方括号<code>[x]</code>之间添加 x 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [x] Write the press release</span><br><span class="line">- [ ] Update the website</span><br><span class="line">- [ ] Contact the media</span><br></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><p><img src="https://markdown.com.cn/assets/img/tasklist.eadf400e.png" alt="Markdown 任务列表"></p><h2 id="Markdown-使用-Emoji-表情"><a href="#Markdown-使用-Emoji-表情" class="headerlink" title="Markdown 使用 Emoji 表情"></a>Markdown 使用 Emoji 表情</h2><p>有两种方法可以将表情符号添加到Markdown文件中：将表情符号复制并粘贴到Markdown格式的文本中，或者键入<em>emoji shortcodes</em>。</p><h3 id="复制和粘贴表情符号"><a href="#复制和粘贴表情符号" class="headerlink" title="复制和粘贴表情符号"></a>复制和粘贴表情符号</h3><p>在大多数情况下，您可以简单地从<a href="https://emojipedia.org/">Emojipedia</a> 等来源复制表情符号并将其粘贴到文档中。许多Markdown应用程序会自动以Markdown格式的文本显示表情符号。从Markdown应用程序导出的HTML和PDF文件应显示表情符号。</p><p><strong>Tip:</strong> 如果您使用的是静态网站生成器，请确保将HTML页面编码为UTF-8。.</p><h3 id="使用表情符号简码"><a href="#使用表情符号简码" class="headerlink" title="使用表情符号简码"></a>使用表情符号简码</h3><p>一些Markdown应用程序允许您通过键入表情符号短代码来插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">去露营了！ :tent: 很快回来。</span><br><span class="line"></span><br><span class="line">真好笑！ :joy:</span><br></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><p>去露营了！⛺很快回来。</p><p>真好笑！😂</p><p><strong>Note:</strong> 注意：您可以使用此<a href="https://gist.github.com/rxaviers/7360908">表情符号简码列表</a>，但请记住，表情符号简码因应用程序而异。有关更多信息，请参阅Markdown应用程序的文档。</p><h2 id="自动网址链接"><a href="#自动网址链接" class="headerlink" title="自动网址链接"></a>自动网址链接</h2><p>许多Markdown处理器会自动将URL转换为链接。这意味着如果您输入<a href="http://www.example.com/">http://www.example.com</a><br>即使您未<a href="https://markdown.com.cn/basic-syntax/links.html">使用方括号</a><br>您的Markdown处理器也会自动将其转换为链接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.example.com</span><br></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><p><a href="http://www.example.com/">http://www.example.com</a></p><h3 id="禁用自动URL链接"><a href="#禁用自动URL链接" class="headerlink" title="禁用自动URL链接"></a>禁用自动URL链接</h3><p>如果您不希望自动链接URL，则可以通过将URL表示为带反引号的代码来删除该链接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`http://www.example.com`</span><br></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><p><code>http://www.example.com</code></p><p><font color=red size=3px>文章参考：</font></p><p><a href="https://markdown.com.cn/">Markdown 官方教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记</title>
      <link href="/Redis/"/>
      <url>/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="认识NoSQL数据库"><a href="#认识NoSQL数据库" class="headerlink" title="认识NoSQL数据库"></a>认识NoSQL数据库</h1><p><strong>NoSQL一般有四种类型:</strong></p><ol><li>键值类型（redis）</li><li>文档类型（MongoDB）</li><li>列类型（HBase）</li><li>Graph类型(Neo4j)</li></ol><p><strong>关系型数据库和非关系型数据库的区别</strong></p><table><thead><tr><th></th><th>SQL</th><th>NoSQL</th></tr></thead><tbody><tr><td><strong>数据结构</strong></td><td>结构化</td><td>非结构化</td></tr><tr><td>数据关联</td><td>关联的</td><td>无关联的</td></tr><tr><td>查询方式</td><td>SQL查询</td><td>非SQL</td></tr><tr><td>事务特性</td><td>ACID</td><td>BASE</td></tr><tr><td>存储方式</td><td>磁盘</td><td>内存</td></tr><tr><td>扩展性</td><td>垂直</td><td>水平</td></tr><tr><td>使用场景</td><td>数据结构稳定，相关业务对数据安全性一致性要求较高</td><td>数据结构不固定，对一致性，安全性要求不高，对性能要求</td></tr></tbody></table><h1 id="初识Redis"><a href="#初识Redis" class="headerlink" title="初识Redis"></a>初识Redis</h1><blockquote><p>redis诞生于2009年全称是Remote Dictionary Server,远程词典服务器，是一个基于内存的键值型NoSQL数据库</p></blockquote><p><strong>特征</strong></p><ul><li>键值型，value(值)支持多种不同数据结构，功能丰富</li><li>单线程，每个命令具备原子性</li><li>低延迟，速度快(基于内存，IO多路复用，良好的编码)。</li><li>支持数据持久化</li><li>redis支持主从集群，分片集群</li><li>支持多语言客户端</li></ul><p><em>小插曲：redis 6.0版本已经是多线程了，但是单线程为啥还是他的特征，原因是redis6.0的多线程仅仅是对网络请求这块，核心的依旧是单线程</em></p><h1 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h1><p><font color="green">注意：</font><strong>基于rocky9系统版本</strong></p><p><strong>安装redis依赖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc tcl</span><br></pre></td></tr></table></figure><p><strong>上传redis6.2.6.tar.gz压缩包</strong></p><p><strong>解压并进入redis目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装成功后会在/usr/local/bin目录</span></span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><h2 id="默认启动"><a href="#默认启动" class="headerlink" title="默认启动"></a>默认启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">5993:C 14 Apr 2023 17:02:21.419 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">5993:C 14 Apr 2023 17:02:21.419 <span class="comment"># Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=5993, just started</span></span><br><span class="line">5993:C 14 Apr 2023 17:02:21.419 <span class="comment"># Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span></span><br><span class="line">5993:M 14 Apr 2023 17:02:21.420 * Increased maximum number of open files to 10032 (it was originally <span class="built_in">set</span> to 1024).</span><br><span class="line">5993:M 14 Apr 2023 17:02:21.420 * monotonic clock: POSIX clock_gettime</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ <span class="string">&#x27;&#x27;</span>-._                                             </span><br><span class="line">      _.-``    `.  `_.  <span class="string">&#x27;&#x27;</span>-._           Redis 6.2.6 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">&#x27;&#x27;</span>-._                                  </span><br><span class="line"> (    <span class="string">&#x27;      ,       .-`  | `,    )     Running in standalone mode</span></span><br><span class="line"><span class="string"> |`-._`-...-` __...-.``-._|&#x27;</span>` _.-<span class="string">&#x27;|     Port: 6379</span></span><br><span class="line"><span class="string"> |    `-._   `._    /     _.-&#x27;</span>    |     PID: 5993</span><br><span class="line">  `-._    `-._  `-./  _.-<span class="string">&#x27;    _.-&#x27;</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>_.-<span class="string">&#x27;|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="string">&#x27;    |           https://redis.io       </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="string">&#x27;    _.-&#x27;</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>_.-<span class="string">&#x27;|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="string">&#x27;    |                                  </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="string">&#x27;    _.-&#x27;</span>                                   </span><br><span class="line">      `-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>                                       </span><br><span class="line">          `-._        _.-<span class="string">&#x27;                                           </span></span><br><span class="line"><span class="string">              `-.__.-&#x27;</span>                                               </span><br><span class="line"></span><br><span class="line">5993:M 14 Apr 2023 17:02:21.421 <span class="comment"># Server initialized</span></span><br><span class="line">5993:M 14 Apr 2023 17:02:21.421 <span class="comment"># WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span></span><br><span class="line">5993:M 14 Apr 2023 17:02:21.421 * Ready to accept connections</span><br></pre></td></tr></table></figure><p>这种启动属于<code>前台</code>启动，会阻塞整个会话窗口，窗口关闭或者按下<code>ctrl + c</code>则redis停止，<font color=red>不推荐使用</font> </p><h2 id="指定配置启动"><a href="#指定配置启动" class="headerlink" title="指定配置启动"></a>指定配置启动</h2><p>如果要让redis以后台方式启动，则必须修改redis的配置文件</p><p>备份一次原配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> redis.conf&#123;,.bak&#125;</span><br></pre></td></tr></table></figure><p>然后修改redis.conf文件中的一些配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听地址，默认是127.0.0.1，只能在本地访问，修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 守护进程，默认是no，修改为yes后即可后台运行</span></span><br><span class="line"></span><br><span class="line">daemonize <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 密码，设置后用户访问redis必须输入密码</span></span><br><span class="line"></span><br><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure><p>redis的其他配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="comment"># 工作目录，默认是当前目录，也就是执行redis-server时的命令，日志，持久化等文件会保存在这个目录</span></span><br><span class="line"><span class="built_in">dir</span> .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库数量，设置为1，代表只使用一个库，默认存在16个库，编号是0-15个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置redis能够使用的最大内存</span></span><br><span class="line"></span><br><span class="line">maxmemory 512mb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志文件，默认为空，可以指定日志文件名</span></span><br><span class="line"></span><br><span class="line">logfile <span class="string">&quot;redis.log&quot;</span></span><br></pre></td></tr></table></figure><p>设置完成后启动redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@redis redis-6.2.6]<span class="comment"># redis-server redis.conf</span></span><br><span class="line">[root@redis redis-6.2.6]<span class="comment"># ps -ef |grep redis</span></span><br><span class="line">root        1414       1  0 09:12 ?        00:00:00 redis-server 127.0.0.1:6379</span><br><span class="line">root        1420    1333  0 09:12 pts/0    00:00:00 grep --color=auto redis</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">停止redis</span><br><span class="line"><span class="built_in">kill</span> -9 进程ID号</span><br></pre></td></tr></table></figure><h2 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h2><p>自己编写一个redis的系统服务配置文件。</p><p>首先，新建一个系统服务配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure><p>内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /root/redis-6.2.6/redis.conf</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里和我看的教程不符，可能是系统版本问题，需要添加如下，不能在enable的时候报错</span></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后重载系统服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl start redis</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> redis</span><br></pre></td></tr></table></figure><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>安装完并启动redis。我们就可以操作redis，实现crud了</p><p>这里因为使用习惯问题，只写了命令行客户端</p><p><strong>redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli [options] [commonds]</span><br></pre></td></tr></table></figure><p>其中常见的options有:</p><ul><li><code>-h</code> 指定要连接的redis节点的IP地址，默认为127.0.0.1</li><li><code>-p</code> 指定要连接redis节点的端口，默认是6379</li><li><code>-a</code> 指定redis的访问密码</li></ul><p>其中的commonds就是redis的操作命令，例如</p><p><code>ping</code> 与redis服务做心跳测试，服务端正常会返回<code>pong</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@redis redis-6.2.6]<span class="comment"># redis-cli -p 6379 ping</span></span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><p>不指定commonds时，会进入<code>redis-cli</code>的交互控制台</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><blockquote><p>Redis是一个key-value的数据库，key一般是string类型，不过value的类型多种多样</p></blockquote><div align=center><img src="https://jihulab.com/yuntian/img/-/raw/main/Redis笔记/image-20230416102750436.png"/></div><p>redis为了方便学习，将操作不同数据类型的命令也做了分组，在官网<a href="https://redis.io/commands">Rdis官方文档</a>可以查看到不同的命令,redis的命令是分组的，学习的时候按照分组去学习。</p><p>在redis的命令行也可以获取到帮助</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; help</span><br><span class="line">redis-cli 6.2.6</span><br><span class="line">To get help about Redis commands type:</span><br><span class="line">      &quot;help @&lt;group&gt;&quot; to get a list of commands in &lt;group&gt;</span><br><span class="line">      &quot;help &lt;command&gt;&quot; for help on &lt;command&gt;</span><br><span class="line">      &quot;help &lt;tab&gt;&quot; to get a list of possible help topics</span><br><span class="line">      &quot;quit&quot; to exit</span><br><span class="line"></span><br><span class="line">To set redis-cli preferences:</span><br><span class="line">      &quot;:set hints&quot; enable online hints</span><br><span class="line">      &quot;:set nohints&quot; disable online hints</span><br><span class="line">Set your preferences in ~/.redisclirc</span><br><span class="line">127.0.0.1:6379&gt; help @string</span><br><span class="line"></span><br><span class="line">  APPEND key value</span><br><span class="line">  summary: Append a value to a key</span><br><span class="line">  since: 2.0.0</span><br><span class="line"></span><br><span class="line">  BITCOUNT key [start end]</span><br></pre></td></tr></table></figure><h1 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h1><blockquote><p>通用命令是部分数据类型的，都可以使用的命令</p></blockquote><p>通过命令行<code>help</code>查看通用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help @generic</span><br></pre></td></tr></table></figure><p><strong>常见的命令有：</strong></p><p><font color=green>注意：</font>所有的命令帮助都可以使用help查询用法，如<code>help keys</code>,<code>help del</code></p><p><code>keys</code>：查看符合模块的所有key，<font color=red>不建议在生产设备环境上使用</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有的key</span><br><span class="line">keys *</span><br><span class="line"></span><br><span class="line"># 模糊匹配查询</span><br><span class="line">keys a*</span><br></pre></td></tr></table></figure><p><code>del</code>：删除一个指定的key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure><p><code>exists</code>：判断一个key是否存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 不存在返回0</span><br><span class="line">127.0.0.1:6379&gt; exists yyt</span><br><span class="line">(integer) 0</span><br><span class="line"># 存在返回1</span><br><span class="line">127.0.0.1:6379&gt; exists name</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><p><code>expire</code>：给key设置有效期，有效期到期key会被自动删除</p><p><code>ttl</code>：查看一个key的有效期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 添加一个key值是yyt</span><br><span class="line">127.0.0.1:6379&gt; set name yyt</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"># 模糊查询所有key</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line"></span><br><span class="line"># 当查询的key返回值为-2时表示这个key不存在，或者有效期已过</span><br><span class="line">127.0.0.1:6379&gt; ttl yyt</span><br><span class="line">(integer) -2</span><br><span class="line"></span><br><span class="line"># 当返回值为-1的时候表示这个key永久有效</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(integer) -1</span><br></pre></td></tr></table></figure><h1 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h1><h2 id="String类型常见命令"><a href="#String类型常见命令" class="headerlink" title="String类型常见命令"></a>String类型常见命令</h2><blockquote><p>string类型，也就是字符串类型，是redis中最简单的存储类型</p></blockquote><p>其value(值)是字符串，不过根据字符串的格式不同，又可以分为三类：</p><ul><li>string：普通字符串</li><li>int：整数类型，可以做自增，自减操作</li><li>float：浮点类型，可以做自增，自减操作</li></ul><table><thead><tr><th align="center">key</th><th align="center">value</th></tr></thead><tbody><tr><td align="center">msg</td><td align="center">hello world</td></tr><tr><td align="center">num</td><td align="center">10</td></tr><tr><td align="center">score</td><td align="center">92.5</td></tr></tbody></table><p><strong>常见的string命令有:</strong></p><ul><li><p><code>set</code> 添加或修改已经存在的string类型的键值对</p></li><li><p><code>get</code> 根据key获取它的值</p></li><li><p><code>mset</code> 批量添加多个string类型的键值对</p></li><li><p><code>mget</code> 根据多个key获取多个string类型的值</p></li><li><p><code>incr</code> 让一个整型的key自增1（每执行一次让他的值加一）</p></li><li><p><code>incrby</code> 让一个整数类型的key自增，可以指定步长比如incrby age 2或自减-2</p></li><li><p><code>incrbyfloat</code> 让一个浮点数自动增长，必须指定步长</p></li><li><p><code>setnx</code> 添加一个字符类型的key，前提这个类型不存在，否则不执行</p></li><li><p><code>setex</code> 添加一个string类型的键值对，并且指定有效期</p></li></ul><p><strong>综合联习</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"># 批量添加key</span><br><span class="line">127.0.0.1:6379&gt; mset name1 yyt name2 douzhiyong name3 wangguanghao</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;name3&quot;</span><br><span class="line">2) &quot;name1&quot;</span><br><span class="line">3) &quot;name2&quot;</span><br><span class="line"></span><br><span class="line"># 批量查询key的值</span><br><span class="line">127.0.0.1:6379&gt; mget name1 name2 name3</span><br><span class="line">1) &quot;yyt&quot;</span><br><span class="line">2) &quot;douzhiyong&quot;</span><br><span class="line">3) &quot;wangguanghao&quot;</span><br><span class="line"></span><br><span class="line"># 添加或修改一个key</span><br><span class="line">127.0.0.1:6379&gt; set age 18</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"># incr让一个整数类型的key自增1</span><br><span class="line">127.0.0.1:6379&gt; incr age</span><br><span class="line">(integer) 19</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">&quot;19&quot;</span><br><span class="line">127.0.0.1:6379&gt; incr age</span><br><span class="line">(integer) 20</span><br><span class="line">127.0.0.1:6379&gt; incr age</span><br><span class="line">(integer) 21</span><br><span class="line">127.0.0.1:6379&gt; incr age</span><br><span class="line">(integer) 22</span><br><span class="line"></span><br><span class="line"># 让一个整数类型的key自增并设定步长为3</span><br><span class="line">127.0.0.1:6379&gt; incrby age 3</span><br><span class="line">(integer) 25</span><br><span class="line">127.0.0.1:6379&gt; incrby age 3</span><br><span class="line">(integer) 28</span><br><span class="line">127.0.0.1:6379&gt; incrby age 3</span><br><span class="line">(integer) 31</span><br><span class="line"></span><br><span class="line"># 添加一个浮点类型的key</span><br><span class="line">127.0.0.1:6379&gt; set score 10.1</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"># incrbyfloat让一个浮点数自动增长步长是1</span><br><span class="line">127.0.0.1:6379&gt; incrbyfloat score 1</span><br><span class="line">&quot;11.1&quot;</span><br><span class="line">127.0.0.1:6379&gt; incrbyfloat score 1</span><br><span class="line">&quot;12.1&quot;</span><br><span class="line">127.0.0.1:6379&gt; incrbyfloat score 1</span><br><span class="line">&quot;13.1&quot;</span><br><span class="line"></span><br><span class="line">#查询所有的key</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;name2&quot;</span><br><span class="line">2) &quot;name1&quot;</span><br><span class="line">3) &quot;name3&quot;</span><br><span class="line">4) &quot;age&quot;</span><br><span class="line">5) &quot;score&quot;</span><br><span class="line"></span><br><span class="line">#批量查询key的值</span><br><span class="line">127.0.0.1:6379&gt; mget name1 name2 name3 age score</span><br><span class="line">1) &quot;yyt&quot;</span><br><span class="line">2) &quot;douzhiyong&quot;</span><br><span class="line">3) &quot;wangguanghao&quot;</span><br><span class="line">4) &quot;22&quot;</span><br><span class="line">5) &quot;13.1&quot;</span><br><span class="line"></span><br><span class="line">#添加一个key，前提是这个key不存在，如果存在则不执行</span><br><span class="line">127.0.0.1:6379&gt; setnx name1 dzy</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get name1</span><br><span class="line">&quot;yyt&quot;</span><br><span class="line">127.0.0.1:6379&gt; setnx name4 mnb</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;name2&quot;</span><br><span class="line">2) &quot;name1&quot;</span><br><span class="line">3) &quot;name3&quot;</span><br><span class="line">4) &quot;age&quot;</span><br><span class="line">5) &quot;score&quot;</span><br><span class="line">6) &quot;name4&quot;</span><br><span class="line"></span><br><span class="line"># 添加一个key并且设置它的有效期为10</span><br><span class="line"># 注意语法格式 setex key 有效期 值</span><br><span class="line">127.0.0.1:6379&gt; setex name4 5 yyt</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name4</span><br><span class="line">&quot;yyt&quot;</span><br><span class="line">127.0.0.1:6379&gt; ttl name4</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl name4</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl name4</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name4</span><br><span class="line">(integer) -2</span><br></pre></td></tr></table></figure><h2 id="Key的层级结构"><a href="#Key的层级结构" class="headerlink" title="Key的层级结构"></a>Key的层级结构</h2><div align=center><img src="https://jihulab.com/yuntian/img/-/raw/main/Redis笔记/image-20230419083528910.png"/></div><p><font color=red>Redis11键值类型的数据库，他的键有一个要求就是必须唯一</font></p><p><strong>Redis的结构</strong></p><p>Redis的key允许有多个单词形成层级结构，多个单词之间用”:”隔开，语法格式：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目名:业务名:类型:id</span><br></pre></td></tr></table></figure><p>格式不是固定的，也可以根据自己的需求来删除或添加词条</p><p>例如我们的项目名称叫yyt，有user和product两种不同类型的数据，我们可以这样定义key：</p><ul><li>user相关的key：yyt:user:1</li><li>product相关的key：yyt:product:1</li></ul><div align=center><img src="https://jihulab.com/yuntian/img/-/raw/main/Redis笔记/image-20230419084621109.png"/></div><div align=center><img src="https://jihulab.com/yuntian/img/-/raw/main/Redis笔记/image-20230419084813370.png"/></div> <h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>string类型的三种格式</p><ul><li>字符串</li><li>int</li><li>float</li></ul><p>Redis的key的格式:</p><ul><li>[项目名]冒号[业务名]冒号[类型]冒号:[id]</li></ul><h1 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h1><blockquote><p>hash类型，也叫散列，其value是一个无序列表。</p></blockquote><p>String结构是将对象序列化为json字符串后存储，当需要修改对象某个字段时很不方便：</p><div align=center><img src="https://jihulab.com/yuntian/img/-/raw/main/Redis笔记/image-20230419085838587.png"/></div><p>Hash结构可以将对象中的，每个字段独立存储，可以针对单个字段做crud:</p><div align=center><img src="https://jihulab.com/yuntian/img/-/raw/main/Redis笔记/image-20230419090014476.png"/></div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本学习笔记</title>
      <link href="/shell/"/>
      <url>/shell/</url>
      
        <content type="html"><![CDATA[<h1 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h1><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>shell是一个命令行解释器，它接收应用程序\用户命令，然后调用操作系统内核</p></blockquote><div align="center"><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230402103513716.png"  style="zoom:50%;" /></div><p><font color='green'>解释器负责将用户的指令翻译为内核可以识别的指令</font></p><p><strong>shell还是一个功能相当强大的编程语言，易编写，易调试，灵活性强</strong></p><h2 id="shell脚本-1"><a href="#shell脚本-1" class="headerlink" title="shell脚本"></a>shell脚本</h2><blockquote><p>提前将可执行的命令语句写入一个文件</p></blockquote><div align="center"><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230402125954759.png"  style="zoom:50%;" /></div><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>常用快捷键：</p><ul><li><code>Tab</code>键补齐命令</li><li><code>ctrl+A</code>光标到命令的最前面</li><li><code>ctrl+E</code>光标到命令的最后面</li><li><code>hostory</code>命令历史</li><li><code>alias</code>命令别名</li><li>标准输入与输出重定向<code>(&gt;、&gt;&gt;、2&gt;、2&gt;&gt;、&amp;&gt;)</code></li><li>管道<code>(|)</code></li></ul><h1 id="编写shell脚本"><a href="#编写shell脚本" class="headerlink" title="编写shell脚本"></a>编写shell脚本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你好&quot;</span></span><br></pre></td></tr></table></figure><p>sh 脚本文件名 会启动子进程</p><p>source 脚本文件名 # 不会启动子进程</p><h1 id="各类括号的作用"><a href="#各类括号的作用" class="headerlink" title="各类括号的作用"></a>各类括号的作用</h1><p><strong>单小括号()</strong></p><ul><li>命令组合 括号中的命令会新开一个子shell顺序执行，所以括号中的变量不能够被脚本余下的部分使用。括号中多个命令之间用分号隔开，最后一个命令可以没有分号，各命令和括号之间不必有空格。</li><li>命令替换 shell扫描一遍命令行发现$(ls)结构，便将里面的ls执行一次，得到其标准输出，有些shell不支持，如tcsh</li><li>用于初始化数组。如a=(a b c)</li></ul><p><strong>双小括号(())</strong></p><p>常用于算数运算比较，双括号中的变量可以不使用$符号前缀，括号内支持多个表达式用分号;隔开。括号中的表达式需要符合c语言运算规则，比如for循环 <code>for ((i=1;i&gt;10;i++))</code>。再如<code>if (($i&lt;10))</code>如果不使用双括号，则为<code>if [ $i -lt 10 ]</code></p><p><strong>中括号[]</strong></p><ol><li>单中括号，bash的内部命令，与test相同。</li><li>双中括号<ul><li>是bash程序语言的关键字，并不是一个命令，双中括号比单中括号的结构更加通用，在双中括号中所有的字符都不会发生文件名扩展或者单词分割，但是会发生参数和命令替换。</li><li>支持字符串模式匹配，使用=~操作符时甚至支持shell正则表达式，字符串比较时可以把右边作为一个模式，而不仅仅是一个字符串，比如[[ hello == hell？]]，结果为真，[[]]中匹配字符串或通配符，不需要引号。</li><li>使用双括号条件判断结构，能够防止脚本中许多逻辑错误，比如&amp;&amp;,||操作符能够正常存在于[[]]条件判断结构中，但是如果出现在单中括号中会报错，比如可以直接使用 <code>if [[ $a -ne 1 &amp;&amp; $a -ne 2 ]]</code>,如果不使用单括号则为<code>if [ $a -ne 1 ]&amp;&amp;[ $a -ne 2 ]</code>或者 <code>if [ $a -ne 1 -a $a -ne 2 ]</code></li><li>bash中把双括号中的表达式看作一个单独的元素，并返回一个退出状态码</li></ul></li></ol><p><strong>大括号</strong></p><p>常规用法</p><ol><li>大括号拓展。(通配(globbing))将对大括号中的文件名做扩展。在大括号中，不允许有空白，除非这个空白被引用或转义。第一种：对大括号中的以逗号分割的文件列表进行拓展。如 touch {a,b}.txt 结果为a.txt b.txt。第二种：对大括号中以点点（..）分割的顺序文件列表起拓展作用，如：touch {a..d}.txt 结果为a.txt b.txt c.txt d.txt</li><li>代码块，又被称为内部组，这个结构事实上创建了一个匿名函数 。与小括号中的命令不同，大括号内的命令不会新开一个子shell运行，即脚本余下部分仍可使用括号内变量。括号内的命令间用分号隔开，最后一个也必须有分号。{}的第一个命令和左括号之间必须要有一个空格。</li></ol><p><strong>符号$后的括号</strong></p><ul><li>$(a)变量a的值，在不引起歧义的情况下可以省略大括号</li><li>$(ls -l)命令替换，如docker中<code>docker rm $(docker ps -qa)</code>批量删除所有容器</li><li>$(())用于获得计算结果。<code>echo $((3-2))</code></li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>以固定的名称，存放可以能有变化的值</p><p>定义变量的格式：</p><p><code>变量名=变量值</code></p><p>取消变量的格式</p><p><code>unset 变量名</code></p><p>注意事项：</p><ul><li>=两边不能有空格，不要使用关键字做变量名。</li><li>如果变量名已经存在则覆盖之前的变量值。</li><li>变量名称有：字母/数字/下划线组成，不能以数字开始，不可以使用特殊字符。</li></ul><p>查看变量的语法格式：</p><p>$变量名</p><p>${变量名}</p><p><strong>可以使用echo打印出来变量的值</strong></p><p><strong>使用unset 变量名取消变量</strong></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><blockquote><p>变量名通常大写，有操作系统维护</p></blockquote><p>环境变量存储在<strong>/etc/profile或~/.bash_profile</strong></p><p>命令<code>env</code>可以列出所有环境变脸</p><p>常见的环境变量有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PATH </span><br><span class="line"><span class="comment"># 命令搜索路径</span></span><br><span class="line">PWD</span><br><span class="line"><span class="comment"># 当前工作目录</span></span><br><span class="line">USER</span><br><span class="line"><span class="comment"># 当前登录用户的用户名</span></span><br><span class="line">UID</span><br><span class="line"><span class="comment"># 当前登录用户的ID号</span></span><br><span class="line">HOME</span><br><span class="line"><span class="comment"># 当前用户的家目录</span></span><br><span class="line">SHELL</span><br><span class="line"><span class="comment"># 当前用户使用的shell解释器，大部分是/bin/bash</span></span><br></pre></td></tr></table></figure><h2 id="位置变量"><a href="#位置变量" class="headerlink" title="位置变量"></a>位置变量</h2><blockquote><p>bash内置变量，存储脚本执行时的参数</p></blockquote><p>使用<code>$n</code>表示，n为数字序列号</p><p><font color=red>在$1~$9代表第1~9参数，10和10以上的参数需要用大括号包含，如${10}</font></p><p>$1,$2,$3,…,${10},${11},…</p><h2 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h2><blockquote><p>bash内置变量，可以调用但是不能赋值或修改</p></blockquote><p>用来保存脚本程序的执行信息</p><p>直接使用这些变量</p><p>不能为这些变量赋值</p><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>$0</td><td>表示当前所在的进程或脚本名</td></tr><tr><td>$$</td><td>当前运行进程的PID</td></tr><tr><td>$?</td><td>命令执行后的返回状态，0表示正常，1或其他表示异常</td></tr><tr><td>$#</td><td>已加载的位置变量的个数</td></tr><tr><td>$*</td><td>所有位置变量的值</td></tr></tbody></table><h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><blockquote><p>用户自主设置的变量</p></blockquote><p>变量名=值</p><h1 id="变量的扩展及应用"><a href="#变量的扩展及应用" class="headerlink" title="变量的扩展及应用"></a>变量的扩展及应用</h1><h2 id="各类引号的作用"><a href="#各类引号的作用" class="headerlink" title="各类引号的作用"></a>各类引号的作用</h2><blockquote><p> shell脚本中我们常用的有三种引号，双引号，单引号，反引号</p></blockquote><p>双引号&quot; &quot;：允许扩展，以$引用其他变量</p><p>单引号&#39; &#39;: 禁用扩展，及时$引用也视作普通字符</p><p>反引号` `： 将命令的执行输出作为变量值，$()与反引号等效</p><h2 id="read命令定义变量"><a href="#read命令定义变量" class="headerlink" title="read命令定义变量"></a>read命令定义变量</h2><blockquote><p>read从键盘读入变量值完成赋值</p></blockquote><p>格式：<code>read -p &quot;提示信息&quot; 变量名</code></p><p><strong>选项：</strong></p><ul><li>-p 提示信息</li><li>-t 指定超时秒数</li><li>-s 设置是否在终端显示输入的内容</li></ul><h2 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h2><p>局部变量：新定义的变量默认只在当前shell中有效，无法在子shell环境中使用</p><p>全局变量：全局变量在当前shell及子shell和未来开启的子shell环境中均有效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">变量名=值</span><br><span class="line"><span class="comment"># 定义局部变量</span></span><br><span class="line"><span class="built_in">export</span> 变量名=值</span><br><span class="line"><span class="comment"># 定义全局变量</span></span><br></pre></td></tr></table></figure><h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><h2 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h2><p>四则运算：</p><ul><li>加法：num1 + num2</li><li>减法：num1 - num2</li><li>乘法：num1 * num2</li><li>整除：num1 / num2</li></ul><p>取余数运算：</p><ul><li>求余数：num1 % num2</li></ul><p><strong>使用$[]和$(())表达式</strong></p><p>语法格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$[整数1 运算符 整数2]</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $[1+2]</span><br><span class="line"><span class="built_in">echo</span> $((<span class="number">1</span>+<span class="number">2</span>))</span><br></pre></td></tr></table></figure><table><thead><tr><th>完整表达式</th><th>简写表达式</th></tr></thead><tbody><tr><td>i=i+1</td><td>i++</td></tr><tr><td>i=i-1</td><td>i–</td></tr><tr><td>i=i+2</td><td>i+=2</td></tr><tr><td>i=i-2</td><td>i-=2</td></tr><tr><td>i=i*2</td><td>i*=2</td></tr><tr><td>i=i/2</td><td>i/=2</td></tr><tr><td>i=i%2</td><td>i%=2</td></tr></tbody></table><h2 id="小数运算"><a href="#小数运算" class="headerlink" title="小数运算"></a>小数运算</h2><ul><li>bash内仅支持整数运算，不支持小数运算</li><li>我们可以通过计算器软件bc实现小数运算</li></ul><p>如果没有该软件需要安装。centos系统安装方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bc</span><br></pre></td></tr></table></figure><p>bc支持交互式和非交互式两种方式计算，<code>scale=n</code>可以约束小数位</p><p>交互式运算直接bc回车就可以</p><p><strong>非交互式计算</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@yyt ~]<span class="comment"># echo &quot;1.2+1.1&quot; |bc</span></span><br><span class="line">2.3</span><br><span class="line"><span class="comment"># 使用echo命令把要运算的式子通过管道符交给bc计算器</span></span><br><span class="line">[root@yyt ~]<span class="comment"># echo &quot;1.2+1.3+2.5;1.2+1&quot; |bc</span></span><br><span class="line">5.0</span><br><span class="line">2.2</span><br><span class="line"><span class="comment"># 需要多个运算公式可以用分号号：; 隔开 </span></span><br><span class="line">[root@yyt ~]<span class="comment"># echo &quot;scale=2;10/2&quot; |bc</span></span><br><span class="line">5.00</span><br><span class="line"><span class="comment"># 需要约束小数，提前使用scale=n然后用分号隔开后面跟上计算公式</span></span><br></pre></td></tr></table></figure><p><strong>bc 支持比较操作符：&gt;、&gt;=、&lt;、&lt;=、==、!=</strong></p><p><font color=red >表达式成立则返回1，否则返回0</font></p><h1 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h1><p>语法格式：</p><ul><li>test 选项 参数</li><li>[选项 参数] (日后推荐使用这种)</li></ul><h2 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意使用[]是选项和参数的两边都必须要有一个空格存在</span></span><br><span class="line">判断字符串是否为空</span><br><span class="line">[ -z 字符串 ]</span><br><span class="line"></span><br><span class="line">判断两个字符串等于</span><br><span class="line">[ 字符串1 == 字符串2 ]</span><br><span class="line"></span><br><span class="line">判断两个字符串不等于</span><br><span class="line">[ 字符串1 !\= 字符串2 ]</span><br></pre></td></tr></table></figure><h2 id="整数值比较"><a href="#整数值比较" class="headerlink" title="整数值比较"></a>整数值比较</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 整数值1 操作符 整数值2 ]</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>操作符</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>-eq</td><td>等于</td></tr><tr><td>-ne</td><td>不等于</td></tr><tr><td>-ge</td><td>大于或等于</td></tr><tr><td>-le</td><td>小于或等于</td></tr><tr><td>-gt</td><td>大于</td></tr><tr><td>-lt</td><td>小于</td></tr></tbody></table><h2 id="文件目录状态测试"><a href="#文件目录状态测试" class="headerlink" title="文件目录状态测试"></a>文件目录状态测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 操作符 文件或目录]</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>操作符</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>-e</td><td>判断文件或目录是否存在，若存在则结果为真</td></tr><tr><td>-d</td><td>判断对象是否为目录，是则为真</td></tr><tr><td>-f</td><td>判断对象是否为普通文件，是则为真</td></tr><tr><td>-r</td><td>判断文件或目录是否有可读权限，是则为真</td></tr><tr><td>-w</td><td>判断文件或目录是否有可写权限，是则为真</td></tr><tr><td>-x</td><td>对象是否有可执行权限，是则为真</td></tr></tbody></table><h2 id="控制操作符"><a href="#控制操作符" class="headerlink" title="控制操作符"></a>控制操作符</h2><blockquote><p>使用控制符组合多个命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">;</span><br><span class="line">示例：<span class="built_in">ls</span>；<span class="built_in">ls</span> -l</span><br><span class="line"><span class="comment"># 分号分隔命令，如果使用分号，就表示按顺序执行，没有逻辑关系</span></span><br><span class="line">&amp;&amp;</span><br><span class="line">示例：<span class="built_in">ls</span> &amp;&amp; <span class="built_in">ls</span> -l</span><br><span class="line"><span class="comment"># 使用两个&amp;符号，也是按顺序执行，但只有当前面一条命令执行成功时，才会执行后面的命令</span></span><br><span class="line">||</span><br><span class="line">示例：<span class="built_in">ls</span> || <span class="built_in">ls</span> -l</span><br><span class="line"><span class="comment"># 代表或者如果||前面的命令执行成功了，后面则不会执行，前面的失败了。才会执行后面的命令</span></span><br></pre></td></tr></table></figure><p><strong>监控脚本</strong></p><p><code>tr -s </code>删除多余重复的字串（如空格）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> | <span class="built_in">tr</span> -s <span class="string">&quot; &quot;</span> </span><br><span class="line"><span class="comment"># 删除ls命令多余的空格</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;aaaaaaaaacab&quot;</span> |<span class="built_in">tr</span> -s <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="comment"># 删除多余的a</span></span><br></pre></td></tr></table></figure><p>cut命令过滤数据</p><p><code>cut -d &quot;以什么分隔&quot; -f数字（第几个） </code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cut</span> -d <span class="string">&quot;:&quot;</span> -f1 /etc/passwd</span><br><span class="line"><span class="comment"># 以冒号分隔，过滤第一列</span></span><br></pre></td></tr></table></figure><div align="center"><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230403104945916.png" alt="image-20230403104945916" style="zoom:50%;" /></div><div align="center"><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230403105621186.png" alt="image-20230403105621186" style="zoom:50%;" /></div><div align="center"><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230403105850077.png" alt="image-20230403105850077" style="zoom:50%;" /></div><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h1><h2 id="单分支"><a href="#单分支" class="headerlink" title="单分支"></a>单分支</h2><p>语法格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 条件测试</span><br><span class="line"><span class="keyword">then</span> 命令序列</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种写法</span></span><br><span class="line"><span class="keyword">if</span> 条件测试;<span class="keyword">then</span></span><br><span class="line">命令序列</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 我比较喜欢第二种写法</span></span><br><span class="line"></span><br><span class="line">[root@yyt ~]<span class="comment"># if [ $USER == root ];then echo &quot;您当前使用的是管理员用户&quot; ;fi</span></span><br></pre></td></tr></table></figure><div align="center"><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230403110829345.png" alt="image-20230403110829345" style="zoom:50%;" /></div><h2 id="双分支"><a href="#双分支" class="headerlink" title="双分支"></a>双分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件测试;<span class="keyword">then</span></span><br><span class="line">命令序列1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">命令序列2</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>当条件成立时执行命令序列1，否则执行命令序列2</p><h2 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件判断1;<span class="keyword">then</span></span><br><span class="line">命令序列1</span><br><span class="line"><span class="keyword">elif</span> 条件判断2;<span class="keyword">then</span></span><br><span class="line">命令序列2</span><br><span class="line"><span class="keyword">elif</span> 条件判断3;<span class="keyword">then</span></span><br><span class="line">命令序列3</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">命令序列n</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>当条件判断1满足就会执行then后面的命令序列1.如果不满足则否则去判断条件判断2.在不满足就是3，全部不满足了执行else里面的命令序列n。</p><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><p>根据变量的不同取值，重复执行命令序列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 值列表</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">命令序列</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>值列表可以是一个值，或多个值。循环多少次取决于值列表里面有多少值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((初值;条件;步长))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">命令序列</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件测试</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">命令序列</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> 未猜中正确的价格</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"> 反复猜商品价格</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>反复测试条件，只要成立就执行命令序列</p><p><strong>简单的例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只要i小于等于1000就让他一直打印yyt</span></span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 1000 ];<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;yyt&quot;</span></span><br><span class="line"><span class="built_in">let</span> i++</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h1><p>检查，判断变量的取值</p><ul><li>功能类似于多分之的if语句</li><li>如果与预设的值相匹配，则执行对应的操作</li><li>命令序列最后必须以分号结尾</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> 变量 <span class="keyword">in</span></span><br><span class="line">模式1)</span><br><span class="line">命令序列1;;</span><br><span class="line">模式2)</span><br><span class="line">命令序列2;;</span><br><span class="line">... ...</span><br><span class="line">*)</span><br><span class="line">默认命令序列</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p><font color=red>命令序列可以打很多个命令，但是需要注意如果只有一条命令，必须使用双分号结尾，如果有多条命令，那么最后一条命令必须以双分号结尾。</font></p><p>双分号是结束符</p><p><strong>示例</strong></p><p>获取输入，输入redhat返回fedora，输入fedora返回redhat，输入其它，返回必须输入指定要求的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入redhat|fedora:&quot;</span> key</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$key</span> <span class="keyword">in</span></span><br><span class="line">redhat)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;fedora&quot;</span>;;</span><br><span class="line">fedora)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;redhat&quot;</span>;;</span><br><span class="line">*)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;必须输入redhat或fedora&quot;</span></span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *)中的命令序列不需要双分号，因为这已经是结尾了，但是加上也可以正常使用</span></span><br></pre></td></tr></table></figure><p>在case语句中的模式)前还可以写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Y|y|<span class="built_in">yes</span>|YES)</span><br><span class="line">N|n|NO|no)</span><br><span class="line">|代表或者的意思</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><blockquote><p>数组也是一个变量，是一个有点特殊的变量</p><p>存储多个数据的集合就是数组</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@yyt ~]<span class="comment"># a1=(11 22 33) #定义一个数组</span></span><br><span class="line">[root@yyt ~]<span class="comment"># echo $&#123;a1[0]&#125; #调用数组的值</span></span><br><span class="line">11</span><br><span class="line">[root@yyt ~]<span class="comment"># echo $&#123;a1[1]&#125;</span></span><br><span class="line">22</span><br><span class="line">[root@yyt ~]<span class="comment"># echo $&#123;a1[2]&#125;</span></span><br><span class="line">33</span><br><span class="line">[root@yyt ~]<span class="comment"># echo $&#123;a1[*]&#125;</span></span><br><span class="line">11 22 33</span><br></pre></td></tr></table></figure><h1 id="shell函数"><a href="#shell函数" class="headerlink" title="shell函数"></a>shell函数</h1><blockquote><p>在shell环境中，将一些需要重复使用的操作操作，定义为公共的语句块，讲某一段代码取一个名称就是函数。</p></blockquote><p>语法格式1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名&#123;</span><br><span class="line">命令序列</span><br><span class="line">... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法格式2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数名()&#123;</span><br><span class="line">命令序列</span><br><span class="line">... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>调用已定义的函数</strong></p><ul><li><p>格式: <code>函数名</code></p></li><li><p>函数传值</p><ul><li>格式：<code>函数名</code> 值1 值2 …</li><li>传递的值作为函数的”位置参数”</li></ul></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@yyt ~]<span class="comment"># imsg()&#123;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;compute cloud&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@yyt ~]<span class="comment"># imsg</span></span><br><span class="line">hello wprld</span><br><span class="line">compute cloud</span><br></pre></td></tr></table></figure><p>另一种格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@yyt ~]<span class="comment"># function msg&#123;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;compute cloud&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@yyt ~]<span class="comment"># msg</span></span><br><span class="line">hello wprld</span><br><span class="line">compute cloud</span><br></pre></td></tr></table></figure><p><strong>输出颜色</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">cecho</span></span>()&#123;</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[$1m<span class="variable">$2</span>\033[0m&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">cecho 33 ok</span><br><span class="line">cecho 34 ok</span><br><span class="line">cecho 35 ok</span><br><span class="line">cecho 36 ok</span><br></pre></td></tr></table></figure><p><strong>多进程版ping</strong></p><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230404184845951.png" alt="image-20230404184845951" style="zoom:50%;" /><h1 id="中断与退出"><a href="#中断与退出" class="headerlink" title="中断与退出"></a>中断与退出</h1><ul><li>continue 可以结束单次循环</li><li>break可以结束循环体</li><li>exit可以退出脚本</li></ul><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230404185308707.png" alt="image-20230404185308707" style="zoom:50%;" /><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230404185529679.png" alt="image-20230404185529679" style="zoom:50%;" /><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230404185751457.png" alt="image-20230404185751457" style="zoom:50%;" /><p><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230404185901348.png" alt="image-20230404185901348"></p><h1 id="字符串的处理和变量初始化"><a href="#字符串的处理和变量初始化" class="headerlink" title="字符串的处理和变量初始化"></a>字符串的处理和变量初始化</h1><h2 id="字符串的处理"><a href="#字符串的处理" class="headerlink" title="字符串的处理"></a>字符串的处理</h2><h3 id="字符串的截取"><a href="#字符串的截取" class="headerlink" title="字符串的截取"></a>字符串的截取</h3><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230405101745747.png" alt="image-20230405101745747" style="zoom: 50%;" /><p>语法格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;变量:起始位置:长度&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意起始长度是从0开始的</span></span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@yyt ~]<span class="comment"># s=1234567</span></span><br><span class="line"><span class="comment"># 从0的位置开始截取，截取三位</span></span><br><span class="line">[root@yyt ~]<span class="comment"># echo $&#123;s:0:3&#125;</span></span><br><span class="line">123</span><br><span class="line"><span class="comment"># 从3的位置开始截取，截取一位</span></span><br><span class="line">[root@yyt ~]<span class="comment"># echo $&#123;s:3:1&#125;</span></span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="字符串的替换"><a href="#字符串的替换" class="headerlink" title="字符串的替换"></a>字符串的替换</h3><p>替换一个结果</p><p><code>$&#123;变量/旧字符/新字串&#125;</code></p><p>替换全部结果</p><p><code>$&#123;变量//旧字串/新字串&#125;</code></p><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230405103056506.png" alt="image-20230405103056506" style="zoom: 50%;" /><h3 id="字符串掐头"><a href="#字符串掐头" class="headerlink" title="字符串掐头"></a>字符串掐头</h3><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230405103258988.png" alt="image-20230405103258988" style="zoom:50%;" /><h3 id="字符串去尾"><a href="#字符串去尾" class="headerlink" title="字符串去尾"></a>字符串去尾</h3><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230405103529216.png" alt="image-20230405103529216" style="zoom:50%;" /><p>批量更改扩展名</p><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230405103753666.png" alt="image-20230405103753666" style="zoom:50%;" />## 变量初始化<p>原变量有值，返回该变量的值</p><p>原变量无值，返回初始值</p><p>语法格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;变量:-关键词&#125;</span></span><br></pre></td></tr></table></figure><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230405104226200.png" alt="image-20230405104226200" style="zoom:50%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@yyt ~]<span class="comment"># a=123</span></span><br><span class="line">[root@yyt ~]<span class="comment"># echo $&#123;a:-yyt&#125;</span></span><br><span class="line">123</span><br><span class="line">[root@yyt ~]<span class="comment"># echo $&#123;b:-yyt&#125;</span></span><br><span class="line">yyt</span><br></pre></td></tr></table></figure><h1 id="随机密码"><a href="#随机密码" class="headerlink" title="随机密码"></a>随机密码</h1><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230405105016154.png" alt="image-20230405105016154" style="zoom:50%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line"></span><br><span class="line">RANDOM 范围是0--32767</span><br><span class="line"><span class="comment"># 查看上一次产生的随机数</span></span><br><span class="line"><span class="built_in">set</span> |grep RANDOM</span><br><span class="line">如果我们想产生0-25范围内的数：$((<span class="variable">$RANDOM</span>%<span class="number">26</span>))</span><br><span class="line">产生1-68的数：$((<span class="variable">$RANDOM</span>%<span class="number">68</span>+<span class="number">1</span>))</span><br></pre></td></tr></table></figure><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230405111339554.png" alt="image-20230405111339554" style="zoom:50%;" /><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230405111411103.png" alt="image-20230405111411103" style="zoom:50%;" /><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><strong>grep语法格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grep 选项 匹配模式 文件</span><br><span class="line"></span><br><span class="line">-i忽略大小写</span><br><span class="line">-v 取反匹配</span><br><span class="line">-w 匹配单词</span><br><span class="line">-q 静默匹配不将结果显示在屏幕</span><br></pre></td></tr></table></figure><p>描述一个字符集合的表达方式</p><p>模糊匹配</p><table><thead><tr><th><strong>正则符号</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>abc</td><td>匹配abc</td></tr><tr><td>^</td><td>匹配开头</td></tr><tr><td>$</td><td>匹配结尾</td></tr><tr><td>[集合]</td><td>匹配集合中的任意单个字符</td></tr><tr><td>[^集合]</td><td>对集合取反</td></tr><tr><td>.</td><td>代表任意单个字符</td></tr><tr><td>*</td><td>匹配前一个字符任意次(包含0次)</td></tr><tr><td>.*</td><td>匹配任意长度的任意字符</td></tr><tr><td>\{n,m\}</td><td>匹配前一个字符n到m次</td></tr><tr><td>\{n,\}</td><td>匹配前一个字符至少n次</td></tr><tr><td>\{n\}</td><td>匹配前一个字符n次</td></tr></tbody></table><p>例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;[0-9]\&#123;3,4&#125;&quot;</span></span><br><span class="line"><span class="comment"># 意思就是想在一个文件里面找数字，需要的是3-4位数字</span></span><br><span class="line">grep <span class="string">&quot;[0-9]\&#123;3\&#125;&quot;</span></span><br><span class="line"><span class="comment"># 我要的数字必须正好是三位</span></span><br></pre></td></tr></table></figure><h2 id="扩展正则"><a href="#扩展正则" class="headerlink" title="扩展正则"></a>扩展正则</h2><blockquote><p>就是把基本正则给简化了</p></blockquote><table><thead><tr><th><strong>正则符号</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>+</td><td>匹配前面的字符至少一次</td></tr><tr><td>?</td><td>匹配前面的字符0或1次</td></tr><tr><td>()</td><td>组合与保留</td></tr><tr><td>|</td><td>或者</td></tr><tr><td>{n,m}</td><td>匹配前面的字符n到m次</td></tr><tr><td>{n,}</td><td>匹配前面的字符至少n次</td></tr><tr><td>{n}</td><td>匹配前面的字符n次</td></tr></tbody></table><p><font color=red>注意：</font>grep默认不支持扩展正则需要加上<code>-E</code>参数。</p><h2 id="Perl兼容正则"><a href="#Perl兼容正则" class="headerlink" title="Perl兼容正则"></a>Perl兼容正则</h2><p>特点都是以右斜线开头</p><table><thead><tr><th><strong>正则符号</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>\b</td><td>匹配单词边界</td></tr><tr><td>\w</td><td>匹配字符数字下划线</td></tr><tr><td>\W</td><td>和\w相反</td></tr><tr><td>\s</td><td>匹配空白</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\d+</td><td>匹配多个数字</td></tr><tr><td>\D</td><td>匹配非数字</td></tr></tbody></table><p><font color="red">注意：</font>默认的grep不支持perl正则需要加上<code>-P</code>参数</p><p>\b的示例</p><img src="https://jihulab.com/yuntian/img/-/raw/main/shell/image-20230406094928518.png" alt="image-20230406094928518" style="zoom:50%;" /><h1 id="sed基础"><a href="#sed基础" class="headerlink" title="sed基础"></a>sed基础</h1><blockquote><p>流式编辑器</p></blockquote><ul><li>非交互式</li><li>逐行处理</li><li>可以文本进行增删改查等操作</li></ul><h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sed [选项] <span class="string">&#x27;[定位符]指令&#x27;</span> 文件名</span><br><span class="line">命令 | sed [选项] <span class="string">&#x27;[定位符]指令&#x27;</span></span><br><span class="line"></span><br><span class="line">sed -n <span class="string">&#x27;3p&#x27;</span> /etc/passwd</span><br><span class="line">-n 屏蔽默认输出，不要打印全部出来</span><br><span class="line">sed -n <span class="string">&#x27;1,3p&#x27;</span> /etc/passwd</span><br><span class="line">表示打印从第一行到第三行</span><br></pre></td></tr></table></figure><p><strong>常用命令选项</strong></p><p><code>-n</code>屏蔽默认输出</p><p><code>-i</code>直接修改源文件</p><p><code>-r</code>支持扩展正则</p><h2 id="数据定位"><a href="#数据定位" class="headerlink" title="数据定位"></a>数据定位</h2><p><strong>行号定位</strong></p><p>sed可以使用行号；来定位自己需要修改的数据内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">&#x27;3p&#x27;</span>  <span class="comment"># 打印第3行</span></span><br><span class="line">sed -n <span class="string">&#x27;1，3p&#x27;</span> <span class="comment"># 打印1到3行</span></span><br><span class="line">sed -n <span class="string">&#x27;1~2p&#x27;</span> <span class="comment"># 从第1行开始步长为2，也就是第3行第5行会被打印出来</span></span><br><span class="line">sed -n <span class="string">&#x27;2~2p&#x27;</span>  <span class="comment"># 从第2行开始，步长为2</span></span><br><span class="line">sed -n <span class="string">&#x27;2,+3p&#x27;</span> <span class="comment"># 第二行及后面的三行</span></span><br></pre></td></tr></table></figure><p><strong>正则定位</strong></p><p>sed可以使用正则匹配需要的数据，然后再编辑对应的内容。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL主从复制</title>
      <link href="/mysqlzc/"/>
      <url>/mysqlzc/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>主从复制是指将主数据库的DDl(主要由create、alter、drop、truncate),DML操作通过二进制日志传到从库服务器中，然后在从库上面对这些日志重新执行，从而使得从库和主库的数据保持同步</p></blockquote><p>MySQL 复制的有点主要包含以下三个方面：</p><ol><li>主库出现问题可以快速切换到从库提供服务</li><li>实现读写分离，降低主库的访问压力</li><li>可以在从库中执行备份，以免备份期间影响主库服务</li></ol><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><div align='center'><img src='https://s1.ax1x.com/2023/03/28/pp6aZ0s.png'/></div><p>从上图来看，复制分为三步：</p><ol><li>master主库在事务提交操作时，会把数据变更记录在二进制日志文件Binlog中</li><li>从库读取主库的二进制日志文件Binlog ，写入到从库的中继日志relany log</li><li>slave重做中继日志中的事件，将改变反应它自己的数据。</li></ol><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p><strong>master</strong>为主库</p><p><strong>node</strong>为从库</p><h3 id="主库master配置"><a href="#主库master配置" class="headerlink" title="主库master配置"></a>主库master配置</h3><ol><li>开启binlog日志</li></ol><p>在MySQL8.0版本之后默认开启binlog二进制日志，查看主库的binlog二进制日志是否开启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;%log_bin%&#x27;;</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| Variable_name                   | Value |</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| log_bin                         | OFF   |</span><br><span class="line">| log_bin_basename                |       |</span><br><span class="line">| log_bin_index                   |       |</span><br><span class="line">| log_bin_trust_function_creators | OFF   |</span><br><span class="line">| log_bin_use_v1_row_events       | OFF   |</span><br><span class="line">| sql_log_bin                     | ON    |</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">6 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line"># 可以看到在5.7版本中并没有开启</span><br></pre></td></tr></table></figure><p>修改mysql配置文件<code>/etc/my.cnf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=1#开启logbin</span><br><span class="line">log-bin=mysql-bin#指定文件名和路径，这里是默认路径</span><br><span class="line">binlog-format=Row   #文件类型</span><br><span class="line"></span><br><span class="line"># 其实只加入 log-bin=mysql-bin 一行也可以</span><br></pre></td></tr></table></figure><ol start="2"><li>修改mysql文件<code>/etc/my.cnf</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># mysql服务ID，保证整个集群环境中唯一。</span><br><span class="line">server-id=1</span><br><span class="line"># 是否只读，1代表只读，0代表读写</span><br><span class="line">read-only=0</span><br><span class="line"></span><br><span class="line"># 可以不用设置，需要了解一下</span><br><span class="line"># 忽略的数据，指不需要同步的数据库</span><br><span class="line"># binlog-ignore-db=mysql</span><br><span class="line"># 指定同步的数据库</span><br><span class="line"># binlog-do-db=db01</span><br></pre></td></tr></table></figure><ol start="3"><li>登录mysql，创建远程连接的账号，拧授予主从复制权限</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建yyt用户并设置密码，使用户可以在任意主机连接该mysql服务并分配主从复制权限</span><br><span class="line">grant replication slave on *.* to &#x27;yyt&#x27;@&#x27;%&#x27; identified by &#x27;Yyt000000&#x27;;</span><br></pre></td></tr></table></figure><p><strong>扩展</strong></p><p>主从同步账号需要如下这些权限：</p><p><code>replication slave</code></p><p>拥有此权限可以查看从服务器，从主服务器读取二进制日志。</p><p><code>replication client</code></p><p>拥有此权限可以查询master server、slave server状态。</p><p>如果想要在Slave上有权限执行 “LOAD TABLE FROM MASTER” 或 “LOAD DATA FROM MASTER” 语句的话，必须授予全局的 FILE 和 SELECT 权限：</p><p>a、select</p><p>必须有select的权限，才可以使用select table。</p><p>b、file</p><p>拥有file权限才可以执行 select ..into outfile和load data infile…操作，但是不要把file, process, super权限授予管理员以外的账号，这样存在严重的安全隐患。</p><ol start="4"><li>通过指令，查看二进制日志坐标</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br><span class="line"></span><br><span class="line">字段含义说明：</span><br><span class="line">file：从哪个日志文件开始推送日志文件</span><br><span class="line">position：从哪个位置开始推送日志</span><br><span class="line">binlog_ignore_db：指定不需要同步的数据库</span><br></pre></td></tr></table></figure><h3 id="从库node配置"><a href="#从库node配置" class="headerlink" title="从库node配置"></a>从库node配置</h3><ol><li>修改配置文件<code>/etc/my.cnf</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># mysql服务ID，保证整个集群环境中唯一。这里需要注意不能和主库ID一样</span><br><span class="line">server-id=2</span><br><span class="line"># 是否只读，1代表只读，0代表读写</span><br><span class="line">read-only=1</span><br><span class="line"># 对普通用户只读，管理员不受限制</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 扩展(了解即可，不需要设置)</span><br><span class="line"># 设置管理员只读</span><br><span class="line">super-read-only=1</span><br></pre></td></tr></table></figure><ol start="2"><li>重启mysql服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><ol start="3"><li>登录mysql，设置主库配置</li></ol><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E4%B8%BB%E4%BB%8E/image-20230328173205237.png" alt="image-20230328173205237"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=&#x27;10.0.0.102&#x27;,master_user=&#x27;yyt&#x27;,master_password=&#x27;Yyt000000&#x27;;</span><br></pre></td></tr></table></figure><ol start="4"><li>开启同步操作</li></ol><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E4%B8%BB%E4%BB%8E/image-20230328173343810.png" alt="image-20230328173343810"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start replica status; # 8.0.22之后 </span><br><span class="line">start slave; # 8.0.22之前，之后都可以用</span><br></pre></td></tr></table></figure><ol start="5"><li>验证操作</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show replica status\G # 8.0.22之后</span><br><span class="line">show slave status\G # 8.0.22之前，之后都可以使用</span><br></pre></td></tr></table></figure><ol start="6"><li>查看</li></ol><p><font color=red>这里我遇到了一个错误，后面处理</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: </span><br><span class="line">                  Master_Host: 10.0.0.102</span><br><span class="line">                  Master_User: yyt</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: </span><br><span class="line">          Read_Master_Log_Pos: 4</span><br><span class="line">               Relay_Log_File: localhost-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: </span><br><span class="line">             Slave_IO_Running: No</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><h3 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h3><p><code>Slave_IO_Running: No</code> # 负责与主机的io通信</p><p><code>Slave_SQL_Running: Yes</code> # 负责自己的slave mysql进程。</p><p>找到my.cnf里面配置的mysql错误异常日志文件位置，<code>log-error</code>配置信息，我这里是/var/log/mariadb/mariadb.log</p><p>查看错误异常日志后发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023-03-28T10:16:46.124334Z 1 [ERROR] Slave I/O for channel &#x27;&#x27;: Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work. Error_code: 1593</span><br></pre></td></tr></table></figure><p>通过网上查询后发现是 由于uuid相同，而导致触发此异常，</p><p>原因：我的环境是vm虚拟机，克隆一台mysql虚拟机，mysql 有个uuid , 然而uuid 是唯一标识的，所以我克隆过来的uuid是一样的，只需要修改一下uuid 就可以了，找到auto.cnf 文件修改uuid</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># find / -iname &quot;auto.cnf&quot;</span></span><br><span class="line">/soft/mysql-5.7.22-linux-glibc2.12-x86_64/data/auto.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑这个配置文件，修改一位即可</span></span><br><span class="line"><span class="comment"># 重启mysqld服务</span></span><br><span class="line"><span class="comment"># stop slave;</span></span><br><span class="line"><span class="comment"># start slave;</span></span><br></pre></td></tr></table></figure><p>发现问题已解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 10.0.0.102</span><br><span class="line">                  Master_User: yyt</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000002</span><br><span class="line">          Read_Master_Log_Pos: 2007</span><br><span class="line">               Relay_Log_File: localhost-relay-bin.000008</span><br><span class="line">                Relay_Log_Pos: 320</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000002</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p><strong>参考资料</strong></p><p><a href="https://blog.csdn.net/weixin_40816738/article/details/100054450">mysql主从复制之异常解决— Slave_IO_Running: NO_gblfy的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 主从复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令及使用</title>
      <link href="/Git/"/>
      <url>/Git/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>无论是工作还是学习，或者是自己做笔记，我们都经历过版本更新，数据迭代这样的阶段，使用<font color='red'>Git</font>进行版本控制。</p></blockquote><p>版本控制:是一种我们在开发过程中用于管理我们的文件，目录或工程等内容修改历史，方便查看更改历史记录，备份以便恢复从前的软件工程技术。</p><ul><li>实现跨区多人协同开发</li><li>记载和追踪一个或多个文件的历史记录</li><li>保护源代码和文档</li><li>统计工作量</li><li>并行开发，提高开发效率</li><li>跟踪记录整个软件的开发过程</li><li>减轻开发人员的负担，节省时间，同时降低人为错误</li></ul><p><strong>分布式版本控制git</strong></p><p>每个人都拥有全部的代码，安全隐患！</p><p>所有的版本信息仓库全部同步到本地每个用户，这样就可以在本地查看所有历史版本，可以离线本地提交，只需在联网时push到相应的服务器或其他用户那里，由于每个用户那里都保存着所有的版本数据，只要有一个用户的设备没有问题可以恢复所有数据，但是增加了本地存储空间的占用。 </p><p><font color='red'><b>Git</b>是目前世界上最先进的分布式版本控制系统</font></p><h2 id="Git的基本理论-核心"><a href="#Git的基本理论-核心" class="headerlink" title="Git的基本理论(核心)"></a>Git的基本理论(核心)</h2><blockquote><p>工作区域</p></blockquote><p>Git本地有三个工作区域：工作目录,暂存区，资源库，如果加上远程的git仓库就可以分为四个工作区域，文件在这四个区域之间转换关系如下：</p><div align=center><img src="https://s1.ax1x.com/2023/03/25/ppD5bK1.png"/></div><ul><li>workspace：工作区，就是你平时存放项目代码的地方</li><li>index、stage：暂存区，用于临时存放捏改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据，其中HEAD指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目中的一台电脑用于远程数据交换本地的三个区域确切的说应该是git仓库中HEAD指向的版本</li></ul><blockquote><p>工作流程</p></blockquote><ol><li>在工作目录中添加、修改文件；</li><li>将需要进行版本管理的文件放入暂存区域；</li><li>将暂存区域的文件提交到git仓库。</li></ol><p>因此git管理的文件有三种状态：已修改，以暂存，已提交</p><h2 id="Git的基本配置"><a href="#Git的基本配置" class="headerlink" title="Git的基本配置"></a>Git的基本配置</h2><p>查看当前用户的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global -l</span><br></pre></td></tr></table></figure><p>用户名和邮箱配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name “username” <span class="comment">#名称</span></span><br><span class="line">git config --global user.email “email”<span class="comment">#邮箱</span></span><br></pre></td></tr></table></figure><h2 id="Git项目搭建"><a href="#Git项目搭建" class="headerlink" title="Git项目搭建"></a>Git项目搭建</h2><blockquote><p>本地仓库搭建</p></blockquote><p>创建本地仓库的方法有两种一种是创建全新的仓库，另一种是克隆远程仓库</p><p>1、创建全新的仓库，需要用Git管理的项目的根目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p><blockquote><p>克隆远程仓库</p></blockquote><p>1、另一种方法是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆一个项目和它整个代码历史（版本信息）</span></span><br><span class="line">git <span class="built_in">clone</span> url</span><br></pre></td></tr></table></figure><p>2、去github上克隆一个测试!</p><h2 id="Git的基本操作"><a href="#Git的基本操作" class="headerlink" title="Git的基本操作"></a>Git的基本操作</h2><h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><blockquote><p>git status 命令用于查看在你上次提交之后是否对文件进行再次修改</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看指定文件状态</span></span><br><span class="line">git status [指定文件名]</span><br><span class="line"><span class="comment"># 查看所有文件状态</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure><h3 id="git-add命令"><a href="#git-add命令" class="headerlink" title="git add命令"></a>git add命令</h3><blockquote><p>git add 命令可将文件添加到暂存区</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line"><span class="comment"># 将当前目录下面所有文件添加到残存区</span></span><br><span class="line">git add [file1] [file2]</span><br><span class="line"><span class="comment"># 将一个或多个文件添加到暂存区</span></span><br><span class="line">git add [<span class="built_in">dir</span>]</span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br></pre></td></tr></table></figure><h3 id="git-commit命令"><a href="#git-commit命令" class="headerlink" title="git commit命令"></a>git commit命令</h3><blockquote><p>git commit命令将暂存区内容添加到本地仓库中</p></blockquote><p>提交暂存区到本地仓库中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;备注信息&quot;</span></span><br></pre></td></tr></table></figure><p>提交暂存区指定的文件到仓库区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit  [file1] [file2] ... -m <span class="string">&quot;备注信息&quot;</span></span><br></pre></td></tr></table></figure><p>-a参数设置修改文件后不需要执行git add命令直接提交到本地仓库中</p><h3 id="git-reset回退版本"><a href="#git-reset回退版本" class="headerlink" title="git reset回退版本"></a>git reset回退版本</h3><blockquote><p>git reset命令用于回退版本，可以指定退回某一次提交的版本</p></blockquote><p>重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset  [HEAD]</span><br></pre></td></tr></table></figure><p>–soft 参数用于回退到某个版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD</span><br></pre></td></tr></table></figure><p>–hard 参数用于撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD</span><br><span class="line">git reset --hard origin/master</span><br><span class="line"><span class="comment"># 将本地的状态回退到和远程的一样</span></span><br></pre></td></tr></table></figure><p><font color=red>注意：谨慎使用–hard参数，它会删除会退点之前的所有信息！</font></p><p><strong>HEAD说明：</strong></p><ul><li>HEAD表示当前版本</li><li>HEAD^ 上一个版本</li><li>HEAD^^ 上上一个版本</li><li>HEAD^^^ 上上上一个版本</li><li>以此类推…</li></ul><p>另外^符号可以使用~数字代替例如<code>HEAD~0</code>表示当前版本</p><p><font color='green'>另外也可以使用git log查询出的id进行回退版本</font></p><h3 id="git-rm命令用于删除文件"><a href="#git-rm命令用于删除文件" class="headerlink" title="git rm命令用于删除文件"></a>git rm命令用于删除文件</h3><blockquote><p>如果只是简单的从工作目录中手工删除文件，运行git status时就会出现changes not staged for commit的提示，git rm删除文件有多种形式</p></blockquote><p> 将文件从暂存区和工作区中删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> file</span><br></pre></td></tr></table></figure><p>如果删除之前修改过并且已经放到了暂存区域，需要使用 <code>-f</code> 选项强制删除</p><p>如果想把文件从暂存区删除，但仍希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，就可以使用 <code>--cached </code>选项</p><h3 id="git-mv-命令"><a href="#git-mv-命令" class="headerlink" title="git mv 命令"></a>git mv 命令</h3><blockquote><p>用于移动或重命名一个文件、目录或软链接</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">mv</span> [file] [newfile]</span><br></pre></td></tr></table></figure><p>如果文件名已经存在，但还是要重命名它，可以使用 <code>-f</code> 参数</p><h3 id="git-log查看命令提交历史"><a href="#git-log查看命令提交历史" class="headerlink" title="git log查看命令提交历史"></a>git log查看命令提交历史</h3><p>git 提交历史一般常用两个命令：</p><ul><li>git log 查看历史提交记录</li><li>git blame 以列表形式查看指定文件的历史修改记录</li></ul><p><strong>git log</strong></p><p>在使用git提交了若干更新后，或者是克隆某个项目，想查看一下提交历史可以使用 <code>git log</code> 命令查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit d5e9fc2c811e0ca2b2d28506ef7dc14171a207d9 (HEAD -&gt; master)</span><br><span class="line">Merge: c68142b 7774248</span><br><span class="line">Author: runoob &lt;<span class="built_in">test</span>@runoob.com&gt;</span><br><span class="line">Date:   Fri May 3 15:55:58 2019 +0800</span><br><span class="line"></span><br><span class="line">    Merge branch <span class="string">&#x27;change_site&#x27;</span></span><br><span class="line"></span><br><span class="line">commit c68142b562c260c3071754623b08e2657b4c6d5b</span><br><span class="line">Author: runoob &lt;<span class="built_in">test</span>@runoob.com&gt;</span><br><span class="line">Date:   Fri May 3 15:52:12 2019 +0800</span><br><span class="line"></span><br><span class="line">    修改代码</span><br><span class="line"></span><br><span class="line">commit 777424832e714cf65d3be79b50a4717aea51ab69 (change_site)</span><br><span class="line">Author: runoob &lt;<span class="built_in">test</span>@runoob.com&gt;</span><br><span class="line">Date:   Fri May 3 15:49:26 2019 +0800</span><br><span class="line"></span><br><span class="line">    changed the runoob.php</span><br><span class="line"></span><br><span class="line">commit c1501a244676ff55e7cccac1ecac0e18cbf6cb00</span><br><span class="line">Author: runoob &lt;<span class="built_in">test</span>@runoob.com&gt;</span><br><span class="line">Date:   Fri May 3 15:35:32 2019 +0800</span><br></pre></td></tr></table></figure><p><code>--oneline</code>选项查看历史记录的简洁版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@yyt yyt]<span class="comment"># git log --oneline </span></span><br><span class="line">a0c6c01 修改了mysql文章置顶，运行时间</span><br></pre></td></tr></table></figure><p><strong>git blame</strong></p><p>以列表的形式显示指定文件的修改记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git blame file</span><br></pre></td></tr></table></figure><h3 id="git-remote在远程仓库的操作"><a href="#git-remote在远程仓库的操作" class="headerlink" title="git remote在远程仓库的操作"></a>git remote在远程仓库的操作</h3><p><strong>显示所有远程仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p><strong>显示某个远程仓库的信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show 链接</span><br></pre></td></tr></table></figure><p><strong>修改远程仓库地址</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin 项目地址</span><br></pre></td></tr></table></figure><p><strong>添加远程仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 项目地址</span><br></pre></td></tr></table></figure><p><strong>删除远程仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> origin</span><br></pre></td></tr></table></figure><p><strong>修改仓库名</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rename 旧名 新名 </span><br></pre></td></tr></table></figure><h3 id="git-pull命令"><a href="#git-pull命令" class="headerlink" title="git pull命令"></a>git pull命令</h3><blockquote><p>git pull 命令用于从远程获取代码并合并本地的版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull 远程主机名 远程分支名:本地分支名</span><br></pre></td></tr></table></figure><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立“.gitignore”文件，此文件有如下规则：</p><ol><li>忽略文件重的空行或者以#号开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：*代表任意多个字符，问号表示一个字符，方括号表示可选字符范围，大括号表示可选字符串等。</li><li>如果名称的最前面有一个感叹号，表示例外规则将不被忽略。</li><li>如果名称的最前面是一个路径分割符/表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符，表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为注释</span></span><br><span class="line">*.txt <span class="comment">#忽略所有.txt结尾的文件</span></span><br><span class="line">!lib.txt <span class="comment">#但lib.txt除外</span></span><br><span class="line">/temp <span class="comment">#仅忽略项目下的todo文件，不包括其他目录temp</span></span><br><span class="line">build/ <span class="comment">#忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt <span class="comment">#会忽略doc/1.txt文件,但不包括doc/子目录/1.txt</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KVM虚拟化笔记</title>
      <link href="/kvm/"/>
      <url>/kvm/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>KVM/QEMU/LIBVIRTD<ul><li>kvm是Linux的内核的模块，它需要CPU的支持，采用硬件辅助虚拟化技术Intel-VT,AMD-V，内存的相关如intel的EPT和AMD的PVI技术</li><li>qemu是一个虚拟化仿真工具，通过ioctl与内核kvm交互完成对硬件的虚拟化支持</li><li>libvirt是一个对虚拟化管理的接口和工具，提供用户端程序virsh,virt-install,virt-manager,virt-view与用户交互</li></ul></li></ul><h3 id="必备软件"><a href="#必备软件" class="headerlink" title="必备软件"></a>必备软件</h3><ul><li><p>qemu-kvm</p><p>-为kvm提供底层仿真支持</p></li><li><p>libvirt-daemon</p><p>-libvirtd守护进程，管理虚拟机</p></li><li><p>libvirt-client</p><p>-用户端软件，提供客户端管理命令</p></li><li><p>libvirt-daemon-driver-qemu</p><p>-libvirtd连接qemu驱动</p></li></ul><h3 id="可选功能"><a href="#可选功能" class="headerlink" title="可选功能"></a>可选功能</h3><ul><li>virt-install # 系统安装工具</li><li>virt-manager # 图形管理工具</li><li>virt-v2v     # 虚拟机迁移工具</li><li>virt-p2v     # 物理机迁移工具</li></ul><h3 id="虚拟化平台的安装"><a href="#虚拟化平台的安装" class="headerlink" title="虚拟化平台的安装"></a>虚拟化平台的安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y qemu-kvm libvirt-daemon libvirt-client libvirt-daemon-driver-qemu</span><br><span class="line"></span><br><span class="line">systemctl start libvirtd</span><br></pre></td></tr></table></figure><h2 id="KVM虚拟机的组成"><a href="#KVM虚拟机的组成" class="headerlink" title="KVM虚拟机的组成"></a>KVM虚拟机的组成</h2><ul><li><p>虚拟机组成</p><ul><li>内核虚拟化模块(KVM)</li><li>系统设备仿真(QEMU)</li><li>虚拟机管理程序(LIBVIRT)</li></ul><ul><li>一个xml文件(虚拟机配置声明文件)位置 /etc/libvirt/qemu</li><li>一个磁盘镜像文件(虚拟机的硬盘)位置 /var/lib/libvirt/images/</li></ul></li></ul><h2 id="virsh命令介绍"><a href="#virsh命令介绍" class="headerlink" title="virsh命令介绍"></a>virsh命令介绍</h2><p><strong>virsh虚拟机管理</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list [--all] 列出所有虚拟机</span><br><span class="line">start|shutdown|reboot|destroy 启动、关机、重启、强制关闭电源</span><br><span class="line">define|undefine 根据xml文件 创建/删除 虚拟机</span><br><span class="line">console 连接虚拟机的console</span><br></pre></td></tr></table></figure><p><font color="red">在终端使用console会出现未知异常。</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">edit 修改虚拟机的配置</span><br><span class="line">autostart 设置虚拟机开机自启动</span><br><span class="line">domiflist 查看虚拟机网卡信息</span><br><span class="line">domblklist 查看虚拟机硬盘信息</span><br></pre></td></tr></table></figure><p><strong>virsh虚拟网络管理</strong></p><p><font color="red">记忆方法其实很简单，不看net-的内容，只看后面的，其实跟虚拟机操作命令差不多</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">net-list [--all]列出虚拟机</span><br><span class="line">net-start 启动虚拟交换机</span><br><span class="line">net-destroy 强制停止虚拟交换机</span><br><span class="line">net-define 根据xml文件创建虚拟网络设备</span><br><span class="line">net-undefine 删除一个虚拟网络设备</span><br><span class="line">net-edit 修改虚拟交换机的配置</span><br><span class="line">net-autostart 设置虚拟交换机自启动</span><br></pre></td></tr></table></figure><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><blockquote><p>虚拟机常见的磁盘镜像文件有两种格式，分别是qcow2和raw</p></blockquote><table><thead><tr><th>特点\类型</th><th>RAW</th><th><font color=red>QCOW2</font>(写复制)</th></tr></thead><tbody><tr><td>KVM默认</td><td>否</td><td>是</td></tr><tr><td>I/O效率</td><td>高</td><td>较高</td></tr><tr><td>占用空间</td><td>大</td><td>小</td></tr><tr><td>压缩</td><td>不支持</td><td>支持</td></tr><tr><td>后端盘复用</td><td>不支持</td><td>支持</td></tr><tr><td>快照</td><td>不支持</td><td>支持</td></tr></tbody></table><p><strong>qemu-img命令</strong></p><ul><li>qemu-img是虚拟机的磁盘管理命令，支持非常多的磁盘格式，例如raw，qcow2，vdi，vmdk等等</li></ul><p>qemu-img 命令格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">qemu-img 命令 参数 块文件名称 大小</span><br><span class="line"><span class="comment">#常用的命令有</span></span><br><span class="line">create 创建一个磁盘</span><br><span class="line">convert 转换磁盘格式</span><br><span class="line">info 查看磁盘信息</span><br><span class="line">resize 扩容磁盘空间</span><br></pre></td></tr></table></figure><p>创建新的镜像盘文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f 格式 磁盘路径</span><br><span class="line">qemu-img create -f qcow2 disk.img</span><br></pre></td></tr></table></figure><p>查询镜像盘文件的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qemu-img info 磁盘路径</span><br><span class="line">qemu-img info info disk.img</span><br></pre></td></tr></table></figure><p><strong>-b</strong>使用后端模板文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -b disk.img -f qcow2 disk1.img</span><br></pre></td></tr></table></figure><ul><li>案例创建一个磁盘格式为qcow2名字为a.img，大小50G的磁盘文件,查看这个磁盘文件的信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@yyt ~]<span class="comment"># qemu-img create -f qcow2 a.img 50G</span></span><br><span class="line">Formatting <span class="string">&#x27;a.img&#x27;</span>, <span class="built_in">fmt</span>=qcow2 size=53687091200 cluster_size=65536 lazy_refcounts=off refcount_bits=16</span><br><span class="line"><span class="comment"># 查看磁盘信息</span></span><br><span class="line">[root@yyt ~]<span class="comment"># qemu-img info a.img </span></span><br><span class="line">image: a.img</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 50G (53687091200 bytes)</span><br><span class="line">disk size: 196K</span><br><span class="line">cluster_size: 65536</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 1.1</span><br><span class="line">    lazy refcounts: <span class="literal">false</span></span><br><span class="line">    refcount bits: 16</span><br><span class="line">    corrupt: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="XML文件"><a href="#XML文件" class="headerlink" title="XML文件"></a>XML文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh edit 虚拟机名称</span><br></pre></td></tr></table></figure><div align=center><img src='https://s1.ax1x.com/2023/03/25/ppDszdA.png'></div><ul><li>name 虚拟机名称</li><li>memory unit=’KiB’ 最大使用内存</li><li>currentmemory 当前虚拟机配置内存 (一般情况下保持相等)</li><li>vcpu cpu</li></ul><div align=center><img src="https://s1.ax1x.com/2023/03/25/ppDyRYt.png"></div><div align=center><img src='https://s1.ax1x.com/2023/03/25/ppD6a7j.png'></div><div align=center><img src='https://s1.ax1x.com/2023/03/25/ppD60Nn.png'></div><h3 id="批量创建虚拟机"><a href="#批量创建虚拟机" class="headerlink" title="批量创建虚拟机"></a>批量创建虚拟机</h3><div align=center><img src='https://s1.ax1x.com/2023/03/25/ppD6LHH.png'></div><h2 id="virsh扩容磁盘"><a href="#virsh扩容磁盘" class="headerlink" title="virsh扩容磁盘"></a>virsh扩容磁盘</h2><ul><li>virsh虚拟机管理<ul><li><code>domblklist</code> 查看虚拟机硬盘信息</li><li><code>blockresize --path 绝对路径 --size 50G openstack</code>(动态扩容)</li></ul></li></ul><ul><li><p>扩容思路</p><ul><li>首先是硬盘</li><li>其次是分区</li><li>再次是文件系统</li></ul></li><li><p>根分区扩容</p><ul><li>语言必须要设置为英文 <code>LANG=C</code></li><li>查看磁盘设备是否有多余空间 <code>lsblk</code></li><li>扩容第一个分区 <code>growpart /dev/vda 1 </code> 1表示第一个分区</li><li>扩容文件系统 ``xfs_growfs /dev/vda1</li><li>df -hT</li></ul></li></ul><h2 id="命令行安装虚拟机"><a href="#命令行安装虚拟机" class="headerlink" title="命令行安装虚拟机"></a>命令行安装虚拟机</h2><p><strong>需要了解和牢记</strong>以免出现没有图形化的时候无法操作</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><strong>开启vnc访问</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/libvirt/qemu.conf</span><br><span class="line"><span class="comment"># NB, strong recommendation to enable TLS + x509 certificate</span></span><br><span class="line"><span class="comment"># verification when allowing public access</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">vnc_listen = <span class="string">&quot;0.0.0.0&quot;</span>       <span class="comment">#这一行模式是注释的，把注释去掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable this option to have VNC served over an automatically created</span></span><br><span class="line"><span class="comment"># unix socket. This prevents unprivileged access from users on the</span></span><br><span class="line"><span class="comment"># host machine, though most VNC clients do not support it.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This will only be enabled for VNC configurations that have listen</span></span><br><span class="line"><span class="comment"># type=address but without any address specified. This setting takes</span></span><br><span class="line"><span class="comment"># preference over vnc_listen</span></span><br></pre></td></tr></table></figure><p><strong>重启libvirtd服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart libvirtd</span><br></pre></td></tr></table></figure><h3 id="使用命令行安装"><a href="#使用命令行安装" class="headerlink" title="使用命令行安装"></a>使用命令行安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">virt-install \</span><br><span class="line">-n=yyt01 \</span><br><span class="line">-r 1024 \</span><br><span class="line">--vcpus=1 \</span><br><span class="line">-cdrom /root/centos.7.iso \</span><br><span class="line">--disk path=/root/yyt.img,size=20 \</span><br><span class="line">--os-type=linux \</span><br><span class="line">--os-variant=centos7.0 \</span><br><span class="line">--vnc --vncport=5901 \</span><br><span class="line">--network network=default \</span><br><span class="line">--noautoconsole </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">–n 指定虚拟机的名称</span><br><span class="line">–memory 指定分配给虚拟机的内存资源大小</span><br><span class="line">maxmemory 指定可调节的最大内存资源大小，因为KVM支持热调整虚拟机的资源</span><br><span class="line">–vcpus 指定分配给虚拟机的CPU核心数量</span><br><span class="line">-maxvcpus 指定可调节的最大CPU核心数量</span><br><span class="line">–os-type 指定虚拟机安装的操作系统类型</span><br><span class="line">–os-variant 指定系统的发行版本</span><br><span class="line">–location 指定ISO镜像文件所在的路径，支持使用网络资源路径，也就是说可以使用URL</span><br><span class="line">–disk path 指定虚拟硬盘所存放的路径及名称，size 则是指定该硬盘的可用大小，单位是G</span><br><span class="line">–bridge 指定使用哪一个桥接网卡，也就是说使用桥接的网络模式</span><br><span class="line">–graphics 指定是否开启图形</span><br><span class="line">–console 定义终端的属性，target_type 则是定义终端的类型</span><br><span class="line">–extra-args 定义终端额外的参数</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kvm </tag>
            
            <tag> 虚拟化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机鞠婧祎壁纸</title>
      <link href="/jujingyi/"/>
      <url>/jujingyi/</url>
      
        <content type="html"><![CDATA[<h2 id="数量"><a href="#数量" class="headerlink" title="数量"></a>数量</h2><p><strong>已收录：</strong><font color=green>80张</font></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>鞠婧祎中国内地女演员、歌手，1994年6月18日出生于四川省遂宁市，中国内地影视女演员、流行乐歌手。、</p></blockquote><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><blockquote><p>填入你的站点的背景或其他需要图片外链的地方。然后刷新你的站点或网页查看效果实现刷新一次自动随机更换一张鞠婧祎的壁纸<br>支持http和https，需要的话自行复制下方对应地址切换。</p></blockquote><p><strong>HTTPS</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://apl.gsbok.cn/jujingyi</span><br></pre></td></tr></table></figure><p><strong>HTTP</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://apl.gsbok.cn/jujingyi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 鞠婧祎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL笔记</title>
      <link href="/mysql/"/>
      <url>/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL笔记"><a href="#MySQL笔记" class="headerlink" title="MySQL笔记"></a>MySQL笔记</h1><h1 id="SQL命令的使用规则"><a href="#SQL命令的使用规则" class="headerlink" title="SQL命令的使用规则"></a>SQL命令的使用规则</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- SQL命令不区分字母大小写（密码、变量值除外）</span><br><span class="line">- 每条SQL·命令以；结束</span><br><span class="line">- 默认命令不支持Tab键自动补齐</span><br><span class="line">- \c 终止SQL命令</span><br></pre></td></tr></table></figure><p>管理数据库使用SQL（结构化查询语言）</p><ul><li><strong>DDL</strong> 数据定义语言 如：create、alter、drop</li><li><strong>DML</strong> 数据操作语言 如：insert update delete</li><li><strong>DCL</strong> 数据控制语言 如：grant、revoke</li><li>**DTL **数据事物语言 如：commit、rollback、savepoint</li></ul><h1 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h1><ol><li><p><strong>命令行</strong><br> 使用mysql命令连接<br>  <code>- mysql  -u用户名 -p密码 [数据库名]</code><br>  <code>- quit或exit退出</code></p></li><li><p>web页面</p><p>  <code>- phpmyadmin</code></p></li><li><p>安装图形页面软件</p><p>  <code>- SQL yang</code></p></li><li><p>编写脚本（java python，php）   </p></li></ol><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><div align="center"><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql笔记/image-20230406160551816.png" alt="image-20230406160551816" style="zoom:50%;" /></div><h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><p><code>char</code></p><p>定长：char(字符个数)</p><ul><li>最大字符个数255</li><li>不够指定字符个数时在右边用空格补全</li><li>字符个数超出时，无法写入数据</li></ul><p><code>varchar</code></p><p>变长：varchar(字符个数)，最多可以存65532个字符</p><ul><li> 根据数据实际大小分配存储空间</li><li>字符个数超出时无法写入数据</li></ul><p><code>text/blob</code></p><p>大文本类型</p><ul><li>字符数大于65535存储时使用</li></ul><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p>整数类型</p><div align="center"><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql笔记/image-20230406201909853.png" alt="image-20230406201909853" style="zoom:50%;" /></div><p>浮点型</p><div align="center"><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql笔记/image-20230406202218809.png"></div><h2 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h2><p><strong>日期：</strong><code>date</code></p><p>范围: 0001-01-01~9999-12-31</p><p>格式: yyyymmdd(如：19491001)</p><p><strong>年：</strong><code>year</code></p><p>范围：901~2155</p><p>格式：yyyy(如：1998)</p><p><strong>时间：</strong><code>time</code></p><p>格式：HHMMSS(如:221828)</p><p><strong>日期时间</strong>：<code>datetime</code>（存储范围大）</p><p>范围:1000-01-01 00:00:00~9999-12-31 23:59:59</p><p>格式：yyyymmddhhmmss</p><p><strong>日期时间：</strong><code>timestamp</code></p><p>范围：1970-01-01 00:00:00~2038-01-19 00:00:00</p><p>格式：yyyymmddhhmmss</p><h2 id="类型关键字注意"><a href="#类型关键字注意" class="headerlink" title="类型关键字注意"></a>类型关键字注意</h2><ul><li><p>关于日期时间字段</p><ul><li>当未给timestamp字段赋值时，自动以当前系统时间赋值，而datetime值为NULL（空）</li></ul></li><li><p>year类型</p><ul><li>要求使用4位数赋值</li><li>当使用2位数赋值时:01~99</li><li>01-69视为 2001~2069</li><li>70<del>99视为 1970</del>1999</li></ul></li></ul><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>字段的值必须在指定的范围内选择。</p><p><code>enum </code>单选</p><ul><li>格式：字段名 enum(值1，值2,值N)</li><li>仅能在列表里选择一个值</li></ul><p><code>set</code>多选</p><ul><li>格式：字段名 set(值1，值2，值N)</li><li>在列表里选择一个或多个值</li></ul><h1 id="数据库基本管理"><a href="#数据库基本管理" class="headerlink" title="数据库基本管理"></a>数据库基本管理</h1><p><strong>相关杂命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">记录类似文件中的行</span><br><span class="line">- select * from 库名.表名;   #查看表记录</span><br><span class="line">- insert into 库名.表名 values(值列表)#插入表记录</span><br><span class="line"># 此命令插入对应的是表里面有多少列都需要有多少值</span><br><span class="line"># 如何指定字段添加插入多条数据</span><br><span class="line">- insert into 表名(id,name.dizhi) values(id,name,dizhi),(id,name,dizhi);</span><br><span class="line"># 指定插入对应字段，并批量插入多行数据</span><br><span class="line">- delete from 表名 where id=102;</span><br><span class="line"># 删除指定ID为102的行</span><br><span class="line">- delete from 表名 where id=102 and name=&#x27;ccc&#x27;;</span><br><span class="line"># 删除指定ID为102并且name为ccc的行，如果有一个不符合将不会执行删除</span><br><span class="line">- delete from 表名 where id =102 or name=&#x27;ccc&#x27;;</span><br><span class="line"># 删除过户指定ID为102或者是name等于ccc的行数据只要满足一个就会被删除</span><br><span class="line">- delete from 表名;</span><br><span class="line"># 删除所有数据</span><br><span class="line">- update t1 set name=&#x27;ccc&#x27;;</span><br><span class="line"># 更新表数据</span><br><span class="line"># 将t1表里面所有name的字段改为ccc</span><br><span class="line">- update t1 set name=&#x27;ccc&#x27;,dizhi=&#x27;beijing&#x27;  where id=102;</span><br><span class="line"># 指定id为102的行把name改为ccc dizhi改为beijing</span><br><span class="line">- truncate table 表名;#清空表数据</span><br><span class="line">- drop table 表名;#删除表</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="DDL-库管理操作"><a href="#DDL-库管理操作" class="headerlink" title="DDL-库管理操作"></a>DDL-库管理操作</h2><blockquote><p> DDL语言用于对数据库和表结构的字段</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select use();                             #显示连接的用户  </span><br><span class="line">use   库名;     #切换库</span><br><span class="line">select database();                         #获取当前所在的库</span><br><span class="line">show databases;                            #查看所有数据库</span><br><span class="line">create database if not exists 库名;        #建新库，如果已存在不会报错</span><br><span class="line">show tables;                              #显示已有的表</span><br><span class="line">drop database if exists 库名;             #删除库，如果不存在不会报错</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="DDL-表结构修改"><a href="#DDL-表结构修改" class="headerlink" title="DDL-表结构修改"></a>DDL-表结构修改</h2><p>添加一个字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add 字段名 类型(长度)[comment 注释][约束]; #关键字段add表示添加的意思</span><br></pre></td></tr></table></figure><p>在创建时如果需要调整顺序可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add 字段名 列名 first; # 添加到表第一列</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add 字段 列名 after 列名2; # 添加到列名2的后面</span><br></pre></td></tr></table></figure><p><code>first 第一</code></p><p><code>after 在......之后</code></p><p>修改列顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表明 modify column 列名1 数据类型 first|after 列名2;</span><br></pre></td></tr></table></figure><p><strong>格式说明：</strong> <em>列名1为所要调整顺序的列名，first表示将列调整到表的第一个位置，after列名2表示将列调整到列名2之后。</em></p><p>修改数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 modify 字段名 新数据类型（长度）; #关键词modify</span><br></pre></td></tr></table></figure><p>修改字段名和字段类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 change 旧字段名 新字段名 类型 长度 #关键词change</span><br></pre></td></tr></table></figure><p>删除字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop 字段名; #关键词drop</span><br></pre></td></tr></table></figure><p>修改表名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 rename to 新表名; #关键词 rename to</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table 表名; </span><br></pre></td></tr></table></figure><p>删除表,并重新创建该表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate table 表名; </span><br></pre></td></tr></table></figure><h2 id="DML-添加表数据"><a href="#DML-添加表数据" class="headerlink" title="DML-添加表数据"></a>DML-添加表数据</h2><blockquote><p>数据操作语言，用来对数据库中表的数据记录进行增删改操作</p></blockquote><ul><li>给指定字段添加数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名(值1,值2,......) values(值1,值2,......); #点表示后面还有</span><br></pre></td></tr></table></figure><ul><li>给全部字段添加数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 values(值1,值2,......); #注意值需要与表中字段一一对应</span><br></pre></td></tr></table></figure><ul><li>批量添加数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名(字段1,字段2,......) values(值1,值2,.....),(值1,值2,.....),(值1,值2,.....);</span><br><span class="line">insert into 表名 values(值1,值2,.....),(值1,值2,.....),(值1,值2,.....);</span><br></pre></td></tr></table></figure><p><font color='red'> 注意</font></p><ul><li>插入数据时，指定的字段顺序需要与值的顺序是一一对应的</li><li>字符串和日期类型数据应该包含到引号中</li><li>插入数据的大小，应该是在字段的规定范围内</li></ul><h2 id="DML-修改表数据"><a href="#DML-修改表数据" class="headerlink" title="DML-修改表数据"></a>DML-修改表数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update 表名 set 字段名1=值1,字段名2=值2,......[where条件] #关键字update和set</span><br></pre></td></tr></table></figure><p><font color='red'>注意</font></p><ul><li>修改语句的条件可以有，也可以没有，如果没有则会修改整张表的所有数据。</li><li>如需修改多个字段可以用逗号隔开</li></ul><h2 id="DML-删除表数据"><a href="#DML-删除表数据" class="headerlink" title="DML-删除表数据"></a>DML-删除表数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from 表名 [where 条件] #关键字delete和from</span><br></pre></td></tr></table></figure><p><font color='red'> 注意</font></p><ul><li>delete语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。</li><li>delete语句不能删除某一个字段的值(可以使用update)</li></ul><h2 id="DQL-常用查询"><a href="#DQL-常用查询" class="headerlink" title="DQL-常用查询"></a>DQL-常用查询</h2><blockquote><p>数据查询语言，用来查询数据库中的表的记录 查询关键字：select</p><blockquote><p>字段可以使用数学表达式</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">字段列表</span><br><span class="line">from</span><br><span class="line">表名列表</span><br><span class="line">where</span><br><span class="line">条件列表</span><br><span class="line">group by </span><br><span class="line">分组字段列表</span><br><span class="line">having</span><br><span class="line">分组后条件列表</span><br><span class="line">order by</span><br><span class="line">排序字段列表</span><br><span class="line">limit</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><p>1.查询指定字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段1,字段2 from 表名; #查询指定字段</span><br></pre></td></tr></table></figure><p>1.1.查询全部字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from 表名;</span><br></pre></td></tr></table></figure><p>2.设置别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段1 as 别名1 from 表名; #取别名时as可以省略 别名是中文用单引号阔起来</span><br></pre></td></tr></table></figure><p>演示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name &#x27;名字&#x27; from  t2; # 查询name字段设置别名:名字</span><br><span class="line">+--------+</span><br><span class="line">| 名字   |</span><br><span class="line">+--------+</span><br><span class="line">| yyt    |</span><br><span class="line">| hlk    |</span><br><span class="line">+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.<strong>去除重复记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct 字段列表 from 表名;</span><br></pre></td></tr></table></figure><h2 id="DQL-条件查询"><a href="#DQL-条件查询" class="headerlink" title="DQL-条件查询"></a>DQL-条件查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表名 where 条件列表;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><font color='red'>比较运算符</font></th><th align="center"><font color='red'>功能</font></th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="center">&gt;</td><td align="center">小于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="center">=</td><td align="center">等于</td></tr><tr><td align="center">&lt;&gt;或!=</td><td align="center">不等于</td></tr><tr><td align="center">between…and…</td><td align="center">在某个范围内含(最小,最大值)</td></tr><tr><td align="center">in(……)</td><td align="center">在in后面的列表里的值多选一</td></tr><tr><td align="center">like 占位符</td><td align="center">模糊匹配（_匹配单个字符,%匹配任意个字符）</td></tr><tr><td align="center">is null</td><td align="center">是null</td></tr><tr><td align="center">is not null</td><td align="center">不是null</td></tr></tbody></table><table><thead><tr><th align="center"><font color='red'>逻辑运算符</font></th><th align="center"><font color='red'>功能</font></th></tr></thead><tbody><tr><td align="center">and或&amp;&amp;</td><td align="center">并且（多个条件同时成立）</td></tr><tr><td align="center">or或||</td><td align="center">或者（多个条件任意一个成立）</td></tr><tr><td align="center">not或！</td><td align="center">非，不是</td></tr></tbody></table><p><strong>查询age（年龄）大于等于19的数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select *from t2 where age&gt;=19; # 注意这里的&gt;=其实是分开的两个字符，因为本笔记软件的显示异常</span><br><span class="line">+------+------+------------+</span><br><span class="line">| name | age  | sfz        |</span><br><span class="line">+------+------+------------+</span><br><span class="line">| hlk  |   19 | 1234567890 |</span><br><span class="line">| wgh  |   19 |        123 |</span><br><span class="line">| dzy  |   19 |      12345 |</span><br><span class="line">| xxx  |   20 |     123456 |</span><br><span class="line">+------+------+------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>查询age年龄不等于18并且sfz等于123的数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select *from t2 where age!=18 &amp;&amp; sfz=123; # 这里&amp;&amp;表示的等同于and</span><br><span class="line">+------+------+------+</span><br><span class="line">| name | age  | sfz  |</span><br><span class="line">+------+------+------+</span><br><span class="line">| wgh  |   19 |  123 |</span><br><span class="line">+------+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>查询年龄等于19或者是年龄等于20</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select *from t2 where age=19 or age=20;#这里查出的年龄等于19或者是年龄等于20的所有人</span><br><span class="line">+------+------+------------+</span><br><span class="line">| name | age  | sfz        |</span><br><span class="line">+------+------+------------+</span><br><span class="line">| hlk  |   19 | 1234567890 |</span><br><span class="line">| wgh  |   19 |        123 |</span><br><span class="line">| dzy  |   19 |      12345 |</span><br><span class="line">| xxx  |   20 |     123456 |</span><br><span class="line">+------+------+------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>查询年龄小于19的数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select age &#x27;年龄&#x27; from t2  where age&lt;19; #取了个别名，年龄小于19的只有一位</span><br><span class="line">+--------+</span><br><span class="line">| 年龄   |</span><br><span class="line">+--------+</span><br><span class="line">|     18 |</span><br><span class="line">+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>查询年龄最小在15岁，最大在20岁之间的数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from 表名 where age between 15 and 20；</span><br></pre></td></tr></table></figure><p><strong>查询年龄等于15或者20或者30的信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from 表名 where age = 15 or age = 20 or age = 30；</span><br></pre></td></tr></table></figure><p><strong>为了避免以上的多个or可以使用in(….)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from 表名 where age in(15,20,30);</span><br></pre></td></tr></table></figure><p><strong>查询名字为两个字的信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from 表名 where name like &#x27;__&#x27;;</span><br></pre></td></tr></table></figure><p><strong>查询身份证号最后一位为X的员工信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from 表名 where sfz like &#x27;%X&#x27;</span><br></pre></td></tr></table></figure><h2 id="DQL-聚合函数查询"><a href="#DQL-聚合函数查询" class="headerlink" title="DQL-聚合函数查询"></a>DQL-聚合函数查询</h2><blockquote><p>将一列数据作为一个整体进行纵向计算。</p></blockquote><p><strong>常见的聚合函数</strong></p><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">count</td><td align="center">统计数量</td></tr><tr><td align="center">max</td><td align="center">最大值</td></tr><tr><td align="center">min</td><td align="center">最小值</td></tr><tr><td align="center">avg</td><td align="center">平均值</td></tr><tr><td align="center">sum</td><td align="center">求和</td></tr></tbody></table><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 聚合函数(字段列表) from 表名;</span><br></pre></td></tr></table></figure><p>统计表全部数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from 表名 #统计所有</span><br></pre></td></tr></table></figure><p><font color='red'>注意：</font><font color='orac'>所有的null值不参与所有聚合函数的运算。</font></p><p>演示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select count(*) from t2; #这里用统计函数count而不是用sum</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|        5 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>求年龄的平均值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select *from t2; # 查看一下表的所有内容</span><br><span class="line">+------+------+------------+</span><br><span class="line">| name | age  | sfz        |</span><br><span class="line">+------+------+------------+</span><br><span class="line">| yyt  |   18 |        291 |</span><br><span class="line">| hlk  |   19 | 1234567890 |</span><br><span class="line">| wgh  |   19 |        123 |</span><br><span class="line">| dzy  |   19 |      12345 |</span><br><span class="line">| xxx  |   20 |     123456 |</span><br><span class="line">+------+------+------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select avg(age) from t2;#统计年龄字段的平均值，这里用了avg函数</span><br><span class="line">+----------+</span><br><span class="line">| avg(age) |</span><br><span class="line">+----------+</span><br><span class="line">|  19.0000 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>求所有人年龄当中的最大值</strong>；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select max(age) &#x27;年龄&#x27; from t2; #可以对聚合函数上使用别名，使用求最大值的函数max</span><br><span class="line">+--------+</span><br><span class="line">| 年龄   |</span><br><span class="line">+--------+</span><br><span class="line">|     20 |</span><br><span class="line">+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>求所有人年龄最小的那一个带名字</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select min(age) &#x27;年龄&#x27; from t2; #求最小值的函数是min</span><br><span class="line">+--------+</span><br><span class="line">| 年龄   |</span><br><span class="line">+--------+</span><br><span class="line">|     18 |</span><br><span class="line">+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="DQL-分组查询"><a href="#DQL-分组查询" class="headerlink" title="DQL-分组查询"></a>DQL-分组查询</h2><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组过滤后的条件]</span><br></pre></td></tr></table></figure><blockquote><p>where不能对聚合函数进行判断，<font color='red'>having</font>支持使用聚合函数</p><p>执行时机不同where是对分组之前进行过滤，having是对分组之后进行过滤</p><blockquote><p><code>group by</code> 关键词 </p></blockquote></blockquote><p>注意事项</p><ul><li>执行顺序：where&gt;聚合函数&gt;having</li><li>分组之后查询的字段一般为聚合函数和分组字段，查询其他字段毫无意义</li></ul><p><strong>根据学生信息表bstudent查找出有几个女生几个男生</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select stud_sex &#x27;性别&#x27;,count(*) from studentscore.bstudent group by stud_sex;</span><br><span class="line">+--------+----------+</span><br><span class="line">| 性别   | count(*) |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 女     |        7 |</span><br><span class="line">| 男     |       10 |</span><br><span class="line">+--------+----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="DQL-排序查询"><a href="#DQL-排序查询" class="headerlink" title="DQL-排序查询"></a>DQL-排序查询</h2><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表名 order by 字段1 排序方式1，字段2 排序方式2;</span><br></pre></td></tr></table></figure><p>排序方式</p><ul><li>asc代表升序</li><li>desc代表降序</li></ul><p><strong><font color='red'>注意：如果是多字段进行排序，当第一个字段值相同时，才会根据第二个字段进行排序 <br>      默认按照asc升序进行排序所以asc默认可以不写</font></strong></p><h2 id="DQL-分页查询"><a href="#DQL-分页查询" class="headerlink" title="DQL-分页查询"></a>DQL-分页查询</h2><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表名 limit 起始索引，查询记录数</span><br></pre></td></tr></table></figure><p>注意</p><ul><li><font color='red'>起始索引从0开始，起始索引=（查询页码-1）*每页显示记录数。</font></li><li>分页查询是数据库方言，不同的数据库有不同的实现，mysql中是limit</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为limit10。</li></ul><h2 id="DCL-数据控制语言"><a href="#DCL-数据控制语言" class="headerlink" title="DCL-数据控制语言"></a>DCL-数据控制语言</h2><blockquote><p>DCL数据控制语言，用来管理数据库，用户，控制数据库的访问，权限。</p></blockquote><h2 id="DCL-管理用户"><a href="#DCL-管理用户" class="headerlink" title="DCL-管理用户"></a>DCL-管理用户</h2><p>查询用户</p><ul><li>mysql数据库中用户的信息都是存放在“mysql”数据库中user表中</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">select *from mysql.user;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 示例</span><br><span class="line">mysql&gt; select *from mysql.user;</span><br><span class="linespan><br><span class="line">| Host      | User          | Select_priv | Insert_priv | Update_priv | Delete_priv | Create_priv | Drop_priv | Reload_priv | Shutdown_priv | Process_priv | File_priv | Grant_priv | References_priv | Index_priv | Alter_priv | Show_db_priv | Super_priv | Create_tmp_table_priv | Lock_tables_priv | Execute_priv | Repl_slave_priv | Repl_client_priv | Create_view_priv | Show_view_priv | Create_routine_priv | Alter_routine_priv | Create_user_priv | Event_priv | Trigger_priv | Create_tablespace_priv | ssl_type | ssl_cipher | x509_issuer | x509_subject | max_questions | max_updates | max_connections | max_user_connections | plugin                | authentication_string                     | password_expired | password_last_changed | password_lifetime | account_locked |</span><br><span class="linespan><br><span class="line">| localhost | root          | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            | Y                      |          |            |             |              |             0 |           0 |               0 |                    0 | mysql_native_password | *E148ACD30EACBC5E1BC84CD068AEB31EB6C8C749 | N                | 2022-09-17 00:18:35   |              NULL | N              |</span><br><span class="line">| localhost | mysql.session | N           | N           | N           | N           | N           | N         | N           | N             | N            | N         | N          | N               | N          | N          | N            | Y          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            | N                      |          |            |             |              |             0 |           0 |               0 |                    0 | mysql_native_password | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | N                | 2022-09-17 00:12:27   |              NULL | Y              |</span><br><span class="line">| localhost | mysql.sys     | N           | N           | N           | N           | N           | N         | N           | N             | N            | N         | N          | N               | N          | N          | N            | N          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            | N                      |          |            |             |              |             0 |           0 |               0 |                    0 | mysql_native_password | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | N                | 2022-09-17 00:12:27   |              NULL | Y              |</span><br><span class="line">+-----------+---------------+-------------+-------------+-------------+-------------+-------------+-----------+-------------+---------------+--------------+-----------+------------+-----------------+------------+------------+--------------+------------+-----------------------+------------------+--------------+-----------------+------------------+------------------+----------------+---------------------+--------------------+------------------+------------+--------------+------------------------+----------+------------+-------------+--------------+---------------+-------------+-----------------+----------------------+-----------------------+-------------------------------------------+------------------+-----------------------+-------------------+----------------+</span><br><span class="line">3 rows in set (0.10 sec)</span><br></pre></td></tr></table></figure><p>创建用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create user &#x27;用户名&#x27;@&#x27;主机名&#x27; identified by &#x27;密码&#x27;;</span><br><span class="line">创建用户yyt</span><br><span class="line">create user &#x27;yyt&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line"># 需要可以在任意主机上访问</span><br><span class="line">把localhost改为%号</span><br></pre></td></tr></table></figure><ul><li>创建一个用户yyt，只能够在localhost访问，密码是123456</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create user &#x27;yyt&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;；</span><br><span class="line"></span><br><span class="line"># 示例</span><br><span class="line">mysql&gt; create user &#x27;yyt&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;</span><br><span class="line">    -&gt; ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li>创建一个用户dzy，可以在任何一台机器上访问我们的mysql数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">create user &#x27;dzy&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27; # %表示通配，可以在任意主机上面访问</span><br><span class="line"></span><br><span class="line"># 示例</span><br><span class="line">mysql&gt; select count(*) from mysql.user; #首先通过我我们前面学的聚合函数count求数据库总用户数量</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|        3 |# 得到的结果是三个用户，此结果是在创建yyt用户前面执行的，所以创建dzy就会显示五个用户</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create user &#x27;dzy&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;; #创建一个可以在任何机器上访问的用户</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select count(*) from mysql.user; # 我们可以看到目前的结果的确是五个用户</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|        5 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>修改用户可以在任意主机上访问</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update mysql.user set Host=&#x27;%&#x27; where User=&#x27;用户名&#x27;;</span><br></pre></td></tr></table></figure><p><strong>修改用户密码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &#x27;用户名&#x27;@&#x27;主机名&#x27; identified with mysql_native_password by &#x27;1234&#x27;;</span><br></pre></td></tr></table></figure><ul><li>修改用户dzy的用户为000000</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alter user &#x27;dzy&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;000000&#x27;</span><br><span class="line"></span><br><span class="line"># 示例</span><br><span class="line">mysql&gt; alter user &#x27;dzy&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;000000&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 另一个方法，在mysql命令行外面执行</span><br><span class="line">mysqladmin -uroot -p旧密码 password 新密码;</span><br></pre></td></tr></table></figure><p><strong>设置当前用户密码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password = password(&#x27;密码&#x27;);</span><br></pre></td></tr></table></figure><p><strong>修改指定用户密码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password for 用户名 = password(&#x27;密码&#x27;);</span><br></pre></td></tr></table></figure><p><strong>给用户重命名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename user 原用户名 to 新用户名;</span><br></pre></td></tr></table></figure><p><strong>删除用户</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user &#x27;用户名&#x27;@&#x27;主机名&#x27;；</span><br></pre></td></tr></table></figure><p>注意</p><ul><li>主机名可以使用百分号通配</li><li>这类SQL开放人员操作的较少，主要是<font color='red'>DBA数据库管理员</font>使用</li></ul><h2 id="DCL-权限控制"><a href="#DCL-权限控制" class="headerlink" title="DCL-权限控制"></a>DCL-权限控制</h2><blockquote><p>mysql中定义了很多权限</p><blockquote><p>以下是我们经常,常用的几种</p></blockquote></blockquote><table><thead><tr><th align="center">权限</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">alL,ALL PRIVILEGES</td><td align="center">所有权限</td></tr><tr><td align="center">select</td><td align="center">查询数据</td></tr><tr><td align="center">insert</td><td align="center">插入数据</td></tr><tr><td align="center">update</td><td align="center">修改数据</td></tr><tr><td align="center">delete</td><td align="center">删除数据</td></tr><tr><td align="center">alter</td><td align="center">修改表,修改字段</td></tr><tr><td align="center">drop</td><td align="center">删除数据库/表/视图</td></tr><tr><td align="center">create</td><td align="center">创建数据库/表</td></tr></tbody></table><ul><li>其他权限及描述的含义，需要去参考<a href="https://dev.mysql.com/doc/refman/8.0/en/">官方文档</a></li></ul><ol><li>查询权限</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">show grants for &#x27;用户名&#x27;@&#x27;主机名&#x27;；</span><br><span class="line"></span><br><span class="line"># 演示</span><br><span class="line">mysql&gt; show grants for &#x27;yyt&#x27;@&#x27;localhost&#x27;; #查询上面创建的用户yyt的权限</span><br><span class="line">+-----------------------------------------+</span><br><span class="line">| Grants for yyt@localhost                |</span><br><span class="line">+-----------------------------------------+</span><br><span class="line">| GRANT USAGE ON *.* TO &#x27;yyt&#x27;@&#x27;localhost&#x27; |</span><br><span class="line">+-----------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br></pre></td></tr></table></figure><ol start="2"><li>授予权限</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">grant 权限列表 on 数据库名.表名 to &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br><span class="line"></span><br><span class="line"># 如何给所有数据库表赋予权限？</span><br><span class="line"></span><br><span class="line">grant 权限列表 on *.* to &#x27;用户名&#x27;@&#x27;主机名&#x27;；</span><br><span class="line"></span><br><span class="line"># 如何给数据库所有表赋予权限</span><br><span class="line"></span><br><span class="line">grant 权限列表 on 指定库名.* to &#x27;用户名&#x27;@&#x27;主机名&#x27;；</span><br></pre></td></tr></table></figure><ol start="3"><li>撤销权限</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke 权限 on 数据库名.表名 from &#x27;用户名&#x27;@&#x27;主机名&#x27;</span><br></pre></td></tr></table></figure><hr><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><blockquote><p>函数是指一段可以直接被另一段程序调用的程序或代码</p></blockquote><p><a href="https://imgse.com/i/xDGY0U"><img src="https://s1.ax1x.com/2022/10/17/xDGY0U.png" alt="xDGY0U.png" style="zoom:80%;" /></a></p><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><p><a href="https://imgse.com/i/xDGt7F"><img src="https://s1.ax1x.com/2022/10/17/xDGt7F.png" alt="xDGt7F.png"></a></p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 函数(参数);</span><br></pre></td></tr></table></figure><ul><li>字符串拼接<ul><li>concat</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(&#x27;hello&#x27;,&#x27;mysql&#x27;);# 把hello和mysql这个字符串拼接</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/10/17/xDG2Ae.png" alt="演示图111111111111111111111111" style="zoom:80%;" />]</p><ul><li>填字符串str全部转为小写<ul><li>lower（str）</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select lower(&#x27;HELLO&#x27;); # 把括号内HELLO字符传全部转为小写</span><br></pre></td></tr></table></figure><ul><li>将所有的字符转为大写<ul><li>upper</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select upper(&#x27;hello&#x27;);</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/xDGOhj"><img src="https://s1.ax1x.com/2022/10/17/xDGOhj.png" alt="xDGOhj.png" style="zoom:80%;" /></a></p><ul><li>向左填充<ul><li>lpad</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select lpad(&#x27;01&#x27;,5,&#x27;-&#x27;);</span><br></pre></td></tr></table></figure><ul><li>向右填充<ul><li>rpad</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select rpad(&#x27;01&#x27;,5,&#x27;-&#x27;);</span><br></pre></td></tr></table></figure><ul><li>去除空格<ul><li>trim</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select trim(&#x27; hello mysql &#x27;); #trim 是去除左右两边的空格不去除中间的空格</span><br></pre></td></tr></table></figure><h2 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h2><blockquote><p>函数服务内置的命令，可以使用时间函数给字段赋值</p></blockquote><table><thead><tr><th><strong>类型</strong></th><th><strong>用途</strong></th></tr></thead><tbody><tr><td>curtime()</td><td>获取当前的系统时间</td></tr><tr><td>curdate()</td><td>获取当前的系统日期</td></tr><tr><td>now()</td><td>获取当前系统日期和时间</td></tr><tr><td>year()</td><td>获取年</td></tr><tr><td>month()</td><td>获取月</td></tr><tr><td>day()</td><td>获取日</td></tr><tr><td>date()</td><td>获取日期</td></tr><tr><td>time()</td><td>获取时间</td></tr></tbody></table><hr><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><blockquote><ol><li>概念：约束是作用于表中字段上面的规则，用于限制存储在表中的数据</li><li>目的：保证数据库中数据的正确、有效性和完整性</li><li>分类</li></ol></blockquote><table><thead><tr><th align="center">约束</th><th align="center">描述</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">非空约束</td><td align="center">限制字段的数值不能为null</td><td align="center">not null</td></tr><tr><td align="center">唯一约束</td><td align="center">保证该字段所有的数据都是唯一不重复的</td><td align="center">unique</td></tr><tr><td align="center">主键约束</td><td align="center">主键是一行数据的唯一标识要求非空且唯一</td><td align="center">primary by</td></tr><tr><td align="center">默认约束</td><td align="center">保存数据是如果未指定该字段的值，则采用默认值</td><td align="center">default</td></tr><tr><td align="center">检查约束（8.0.16版本之后）</td><td align="center">保证字段值满足某一个或多个条件</td><td align="center">check</td></tr><tr><td align="center">外键约束</td><td align="center">用来让两张表的数据之间建立链接，保证数据的一致性和完整性常见的约束型</td><td align="center">foreign key</td></tr></tbody></table><p><font color='red'>注意：</font></p><p><em>检查约束至mysql 8.0.16版本后才支持</em></p><h2 id="约束演示"><a href="#约束演示" class="headerlink" title="约束演示"></a>约束演示</h2><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql笔记/image-20221006102020701.png" alt="image-20221006102020701" style="zoom: 80%;" /><p>对应的建表语句</p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221006102502612.png" alt="image-20221006102502612"></p><h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><p><strong>通过修改表建立主键约束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add constraint 自定义约束名 primary by （列名）;</span><br></pre></td></tr></table></figure><p><strong>删除主键约束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop primary key;</span><br></pre></td></tr></table></figure><p>如果希望在向表中加入新行时能够由系统自动生成一个唯一标识红表中表中每行数据的序列值，则可以通过主键添加auto_increment关键字来实现</p><p><em>使用自增列时，需要注意如下三点，1 每张表只允许有一个自增列，2 该列的数据类型只能为整数类型，通常取int，3 该列不允许为null值，也不能有默认值，一般情况下不允许人为插入该列数值，也不允许修改该列的值</em></p><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p><strong>通过修改表建立外键约束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add constraint 约束名 foreign key (列名) references 被参照表名 (被参照列名);</span><br></pre></td></tr></table></figure><p><strong>删除外键约束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop foreign key 约束名;</span><br></pre></td></tr></table></figure><p><strong>实现级联更新，级联删除</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">on delete cascade # 级联删除</span><br><span class="line">on update cascade # 级联更新</span><br></pre></td></tr></table></figure><h2 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h2><p><strong>通过修改表建立唯一约束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add constraint 约束名 unique (列名);</span><br></pre></td></tr></table></figure><p><strong>删除唯一约束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop index 约束名</span><br></pre></td></tr></table></figure><h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2><p><strong>通过修改表建立非空约束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 modify 列名 数据类型 not null;</span><br></pre></td></tr></table></figure><p><strong>删除非空约束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 modify 列名 数据类型 null;</span><br></pre></td></tr></table></figure><h2 id="检查约束"><a href="#检查约束" class="headerlink" title="检查约束"></a>检查约束</h2><p><strong>通过修改表建立检查约束</strong>、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add constraint 约束名 check (条件表达式);</span><br></pre></td></tr></table></figure><p><strong>删除检查约束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop check (条件表达式);</span><br></pre></td></tr></table></figure><h2 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h2><p><strong>通过修改表建立默认约束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 alter 列名 set default 默认值;</span><br></pre></td></tr></table></figure><p><strong>删除唯一约束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 alter 列名 drop default;</span><br></pre></td></tr></table></figure><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><blockquote><p>一个关系型数据库中的多个表之间一般都存在着某种内在的联系（如外键约束），它们共同提供有用的信息，所以在实际的查询中，用户往往需要从多个表中查询相关数据。若一个查询同时涉及两个以上的表并通过连接条件实现，则称为连接查询。</p></blockquote><blockquote><p>笛卡尔积:笛卡尔乘积是指在数学中，两个集合，A集合和B集合的所有组合情况<font color='red'>(在多表查询时需要消除无效的笛卡尔积)</font></p></blockquote><blockquote><p>笛卡尔积现象：当两张表进行连接查询的时候，没有任何条件限制，最终的查询结果条数是两张表记录条数的乘积</p></blockquote><blockquote><p>避免了笛卡尔积现象，但是并不会减少匹配次数，只不过显示的结果是有效记录</p></blockquote><h2 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h2><ul><li>概述<ul><li>项目开发中，在进行数据库结构设计时，会根据业务需求及业务模块之间的关系，分析设计表结构由于业务之间的相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：<ul><li>一对多(多对一)</li><li>多对多</li><li>一对一</li></ul></li></ul></li></ul><hr><ul><li>一对多（多对一）</li></ul><p><a href="https://imgse.com/i/xrdKwq"><img src="https://s1.ax1x.com/2022/10/18/xrdKwq.png" alt="xrdKwq.png"></a></p><p><font color='green'>部门是1的地方，员工是多的地方，因为一个部门可以有多个员工</font></p><hr><ul><li>多对多</li></ul><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221018150709113.png" alt="image-20221018150709113"></p><hr><ul><li>一对一</li></ul><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221018151100811.png" alt="image-20221018151100811"></p><p><font color='green'>一对一经常用于拆分</font></p><hr><h2 id="多表查询概述"><a href="#多表查询概述" class="headerlink" title="多表查询概述"></a>多表查询概述</h2><blockquote><p>指从多张表中查询数据</p></blockquote><h2 id="连接查询-内连接"><a href="#连接查询-内连接" class="headerlink" title="连接查询-内连接"></a>连接查询-内连接</h2><blockquote><p>内连接查询的是两张表中字段交集的部分</p><blockquote><p>内连接的特点就是完全能匹配上这个条件的数据查询出来</p></blockquote></blockquote><p>隐式内连接:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表1，表2 where 条件...;</span><br></pre></td></tr></table></figure><ul><li>在进行多表查询的时候如果表名字比较长，我们在字段前面就需要加上比较长的表名，这个时候就需要给表设置别名，通过别名可以在表的后面空格加别名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from emp e,emp2 d;</span><br></pre></td></tr></table></figure><p><strong>对于一个DQL语句来说先执行的是from，就可以给表起别名继续后面的操作</strong></p><p><font color='red'>在显示内连接中inner这个关键字是可以省略的</font></p><p>显示内连接:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表1 [inner] join 表2 on 连接条件...;</span><br></pre></td></tr></table></figure><h2 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h2><blockquote><p>外连接和内连接的区别</p></blockquote><p><strong>左外连接语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表名 left [outer] join 表2 on 条件...;</span><br></pre></td></tr></table></figure><p>左外连接查询的是，完全包含左表，表1的数据也包含了表1和表2交集部分的数据</p><p><strong>右外连接语法：</strong></p><p>right代表：将join关键字右边的这张表看成主表，主要是为了将这张表的数据全部查询出来，捎带着关联查询左边的表。在外连接中两张表存在主次关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表1 right [outer] join 表2 on 条件；</span><br></pre></td></tr></table></figure><p>相当于查询表2（右表）的所有数据包含表1和表2交集部分的数据</p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221023174225867.png" alt="右外连接"></p><p>查询bstudent表的所有数据及每个学生对应的班级</p><h2 id="自连接语法："><a href="#自连接语法：" class="headerlink" title="自连接语法："></a>自连接语法：</h2><blockquote><p>对一张表连续查询多次</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表A 别名A join 表A 别名 B on 条件表达式</span><br></pre></td></tr></table></figure><ul><li>在自连接查询中一定要给表起别名</li></ul><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><blockquote><p>  对于联合查询就是把多次查询的结果合并起来形成一个新的查询结果集</p><blockquote><p>关键字 union,union all</p><p>union all是直接将查询的结果合并</p><p>union 是将查询的结果进行去重</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表A union [all] select 字段列表 from 表B;</span><br></pre></td></tr></table></figure><p>示例：查询学生表bstudent中性别是女 和 男生是团员的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from bstudent where stud_sex=&#x27;女&#x27; union select *from bstudent where stud_sex=&#x27;男&#x27; &amp;&amp; members=&#x27;团员&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221024102426738.png" alt="image-20221024102426738"></p><p><font color='red'>对于联合查询的多张表列数必须保持一致，字段类型也需要保持一致</font></p><p><font color='red'>对于union all 会将全部的数据直接合并到一起，union会对合并之后的数据去重</font></p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><blockquote><p>在SQL语句中嵌套的select语句成为嵌套查询，又称<font color='red'>子查询</font></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from t1 where column1=(select column1 from t2);</span><br></pre></td></tr></table></figure><ul><li>根据子查询结果不同，分为<ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询(子查询结果为一行）</li><li>表子查询（子查询的结果为多行多列）</li></ul></li></ul><ul><li>根据子查询位置，分为：where之后，from之后，select之后。</li></ul><p>where子句中的子查询可以看做是一个条件用括号包含</p><p>from子句中的子查询，可以将子查询的查询结果当做成一张临时表（看待</p><p>select后面出现的子查询，只能返回一条结果，多余一条就报错(这个内容不需要记住，了解即可)</p><h2 id="合并查询结果union"><a href="#合并查询结果union" class="headerlink" title="合并查询结果union"></a>合并查询结果union</h2><blockquote><p>合并查询结果集合</p></blockquote><p><strong>select查询语句之间用union进行合并</strong></p><p>使用union的效率要高一些，对于表连接来说，每连接一次新表则满足笛卡尔积，成倍的翻。。。。</p><p>但是union可以减少匹配的次数，在减少匹配次数的情况下还可以完成两个结果集的拼接。</p><p>union把乘法变成加法进行运算。union在使用时候注意，在进行结果集合并的时候要求两个结果集的列数相同，</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><blockquote><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败，事务一旦提交就不可逆。</p></blockquote><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221025095521164.png" alt="image-20221025095521164"></p><p><strong>查看事务提交方式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@autocommit;  # 查询结果显示1表示默认事物提交方式为自动提交</span><br></pre></td></tr></table></figure><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql笔记/image-20221025150836290.png" alt="image-20221025150836290" style="zoom: 50%;" /><p><strong>设置事务的提交方式-改为手动提交</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set @@autocommit=0; # 设置为0默认为手动提交</span><br></pre></td></tr></table></figure><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql笔记/image-20221025151935102.png" alt="image-20221025151935102" style="zoom: 50%;" /><p><strong>提交事务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit;</span><br></pre></td></tr></table></figure><p><strong>回滚事务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollback;</span><br></pre></td></tr></table></figure><h2 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性:"></a>事务的四大特性:</h2><ul><li>原子性：事务是不可分割的最小操作单元，要么全部成功，要么全部失败</li><li>一致性： 事务完成时必须使所有的数据都保持一致状态</li><li>隔离性： 数据库系统提供的隔离机制，保证事务在不受外部并发影响的独立环境下运行</li><li>持久性：事务一旦提交或回滚，它对数据库中的改变就是永久的</li></ul><h2 id="并发事务问题："><a href="#并发事务问题：" class="headerlink" title="并发事务问题："></a>并发事务问题：</h2><table><thead><tr><th align="center">问题</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">脏读</td><td align="center">一个事务读到另一个事务还没有提交的数据</td></tr><tr><td align="center">不可重复读</td><td align="center">一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读</td></tr><tr><td align="center">幻读</td><td align="center">一个事务按照条件查询数据时，没有对应的数据行，但在插入数据时又发现这行数据已经存在，好像出现了‘‘幻影’’</td></tr></tbody></table><h2 id="事务的隔离级别："><a href="#事务的隔离级别：" class="headerlink" title="事务的隔离级别："></a>事务的隔离级别：</h2><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>read uncommitted</td><td>✔</td><td>✔</td><td>✔</td></tr><tr><td>read committed</td><td>❌</td><td>✔</td><td>✔</td></tr><tr><td>repeatable read(默认)</td><td>❌</td><td>❌</td><td>✔</td></tr><tr><td>serializable</td><td>❌</td><td>❌</td><td>❌</td></tr></tbody></table><p>查看事务的隔离级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@transaction_isolation;</span><br></pre></td></tr></table></figure><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql笔记/image-20221025173029132.png" alt="image-20221025173029132" style="zoom: 67%;" /><p>设置事务隔离级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set session transaction isolation level read uncommitted;</span><br></pre></td></tr></table></figure><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql笔记/image-20221025174441090.png" alt="image-20221025174441090" style="zoom:80%;" /><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221025174723521.png" alt="image-20221025174723521"></p><h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><blockquote><p>存储引擎就是存储数据建立索引、更新/查询数据等技术的实现方式，存储引擎是基于表的，而不是基于库的，所以存储引擎也可以被成为表类型</p></blockquote><p>mysql默认存储引擎是<font color='red'>InnoDB</font>&gt;</p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221025175733540.png" alt="image-20221025175733540"></p><ol start="2"><li>查看当前数据库支持的存储引擎</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show engines;</span><br></pre></td></tr></table></figure><ul><li>InnoDB</li></ul><p>介绍InnoDB是一种兼顾高可靠性和高性能的通用存储引擎，在mysql5.5之后，innodb是默认的mysql存储引擎</p><p>特点</p><p>DML操作遵循ACID模型，支持<font color='red'>事务</font></p><p>行级锁，提高并发访问性能</p><p>支持外键Foreign key 约束，保证数据的完整性和正确性</p><p>文件</p><p>支持数据库崩溃后自动恢复机制</p><p>xxx.ibd:xxx代表的是表名，innoDB引擎的每张表都会对应一个这样的表空间，存储该表的结构（frm、sdi）、数据和索引。</p><p>参数：innodb_file_per_table</p><p>查看系统变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;innodb_file_per_table&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">engine=innodb</span><br></pre></td></tr></table></figure><hr><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><blockquote><p>索引实在数据库表上面的字段添加的，是为了提高查询效率存才的一种机制一张表的一个字段可以添加一个索引，多个字段联合起来也可以添加索引，索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制</p></blockquote><p> 在mysql当中主键上以及unique(唯一)字段上都会自动添加索引！</p><p>什么条件下我们会考虑给字段添加索引？</p><p>条件1：数据量庞大（到底有多么庞大，这个需要测试，因为，每一个硬件环境不同）</p><p>条件2： 该字段经常出现在where后面以条件的形式存在，也就是说这个字段总是被扫描</p><p>条件3： 该字段很少的dml操作（因为dml之后索引需要重新排序）</p><p><font color='red'>建议不要随意添加索引，因为索引也是需要维护的，太多的话反而会降低系统的性能。建议通过主键查询，建议通过unique约束字段进行查询，效率是比较高的</font></p><p>索引的优缺点</p><p>创建索引</p><table><thead><tr><th align="center">优势</th><th align="center">劣势</th></tr></thead><tbody><tr><td align="center">提高数据检索的效率，降低数据库的IO成本</td><td align="center">索引也是需要占用空间的</td></tr><tr><td align="center">通过索引列对数据进行排序，降低数据排序的成本，降低cpu的消耗</td><td align="center">索引大大提高了查询效率，同时却降低了更新表的速度，如对表进行insert，updatedelete时，效率降低。</td></tr></tbody></table><p>为什么innodb存储引擎选择使用b+tree索引结构</p><ol><li>相对于二叉树层级更少，搜索效率高</li><li>对于b-tree,无论是叶子节点还是非叶子节点，都会保存数据，这样会导致一页中存储的键值减少，指针随着减少，要同样保存大量的数据只能增加树的高度，导致性能降低。</li><li>相对hash索引，b+tree支持匹配范围及排序操作；</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create index emp_ename index on emp(ename)</span><br><span class="line"></span><br><span class="line"># emp_ename起名</span><br></pre></td></tr></table></figure><p>删除索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index emp_ename index on emp;</span><br></pre></td></tr></table></figure><p>查看sql语句是否使用了索引进行检索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select *from emp where ename=&#x27;bane&#x27;;</span><br></pre></td></tr></table></figure><h2 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h2><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>primary</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>unique</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>fulltext</td></tr></tbody></table><p>在innodb存储引擎中，根据索引的存储形式，又可以分为以下两种。</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引</td><td>将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只能有一个</td></tr><tr><td>二级索引</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p><strong>聚集索引选取规则</strong></p><p><font color='red'>注意：</font></p><ol><li>如果存在主键，主键索引就是聚集索引。</li><li>如果不存在主键，将使用第一个唯一索引作为聚集索引</li><li>如果表没有主键，或没有合适的唯一索引，则innodb自动生成一个rowid作为隐藏的聚集索引</li></ol><p><strong>索引的语法</strong></p><ul><li>创建索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create [unique|fulltext] index 索引名称 on 表名(字段名...);</span><br><span class="line"></span><br><span class="line"># 一个索引可以包含多个字段，如果一个索引只有一个字段被称为单列索引，多个字段称为联合索引或称为组合索引</span><br></pre></td></tr></table></figure><ul><li>查看索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from 表名;</span><br></pre></td></tr></table></figure><ul><li>删除索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index 索引名称 on 表名;</span><br></pre></td></tr></table></figure><h2 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h2><blockquote><p>对于我们做sql优化的时候我们经常优化的是select查询语句</p></blockquote><ul><li>SQL执行频率</li></ul><p>mysql连接客户端成功后，通过show [session|global] status 命令提供服务器状态信息，可以查询到insert、update、delete、select的访问频次：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global status like &#x27;Com_______&#x27;;# 共七个下滑线</span><br></pre></td></tr></table></figure><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql笔记/image-20221113165044820.png" alt="image-20221113165044820" style="zoom:80%;" /><ul><li>慢查询日志</li></ul><p>慢查询日志记录了所有执行时间超过指定参数(秒，默认10秒)的所有sql语句</p><p>mysql中的慢查询日志默认没有开启，需要在mysql的配置文件(/etc/my.cnf)中配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 开启mysql满日志查询开关</span><br><span class="line">slow_query_log=on</span><br><span class="line">#设置慢查询日志文件存放路径</span><br><span class="line">slow_query_log_file=/var/log/mariadb/localhost_slow.log</span><br><span class="line"># 设置慢查询日志的时间为1秒，sql语句执行时间超过两秒就会被视为满查询，会被记录到慢查询日志中</span><br><span class="line">long_query_time=1</span><br></pre></td></tr></table></figure><p>在mysql查看mysql慢查询日志是否开启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;slow_query%&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;long_query%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221113172329297.png" alt="image-20221113172329297"></p><p>查看慢查询日志文件</p><p><code>cat /var/log/mariadb/localhost_slow.log</code></p><p>实时输出慢查询日志文件尾部的信息，可以使用Linux的tail命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f 文件名</span><br></pre></td></tr></table></figure><ul><li>profile详情-<strong>检测每一条查询sql语句的耗时情况</strong></li></ul><p>show profiles能够在做sql优化时帮助我们了解时间都耗费到哪里去了，通过have_profiling参数，能够看到当前mysql是否支持profile操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@profiling; #查看mysql是否支持profile;</span><br></pre></td></tr></table></figure><p>默认profiling是关闭的，可以通过set语句在session/global级别开启prifiling</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set profiling=1;# 为0是关闭,1为开启</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show profiles;</span><br></pre></td></tr></table></figure><p>查询指定query_id的sql语句各个阶段的耗时情况</p><p>show profile for query id；</p><p>show profile cpu for query id；</p><ul><li>explain执行计划</li></ul><p>explain执行计划各自段含义：</p><ul><li>id</li></ul><p>​    select查询的序列号，表示查询中执行select子句或者是操作表的顺序（id相同，执行顺序从    上到下，id不同，值越大越先执行）</p><ul><li>select_type</li></ul><p>​    表示select查询类型</p><ul><li>type</li></ul><p>​    表示连接类型，性能由好到差连接类型为null，const，eq_ref,range,index,all</p><ul><li>possible_key</li></ul><p>​    显示可能应用在这张表的索引，一个或多个</p><ul><li>key</li></ul><p>​    实际用到的索引，为null则表示没有用到索引</p><ul><li>key_len</li></ul><p>​    表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</p><ul><li>filtered</li></ul><p>​    表示返回结果的行数站需读取行数的百分比，filtered的值越大越好。</p><h2 id="索引使用"><a href="#索引使用" class="headerlink" title="索引使用"></a>索引使用</h2><p>不要在索引列上进行运算，否则索引将会失效，字符串不添加单引号索引也会失效，模糊查询如果只是尾部模糊匹配索引不会失效，如果头部模糊匹配，索引失效。</p><h2 id="索引使用-1"><a href="#索引使用-1" class="headerlink" title="索引使用"></a>索引使用</h2><p>如果索引了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引最左列开始，并且不跳过索引中的列，如果跳跃了某一列，索引将部分失效（后面的索引失效）。</p><p><strong>最左前缀法则，select语句跟你列放的位置没有关系，但是最左边查询的字段必须存在</strong></p><ul><li>范围查询</li></ul><p>联合索引中出现范围查询（&gt;,&lt;）范围查询，右侧的索引列索引失效</p><p>在业务中如果业务允许尽量使用大于等于的运算符保证索引生效</p><ul><li>索引列运算</li></ul><p>不要在索引列上进行运算操作，索引将失效</p><ul><li>字符串不加引号索引失效，因为会出现隐式类型转换</li><li>模糊查询</li></ul><p>如果仅仅是尾部进行模糊匹配，索引不会失效，如果是头部模糊匹配索引失效</p><ul><li>or连接条件</li></ul><p>用or分割开的条件，如果or前的条件中的列有索引，那么涉及的索引都不会被用到。or所连接的字段，任意一侧没有索引那么索引将全部失效</p><ul><li>数据分布影响</li></ul><p>如果mysql评估使用索引比全表还慢，会走全表查询</p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221115194415344.png" alt="image-20221115194415344"></p><ul><li>SQL提示</li></ul><p>sql提示是优化数据库的重要手段简单来说就是在sql中添加一些人为的提示来达到优化操作的目的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use index(索引名) #告诉数据库建议用哪个索引</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ignore index(索引名) #告诉数据库不要用哪个索引</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">force index(索引名字)  #必须使用指定索引</span><br></pre></td></tr></table></figure><p>语法格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 三个的语法格式都是</span><br><span class="line">select *from 表名 use index或ignore index或force index  where 条件表达式</span><br><span class="line"># 都是在from表名后添加</span><br></pre></td></tr></table></figure><p>use index是建议mysql使用指定的索引，mysql有权不使用</p><p>force index 必须使用指定索引</p><h1 id="数据的导入导出"><a href="#数据的导入导出" class="headerlink" title="数据的导入导出"></a>数据的导入导出</h1><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p><strong>检索目录</strong></p><blockquote><p>MySQL要求数据导入导出调用的文件在MySQL的检索目录下才可以</p></blockquote><p>安装mysql服务软件时，会自动创建检索目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;secure file priv&quot;; # 查看</span><br></pre></td></tr></table></figure><p>把系统文件的内容存储到数据库的表里。默认只有root用户拥有数据导入权限</p><p>数据导入步骤</p><ul><li>建表</li><li>拷贝文件到检索目录下</li><li>导入数据</li></ul><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql笔记/image-20230410203030833.png" alt="image-20230410203030833" style="zoom:50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">load data infile &quot;/目录名/文件名&quot;</span><br><span class="line">into table 库名.表名</span><br><span class="line">fields terminated by &quot;符号&quot; # 列间隔符号</span><br><span class="line">lines terminated by &quot;\n&quot;; # 行结束符号 \n换行</span><br></pre></td></tr></table></figure><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20230410203828920.png" alt="image-20230410203828920"></p><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><p>一共有三种命令格式分别是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">格式1：</span><br><span class="line">select into outfile &quot;/目录名/文件名&quot;;</span><br><span class="line"></span><br><span class="line">格式2：</span><br><span class="line">select into outfile &quot;/目录名/文件名&quot;</span><br><span class="line">terminated by &quot;分隔符&quot;;</span><br><span class="line"># 默认会以换行符号\n当做每一行的结束符</span><br><span class="line"></span><br><span class="line">格式3：</span><br><span class="line">select into outfile &quot;/目录名/文件名&quot;;</span><br><span class="line">terminated by &quot;分隔符号&quot;; # 如 ：</span><br><span class="line">lines terminated &quot;结束符号&quot;;# 想使用其他符号当做每一行的结束符号 如 ###</span><br></pre></td></tr></table></figure><p><strong>第一种格式演示图</strong></p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20230410204556832.png" alt="image-20230410204556832"></p><p><strong>第二种格式演示图</strong></p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20230410204627190.png" alt="image-20230410204627190"></p><p><strong>第三种格式演示图</strong></p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20230410204924286.png" alt="image-20230410204924286"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结如下：</p><ul><li>导出数据的行数有SQL查询决定</li><li>导出的是表的记录，不包括字段名</li><li>自动创建存储数据的文件</li><li>存储数据文件，具有唯一性</li></ul><h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -h服务器 -u 用户名 -p 密码 数据库名 &gt;备份文件.sql</span><br><span class="line"></span><br><span class="line"># 选项</span><br><span class="line">-A 备份所有的库</span><br><span class="line">-B 备份多个数据库</span><br><span class="line">-F 备份之前刷新日志</span><br><span class="line">-E 备份时间调度器的代码</span><br><span class="line">-R 备份存储过程和存储函数</span><br></pre></td></tr></table></figure><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221109170916972.png" alt="image-20221109170916972"></p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221109171014484.png" alt="image-20221109171014484"></p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221109171845675.png" alt="image-20221109171845675"></p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221109173626513.png" alt="image-20221109173626513"></p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221109173947319.png" alt="image-20221109173947319"></p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221109175625635.png" alt="image-20221109175625635"></p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><blockquote><p>视图就是一个虚拟的表，没有真实数据，他是由select查询语句定义，同真实的表数据一致，但是视图并不在数据库中以存储的数据形式存在</p></blockquote><p>视图的作用：</p><ol><li>安全原因，视图可以隐藏一些敏感的信息</li><li>简化查询，对查询语句简化</li></ol><p><strong>语法格式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create  [or replace ] view 定义的视图名 AS select查询语句;</span><br><span class="line"># or replace 是可以创建并且也可以对视图进行修改</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create view myuser as select user,host from mysql.user;</span><br><span class="line"></span><br><span class="line">select *from my.user;</span><br><span class="line"># 简化查询步骤</span><br></pre></td></tr></table></figure><p><strong>查询视图</strong></p><p>查看创建视图的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create view 视图名称;</span><br></pre></td></tr></table></figure><p>查看视图数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from 视图名称;</span><br></pre></td></tr></table></figure><p><strong>修改视图</strong></p><p>第一种：直接使用创建视图的语句添加select查询的字段前提需要添加or replace</p><p>创建视图是如果存在已同名的视图则重新创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create or replace view 原视图名称 as 新的查询语句;</span><br></pre></td></tr></table></figure><p>第二种：使用alter语句修改视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter view 视图名称 as 新的查询语句;</span><br></pre></td></tr></table></figure><p><strong>删除视图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop view 视图名称;</span><br></pre></td></tr></table></figure><p>视图的检查选项</p><p>当使用with check option子句创建视图时，mysql会通过视图检查正在更改的每一个行，例如插入，更新，，删除，以使其符合视图的定义，mysql允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致为了确定检查的范围，mysql提供了两个选项cascaded和local默认是cascaded</p><p>cascaded和之前创建外键实现级联删除和级联更新的cascade一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add constraint 约束名 foreign key (字段名) references 被参照的表 (被参照的表的字段) on update cascade 级联更新|on delete cascade 级联删除;</span><br></pre></td></tr></table></figure><p>local会递归去找当前视图所依赖的视图的检查选项</p><p><strong>视图更新</strong></p><p>要使视图可更新，视图中的行与基础视图中的行之间必须要存在一对一的关系，如果视图包含以下任何一项则该视图不可更新</p><ol><li>聚合函数或窗口函数（sum，min，max，avg，count等）</li><li>distinct 去重</li><li>group by</li><li>having</li><li>union或union all</li></ol><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><blockquote><p>存储过程是事先经过编译并存储在数据库中的一段sql语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。</p><p>存储过程思想上很简单，就是数据库sql语言里面的代码封装与重用。</p></blockquote><ul><li>特点</li></ul><p>封装，复用</p><p>可以接收参数，也可以返回数据</p><p>减少网络交互，效率提升</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a><strong>语法</strong></h3><ul><li>创建</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create procedure 存储过程名称（【参数列表】）</span><br><span class="line">begin</span><br><span class="line">sql语句</span><br><span class="line">end；</span><br></pre></td></tr></table></figure><ul><li>调用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call 名称 （【参数】）</span><br></pre></td></tr></table></figure><ul><li>查看</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create procedure 存储过程名称；</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop procedure if exists 存储过程名；</span><br></pre></td></tr></table></figure><p><font size=3px color='red'>注意：在命令行中，执行创建存储过程的sql时，需要通过关键字delimiter指定sql语句的结束符。</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h3><blockquote><p>系统变量是mysql服务器提供，不是用户定义的，属于服务器层面，分为全局变量（global），会话变量（session）</p></blockquote><p>系统变量</p><p>查看系统变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show global|session variables; # 后面可以加上like模糊匹配</span><br><span class="line">select @@session|global 系统变量名；# 查看指定变量值</span><br></pre></td></tr></table></figure><p>默认不写全局或会话变量，默认就是会话变量</p><p><font size=3px color=red>注意两个@表示的是系统变量一个@表示用户自定义变量</font></p><h3 id="用户自定义变量"><a href="#用户自定义变量" class="headerlink" title="用户自定义变量"></a><strong>用户自定义变量</strong></h3><blockquote><p>用户根据自己定义的变量，用户变量不用提前声明，在用的时候直接用@变量名使用就可以，其作用域为当前连接。</p></blockquote><p>赋值</p><p><code>set @变量名=值；</code></p><p><code>set @变量名:=值;</code></p><p><code>select @变量名:=值;</code></p><p><code>select 字段名 into @变量名 from 表名; #将表查询的结果赋值给一个变量</code></p><p>推荐使用:=来给定义变量</p><p>使用</p><p><code>select @变量名;</code></p><p>用户自定义的变量无需赋值，默认是个空值null</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a><strong>局部变量</strong></h3><p>局部变量是根据需要定义的在局部生效的变量，访问之前需要declare声明，可用作存储过内的局部变量和输入参数，局部变量的范围是在其内声明的begin…end块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 声明</span><br><span class="line">declare 变量名 变量类型 [default...]</span><br></pre></td></tr></table></figure><p>变量类型就是数据的字段类型，int，varchar，char，date。enum，time等</p><p>赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set 变量名=值;</span><br><span class="line">set 变量名:=值;</span><br><span class="line">select 字段名 into 变量名 from 表名;</span><br></pre></td></tr></table></figure><h3 id="条件判断if"><a href="#条件判断if" class="headerlink" title="条件判断if"></a><strong>条件判断if</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if 条件1 then</span><br><span class="line">sql语句;</span><br><span class="line">elseif 条件2 then</span><br><span class="line">sql语句;</span><br><span class="line">else</span><br><span class="line">不满足条件1和条件2执行;</span><br><span class="line">end if;</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a><strong>参数</strong></h3><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221208152158056.png" alt="image-20221208152158056"></p><h3 id="条件判断case"><a href="#条件判断case" class="headerlink" title="条件判断case"></a><strong>条件判断case</strong></h3><ul><li>语法格式1</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">case 表达式</span><br><span class="line">when 1 then sql语句;</span><br><span class="line">when 2 then sql语句;</span><br><span class="line">else sql语句;</span><br><span class="line">end case;</span><br><span class="line"></span><br><span class="line"># 如果说表达式的值为1的话执行when 1 then后面的语句，为2同理</span><br></pre></td></tr></table></figure><ul><li>语法格式2</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case</span><br><span class="line">when a=1 then sql语句;</span><br><span class="line">when a=2 then sql语句;</span><br><span class="line">else sql语句;</span><br><span class="line">end case;</span><br></pre></td></tr></table></figure><h3 id="循环while"><a href="#循环while" class="headerlink" title="循环while"></a><strong>循环while</strong></h3><ul><li>先判定条件如果条件为true则执行逻辑，否则，不执行逻辑</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while 条件 do</span><br><span class="line">sql语句;</span><br><span class="line">end while;</span><br></pre></td></tr></table></figure><h3 id="循环repeat"><a href="#循环repeat" class="headerlink" title="循环repeat"></a><strong>循环repeat</strong></h3><ul><li>repeat是有条件的循环控制语句，当满足条件的时候退出循环，具体语法为：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 先执行一次逻辑然后判定逻辑是否满足，如果满足则退出如果不满足则继续下一次循环</span><br><span class="line">repeat</span><br><span class="line">sql语句;</span><br><span class="line">until 条件</span><br><span class="line">end repeat</span><br></pre></td></tr></table></figure><h3 id="循环loop"><a href="#循环loop" class="headerlink" title="循环loop"></a><strong>循环loop</strong></h3><ul><li>lopp实现简单的循环，如果不在sql逻辑中增加退出循环的条件，可以用来实现简单的死循环，loop可以配合一下两个语句使用;</li><li>leave ：配合循环使用，退出循环</li><li>iterate ： 必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[标记;] loop</span><br><span class="line">sql逻辑</span><br><span class="line">end loop [标记;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">leave label; 指定标记的循环体</span><br><span class="line">iterate label; 直接进入下一次循环</span><br></pre></td></tr></table></figure><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a><strong>游标</strong></h3><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221208162108850.png" alt="image-20221208162108850"></p><h3 id="条件处理程序"><a href="#条件处理程序" class="headerlink" title="条件处理程序"></a>条件处理程序</h3><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221208162034619.png" alt="image-20221208162034619"></p><h3 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h3><ul><li>存储函数是有返回值的存储过程，存储函数的参数只能是in（输入类型）具体语法如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create function 存储函数名称(参数列表)</span><br><span class="line">returns type [characteristic...]</span><br><span class="line">begin</span><br><span class="line">sql语句;</span><br><span class="line">return...;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">characteristic说明</span><br><span class="line">- deterministic: 相同的输入参数总是产生相同的结果</span><br><span class="line">- no sql：不包含sql语句</span><br><span class="line">- reads sql data 包含读取数据的语句，但不包含写入数据的语句。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><ul><li>触发器是与表相关的数据对象，是指在insert/update/delete之前或者是之后，触发并执行触发器中定义的sql语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作。</li><li>使用别名old和new来引用触发器中发生变化的记录内容，这与其他的数据库是相似的，现在触发器还只支持行级触发，不支持语句级别触发。</li></ul><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20221208164107653.png" alt="image-20221208164107653"></p><ul><li>语法</li></ul><p><strong>创建</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create trigger 触发器名称</span><br><span class="line">before/after insert/update/delete on 表名 for each row</span><br><span class="line">begin</span><br><span class="line">sql语句;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p><strong>查看</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show triggers;</span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop trigger [数据库.]触发器名字 # 如果不指定数据库名字则表示当前数据库</span><br></pre></td></tr></table></figure><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><ul><li>介绍</li></ul><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中除传统的计算资源的争用外，数据也是一种供许多用户共享的资源，如何保证数据并发访问的一致性，有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据并发访问性能的一个重要因素，从这个角度来说，锁对数据库而显得尤其重要，也更加复杂。</p><p>按照锁的粒度分，分为三类，全局锁（锁定数据库中的所有表），表级锁（每次操作锁住整张表），行级锁（每次操作锁住对应的行数据）。</p><h2 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h2><ul><li>介绍</li></ul><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的dml的写语句，ddl语句，已经更新操作的事物提交语句都将被阻塞。</p><p>通常的使用场景事做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性。</p><p><strong>加锁</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush tables  with read lock;</span><br></pre></td></tr></table></figure><p><strong>解锁</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlock tables;</span><br></pre></td></tr></table></figure><p><font color=red>在innodb引擎中，我们可以在备份时加上参数–single-transaction参数来完成不加锁的一致性数据备份</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --single-transaction  -u root -p123456 数据库名&gt;自定义命名.sql</span><br></pre></td></tr></table></figure><h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h2><ul><li>介绍</li></ul><p>表级锁，每次操作锁住整张表，锁定粒度大，发生锁冲突的概率最高，并发度最低，应用在myisam，innodb，bdb等存储引擎中。</p><p>对于表级锁主要分为以下三类：</p><ol><li><p>表锁</p></li><li><p>元数据锁（meta data lock，mdl）</p></li><li><p>意向锁</p></li></ol><h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><ul><li>表锁分为两类：</li></ul><ol><li>表共享读锁（read lock）</li><li>表独占写锁（write lock）</li></ol><p>语法：</p><ol><li><p>加锁：<code>lock tables 表名... read/write</code>。</p></li><li><p>释放锁：<code>unlock tables</code>/客户端断开连接。</p></li></ol><p>加了写锁后当前客户端可以读取和写入这个表，其他客户端不能读取和写入。会处于阻塞状态</p><h3 id="元数据锁"><a href="#元数据锁" class="headerlink" title="元数据锁"></a>元数据锁</h3><p>mdl加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上。mdl锁主要作用事维护表元数据的一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。<font color=red>为了避免DML与DDL冲突，保证读写的正确性。</font></p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20230223101946934.png" alt="image-20230223101946934"></p><p>查看元数据锁</p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20230223102133665.png" alt="image-20230223102133665"></p><h3 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h3><p>为了避免DML语句在执行时，加的行锁，与表锁的冲突，在innodb中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查。</p><ol><li>意向共享锁（IS）：与表锁共享锁(read)兼容，与表锁</li></ol><p>排它锁(write)互斥。</p><ol start="2"><li>意向排他锁(IX)：与表共享锁(read)及排它锁(write)都互斥，意向锁之间不会互斥</li></ol><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20230223103410094.png" alt="image-20230223103410094"></p><h2 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h2><p>行级锁，每次操作锁住对应的行数据。锁定粒度小，发生锁冲突的概率最低，并发度最高，应用在innodb存储引擎中。</p><p>innodb的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁，对于行级锁，主要分为以下三类。</p><p>行锁(record lock): 锁定单个行记录的锁，防止其他事物对此进行update，delete。在rc，rr隔离级别下都支持。</p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20230223104433763.png" alt="image-20230223104433763"></p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20230223104508927.png" alt="image-20230223104508927"></p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20230223104606784.png" alt="image-20230223104606784"></p><p>间隙锁（GAP lock）：锁定索引记录间隙(不含该记录)，保证索引记录的间隙不变，并锁住数据前面的间隙gap，在rr隔离级别下支持。</p><p>临键锁(Next-key lock):行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙gap，在rr隔离级别下支持。</p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20230223104657793.png" alt="image-20230223104657793"></p><h1 id="运维篇"><a href="#运维篇" class="headerlink" title="运维篇"></a>运维篇</h1><p>日志</p><ul><li>错误日志</li><li>二进制日志</li><li>查询日志</li><li>慢查询日志</li></ul><h2 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h2><p>错误日志是mysql中最重要的日志之一，它记录了mysqld启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，建议首先查看此日志。</p><p>该日志是默认开启的，默认存放目录/var/log/，默认的日志文件名为mysqld.log。查看日志位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%log_error%&quot;</span><br></pre></td></tr></table></figure><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20230316103330611.png" alt="image-20230316103330611"></p><h2 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h2><p>二进制日志，记录了所有的DDL（数据定义语言）语句和DML（数据操纵语言）语句，但不包括数据查询（select，show）语句。</p><p>作用:灾难时的数据恢复。mysql的主从复制。在mysql8版本中默认的二进制日志是开启着的，涉及到的参数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%log_bin%&quot;</span><br></pre></td></tr></table></figure><p><img src="https://jihulab.com/yuntian/img/-/raw/main/mysql%E7%AC%94%E8%AE%B0/image-20230316103854034.png" alt="image-20230316103854034"></p><h2 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h2><p>查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的SQL语句，默认情况下摩擦互相你日志是未开启的。如果需要开启查询日志，可以设置以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%general%&quot;</span><br></pre></td></tr></table></figure><p>修改MySQL的配置文件/etc/my.cnf文件，添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 该选项用来开启慢查询日志，可选值0H或1 0关闭 1开启</span><br><span class="line">general_log=1</span><br><span class="line">#设置日志的文件名，如果没有指定默认为host_name.log</span><br><span class="line">general_log_file=mysql.query.log</span><br></pre></td></tr></table></figure><h2 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h2><p>慢查询日子记录了所有执行时间超过参数long_query_time设置值并且扫描记录数不小于min_examined_row_limit的所有的SQL语句的日志，默认未开启。long_query_time默认为10秒，最小为0，精度可以到微秒。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#慢查询日志</span><br><span class="line">slow_query_log=1</span><br><span class="line">#执行时间参数</span><br><span class="line">long_query_time=2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记</title>
      <link href="/docker/"/>
      <url>/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="docker学习笔记"><a href="#docker学习笔记" class="headerlink" title="docker学习笔记"></a>docker学习笔记</h1><blockquote><p> 弱小和无知不是生存的障碍，傲慢才是。</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>[TOC]</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">环境查看</span><br><span class="line"><span class="built_in">uname</span> -r <span class="comment">#查看系统内核</span></span><br><span class="line"><span class="built_in">cat</span> /etc/os-release <span class="comment"># 查看系统版本</span></span><br><span class="line">查看官网文档进行安装</span><br></pre></td></tr></table></figure><h2 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h2><ul><li>获取阿里云docker镜像加速链接后（根据阿里云提示配置加速器）</li></ul><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version #显示docker的详细信息</span><br><span class="line">docker info #显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line">dokcer 命令 --help #帮助命令</span><br></pre></td></tr></table></figure><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker images #查看本地主机上的镜像</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">-a #列出全部</span><br><span class="line">-q #只显示ID</span><br><span class="line"></span><br><span class="line">docker search 镜像名 #搜索镜像</span><br><span class="line"></span><br><span class="line">docker pull #下载镜像</span><br><span class="line"></span><br><span class="line">docker rmi 镜像名 #删除镜像 可以跟多个镜像名以空格隔开</span><br><span class="line">docker rmi $(docker images -aq)#删除所有镜像</span><br></pre></td></tr></table></figure><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><blockquote><p>有了镜像才能创建容器</p></blockquote><h4 id="新建容器并启用"><a href="#新建容器并启用" class="headerlink" title="新建容器并启用"></a>新建容器并启用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参数说明</span></span><br><span class="line">--name=&quot;name&quot; #容器名字用来区分容器</span><br><span class="line">-d#后台方式运行</span><br><span class="line">-it#使用交互方式运行，进入容器查看内容</span><br><span class="line">-p#指定容器的端口 -p 8080:8080</span><br><span class="line">-p 主机端口:容器端口</span><br><span class="line">-p 容器端口</span><br><span class="line">-p ip:主机端口:容器端口</span><br><span class="line">-P#随机端口</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从容器中退出主机</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">容器不停止退出</span></span><br><span class="line">``ctrl+p+q``</span><br></pre></td></tr></table></figure><h4 id="列出所有运行的容器"><a href="#列出所有运行的容器" class="headerlink" title="列出所有运行的容器"></a>列出所有运行的容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps #与docker images -aq使用方法一致</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">-n=数字 <span class="comment">#显示最近创建的容器</span></span></span><br></pre></td></tr></table></figure><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id#删除指定的容器</span><br><span class="line">dokcer rm $(docker ps -aq)#删除所有的容器</span><br><span class="line">docker ps -aq|xargs docker rm #删除所有的容器</span><br></pre></td></tr></table></figure><h4 id="启动和停止的容器的操作"><a href="#启动和停止的容器的操作" class="headerlink" title="启动和停止的容器的操作"></a>启动和停止的容器的操作</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器ID#启动容器</span><br><span class="line">docker restart 容器ID#重启容器</span><br><span class="line">docker stop 容器ID#停止当前正在运行的容器</span><br><span class="line">docker kill 容器ID#强制停止当前容器</span><br></pre></td></tr></table></figure><h3 id="常用的其他命令"><a href="#常用的其他命令" class="headerlink" title="常用的其他命令"></a>常用的其他命令</h3><p>后台启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker run -d centos</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">常见的坑，docker容器使用后台运行，就必须要有一个前台进程，dokcer发现没有应用，就会立即停止</span></span><br></pre></td></tr></table></figure><p>查看日志命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker logs #查看日志</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示日志</span></span><br><span class="line">-tf 显示日志加时间</span><br><span class="line">--tail number #显示日志条数</span><br></pre></td></tr></table></figure><p>查看容器内部的进程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器ID</span><br></pre></td></tr></table></figure><p>查看镜像的元数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器ID</span><br></pre></td></tr></table></figure><p>在容器外往docker容器内写入命令可以用-c选项后面跟”命令”</p><h4 id="进入正在运行的容器"><a href="#进入正在运行的容器" class="headerlink" title="进入正在运行的容器"></a>进入正在运行的容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通常进入容器都是使用后台方式运行的，需要进入容器修改一些配置</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker exec -it 容器ID /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令2</span></span><br><span class="line">docker attach 容器ID #退出容器，就会立即停止容器运行，通过ctrl+P+q</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 两个区别exec进入容器后会打开一个新的终端可以在里面操作（常用），</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># attach进入容器正在执行的终端不会启动新的进程</span></span></span><br></pre></td></tr></table></figure><h4 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法格式</span></span><br><span class="line">docker cp 容器ID:容器内路径 目的地主机路径</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝是一个手动的过程，可以使用-v数据卷的技术实现数据自动的同步</span></span><br></pre></td></tr></table></figure><hr><h3 id="commint镜像"><a href="#commint镜像" class="headerlink" title="commint镜像"></a>commint镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dokcer commint 提交容器为一个新的副本</span><br><span class="line"></span><br><span class="line">dokcer commint -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 目标镜像名:版本</span><br></pre></td></tr></table></figure><h3 id="将打包好的镜像保存到本地"><a href="#将打包好的镜像保存到本地" class="headerlink" title="将打包好的镜像保存到本地"></a>将打包好的镜像保存到本地</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o 命令的tar文件 镜像ID或名字</span><br></pre></td></tr></table></figure><h3 id="从本地加载docker镜像"><a href="#从本地加载docker镜像" class="headerlink" title="从本地加载docker镜像"></a>从本地加载docker镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker load -i 镜像的tar包  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选项</span></span><br><span class="line">-i # 指定加载的镜像</span><br></pre></td></tr></table></figure><h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><blockquote><p>为保证删除后容器数据丢失风险较大，可以使用docker数据卷技术实现数据的自动同步</p><p>并且删除容器后数据不会丢失，数据可以持久化，数据实时同步保存到本地</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">端口映射</span></span><br><span class="line">docker run -it -p 主机端口:容器内端口 镜像ID\镜像名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目录映射</span></span><br><span class="line">dokcer run -it -v 主机目录:容器内目录 --name yyt 镜像ID\镜像名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dokcer inspect 容器ID，查看容器的详细信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker inspect 容器ID</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dokcer inspect 容器ID</span></span><br></pre></td></tr></table></figure><ul><li><p><font color='red'><b>注意:</b></font></p><p>​    不管是端口还是目录映射都需要是 主机的端口或目录:容器内的端口或路径</p></li></ul><h4 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匿名挂载</span></span><br><span class="line">-v 容器内路径</span><br><span class="line"></span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx 镜像ID # -v不指定主机路径直接写容器内部路径</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里发现不指定容器内目录的就是匿名挂载。我们在-v的时候只写了容器内的路径没有写容器外路径</span></span><br><span class="line"></span><br><span class="line">dokcer volume ls #查看所有的卷的情况</span><br><span class="line"></span><br><span class="line">-v 主机路径:容器内路径</span><br><span class="line"></span><br><span class="line">dokcer run -d -P --name nginx02 -v /yyt:/etc/nginx 镜像ID #具名挂载</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker  volume inspect 跟上docker volume <span class="built_in">ls</span>查出的卷ID 查看一下卷的地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color='green'>所有docker容器内的卷，没有指定目录的情况下都是在/var/lib/docker/volumes/xxxxx/_data</font></p><p>我们通过具名挂载可以很方便的找到我们的一个卷，大多数情况我们都在使用的是”具名挂载“</p><p><font color='red'>不建议使用匿名挂载</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 如何确定是具名挂载还是匿名挂载，还是指定路径挂载！</span><br><span class="line">-v 容器内路径#匿名挂载</span><br><span class="line">-v 卷名:容器内路径 #具名挂载</span><br><span class="line">-v /宿主机路径:容器内路径 #指定路径挂载</span><br></pre></td></tr></table></figure><p>拓展:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-v yyt:/etc/nginx:ro #具名挂载</span><br><span class="line"></span><br><span class="line">-v yyt:/etc/nginx:rw #具名挂载</span><br><span class="line"></span><br><span class="line">ro #只读</span><br><span class="line"></span><br><span class="line">rw #可读可写</span><br><span class="line"></span><br><span class="line">一旦设定了容器权限，容器对我们挂载出来的内容就有限定了！</span><br><span class="line"></span><br><span class="line">只要看到ro就说明只能通过宿主机来进行改变，容器内部是不能进行操作的</span><br></pre></td></tr></table></figure><p><strong>数据卷容器</strong></p><p>多个mysql同步数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动三个容器</span></span><br><span class="line"></span><br><span class="line">docker run -it --name yyt --volumes-from 被继承父容器</span><br></pre></td></tr></table></figure><h3 id="初识Dockerfile"><a href="#初识Dockerfile" class="headerlink" title="初识Dockerfile"></a>初识Dockerfile</h3><p>Dockerfile就是用来构建docker镜像的</p><p>通过脚本可以生成镜像，脚本就是一个命令，每个命令都是一层一层的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Dockerfile指令说明简洁版：</span><br><span class="line"></span><br><span class="line">FROM</span><br><span class="line">构建镜像基于哪个镜像</span><br><span class="line"></span><br><span class="line">MAINTAINER</span><br><span class="line">镜像维护者姓名或邮箱地址</span><br><span class="line"></span><br><span class="line">RUN</span><br><span class="line">构建镜像时运行的指令</span><br><span class="line"></span><br><span class="line">CMD</span><br><span class="line">运行容器时执行的shell环境</span><br><span class="line"></span><br><span class="line">VOLUME</span><br><span class="line">指定容器挂载点到宿主机自动生成的目录或其他容器</span><br><span class="line"></span><br><span class="line">USER</span><br><span class="line">为RUN、CMD、和 ENTRYPOINT 执行命令指定运行用户</span><br><span class="line"></span><br><span class="line">WORKDIR</span><br><span class="line">为 RUN、CMD、ENTRYPOINT、COPY 和 ADD 设置工作目录，就是切换目录</span><br><span class="line"></span><br><span class="line">HEALTHCHECH</span><br><span class="line">健康检查</span><br><span class="line"></span><br><span class="line">ARG</span><br><span class="line">构建时指定的一些参数</span><br><span class="line"></span><br><span class="line">EXPOSE</span><br><span class="line">声明容器的服务端口（仅仅是声明）</span><br><span class="line"></span><br><span class="line">ENV</span><br><span class="line">设置容器环境变量</span><br><span class="line"></span><br><span class="line">ADD</span><br><span class="line">拷贝文件或目录到容器中，如果是URL或压缩包便会自动下载或自动解压</span><br><span class="line"></span><br><span class="line">COPY</span><br><span class="line">拷贝文件或目录到容器中，跟ADD类似，但不具备自动下载或解压的功能</span><br><span class="line"></span><br><span class="line">ENTRYPOINT</span><br><span class="line">运行容器时执行的shell命令</span><br></pre></td></tr></table></figure><h3 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h3><blockquote><p>docker hub 注册账号</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker login -u 用户名 -p 密码 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录完成后就可以提交镜像了</span></span><br><span class="line"></span><br><span class="line">docker push 用户名/文件名:版本号</span><br></pre></td></tr></table></figure><h3 id="docker网络"><a href="#docker网络" class="headerlink" title="docker网络"></a>docker网络</h3><blockquote><p>ifconfig 或ip addr 查看网络信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker如何处理容器网络访问的</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器ID ip addr<span class="comment">#查看容器内部网络地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 宿主机可以ping通容器内部吗?</span></span><br><span class="line">  答案是肯定可以的</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ul><li>我们每启动一个容器，docker都会给容器分配一个IP 。我们只要安装了docker，就会有一个网卡docker0</li><li>docker0使用了桥接的方式，桥接物理网卡进行上网</li></ul><blockquote><p>我们发现这些容器带来的网卡都是一对一对的，</p><p>evth-pair 就是一对的虚拟设备接口，他们都是成对出现的，一段连着协议，一段彼此相连</p><p>正因为有这个特性我们通常用evth-pair 充当一个桥梁，连接各种虚拟网络设备的</p></blockquote><p>容器之间也是可以互相ping通的</p><p><strong>网络模型演示图：</strong></p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/docker%E7%AC%94%E8%AE%B0/image-20221003202510815.png" alt="image-20221003202510815"></p><blockquote><p>结论：tomcat01和tomcat02是共用一个路由器docker0</p></blockquote><p><font color='red'><b>注意:</b></font></p><ul><li>所有的容器在不指定网络的情况下，都是docker0路由的</li><li>docker会给容器分配一个默认的可用IP</li></ul><p><strong>docker之间通信模型图:</strong></p><img src="https://jihulab.com/yuntian/img/-/raw/main/docker笔记/image-20221003202920515.png" alt="image-20221003202920515"  /><h3 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --link</span></span><br><span class="line">dokcer run -d -P --name tomcat --<span class="built_in">link</span> tomcat01 镜像ID或名字</span><br><span class="line">反向ping的话就发现不能ping通</span><br></pre></td></tr></table></figure><p>自定义网络不适应docker0，因为他不支持容器名连接访问</p><h4 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network  --help</span><br></pre></td></tr></table></figure><blockquote><p>查看所有的docker网络</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p><b>网络模式</b></p><p>brifge:桥接（默认）</p><p>none:不配置网络</p><p>host:和宿主机共享网络</p><p>container:容器网络联通（用的少局限大）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我们之前直接启动的命令模式其实是有一个--net birdge也就是我们默认的docker0</span></span><br><span class="line">docker run -it --name tomcat01 --net bridge tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker0的特点默认不支持域名访问，--<span class="built_in">link</span>可以打通连接但是比较麻烦</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自定义一个网络（推荐）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://jihulab.com/yuntian/img/-/raw/main/docker%E7%AC%94%E8%AE%B0/image-20221003205735226.png" alt="image-20221003205735226"></p><p>自定义一个网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dokcer network create --driver bridge --subnet 192.168.0.0、16 --gateway 192.168.0.1 my_yyt</span><br></pre></td></tr></table></figure><p>启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P --name tomcat --net my_yyt tomcat</span><br></pre></td></tr></table></figure><p>查看my_yyt的网卡配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker  network inspect my_yyt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高校学籍管理系统</title>
      <link href="/gxxj/"/>
      <url>/gxxj/</url>
      
        <content type="html"><![CDATA[<h1 id="高校学籍管理系统"><a href="#高校学籍管理系统" class="headerlink" title="高校学籍管理系统"></a>高校学籍管理系统</h1><h2 id="高校学籍管理系统-1"><a href="#高校学籍管理系统-1" class="headerlink" title="高校学籍管理系统"></a>高校学籍管理系统</h2><p>功能要求：</p><p>实现学生信息 、班级、院系、专业等的管理；</p><p>实现课程、学生成绩信息管理；</p><p>实现学生的奖惩信息管理；</p><p>创建规则用于限制性别项只能输入“男”或“女”；</p><p>创建视图查询各个学生的学号、姓名、班级、专业、院系；</p><p>创建存储过程查询指定学生的成绩单；</p><p>创建触发器当增加、删除学生和修改学生班级信息时自动修改相应班级学生人数；</p><p>建立数据库相关表之间的参照完整性约束。</p><h2 id="er图"><a href="#er图" class="headerlink" title="er图"></a>er图</h2><p>长方形90x40</p><p>椭圆80x50</p><p>菱形 55x50</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>根据管理系统功能要求需要创建对应的表<br>考虑到以后以后数据量会变得庞大，达到表存储瓶颈使用分表方式</p><p>创建数据库并指定默认字符集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database yyt default character set utf8mb4;</span><br></pre></td></tr></table></figure><p>创建学校院系表，专业表，班级表，学生表,课程表，成绩表。</p><p>当中设置对应的主键外键关系，并设置了所有表中id字段为表的主键，唯一且自增，学生表中性别选用enum数据类型只允许选男，女，每个表都有对应的字段与别的表存在外键关系并添加级联删除和级连更新，指定表的默认字符集为utf8mb4（MySQL官方推荐）。</p><p>表的结构设计如下：</p><p><strong>院系表结构</strong>：id-name</p><ul><li>分别对应：院系id-院系名称</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table yuanxi(id int primary key auto_increment,name varchar(30) not null) default charset=utf8mb4 comment=&#x27;院系表&#x27;;</span><br></pre></td></tr></table></figure><p><strong>专业表结构（major）</strong>：id-name-y_id</p><ul><li>分别对应专业id-专业名称-院系id</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table major(id int primary key auto_increment,name varchar(30) not null,y_id int,constraint yuanxi_major_id foreign key(y_id) references yuanxi(id) on update cascade on delete cascade) default charset=utf8mb4 comment=&#x27;专业表&#x27;;</span><br></pre></td></tr></table></figure><p>**班级表结构(class)**：id-name-su-z_id</p><ul><li>分别对应：班级id-班级名称-总人数-专业id</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table class(id int primary key auto_increment,name varchar(20) not null,su int,z_id int,constraint major_class_id foreign key(z_id) references major(id) on update cascade on delete cascade)default charset=utf8mb4 comment=&#x27;班级表&#x27;;</span><br></pre></td></tr></table></figure><p>**学生表结构(student)**：id-name-sex-c_id</p><ul><li>分别对应：学生id-学生名称-性别-班级id</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table student(id int primary key auto_increment,name varchar(20) not null,sex enum(&#x27;男&#x27;,&#x27;女&#x27;),c_id int,constraint class_student_id foreign key(c_id) references class(id) on update cascade on delete cascade)default charset=utf8mb4 comment=&#x27;学生表&#x27;;</span><br></pre></td></tr></table></figure><p><strong>课程表结构(lesson)</strong>: id-name</p><ul><li>分别对应：课程号-课程名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table lesson(id int primary key auto_increment,name varchar(20) not null)default charset=utf8mb4 comment=&#x27;课程表&#x27;;</span><br></pre></td></tr></table></figure><p><strong>成绩表构(score)</strong>: student_id-lesson_id-score</p><ul><li>分别对应：学生id-课程号-成绩</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table score(student_id int,lesson_id int,score int(3),constraint student_score_id foreign key(student_id) references student(id) on update cascade on delete cascade,constraint lesson_score_id foreign key(lesson_id) references lesson(id) on update cascade on delete cascade)default charset=utf8mb4 comment=&#x27;成绩表&#x27;;</span><br></pre></td></tr></table></figure><p><strong>学籍信息表（sl）</strong>：stud_id-sta-yea</p><ul><li>分别对应：学号-学籍状态-年制</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table sl(stud_id int,sta enum(&#x27;注册&#x27;,&#x27;毕业&#x27;,&#x27;保留&#x27;) not null,yea enum(&#x27;二&#x27;,&#x27;三&#x27;,&#x27;五&#x27;) not null,constraint  sl_stud_id foreign key(stud_id) references student(id) on update cascade on delete cascade)default charset=utf8mb4 comment=&#x27;学籍信息表&#x27;;</span><br></pre></td></tr></table></figure><p><strong>学籍日志表（sl_log）</strong>: set_id-set_time-set_type-set_c</p><ul><li>分别对应:操作id(对应学生id)-操作时间-操作类型-操作内容</li></ul><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table sl_log(set_id int,set_time datetime not null,set_type varchar(20) not null comment &#x27;update\delete&#x27;,set_c varchar(500)) default charset=utf8mb4 comment=&#x27;学籍日志表&#x27;;</span><br></pre></td></tr></table></figure><p><strong>奖惩信息表（re）</strong>：id-re_id-re_jname-re_cname</p><ul><li>分别对应：id-学号-奖励信息-惩罚信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table re(id int primary key auto_increment,re_id int,re_jname varchar(300),re_cname varchar(300),constraint student_re_id foreign key(re_id) references student(id) on update cascade on delete cascade)default charset=utf8mb4 comment=&#x27;奖惩信息表&#x27;;</span><br></pre></td></tr></table></figure><h2 id="添加模拟数据"><a href="#添加模拟数据" class="headerlink" title="添加模拟数据"></a>添加模拟数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">insert into yuanxi(name) values(&#x27;电子信息工程&#x27;),(&#x27;机电工程&#x27;);</span><br><span class="line"></span><br><span class="line">insert into major(name,y_id) values(&#x27;云计算技术应用&#x27;,1),(&#x27;电子技术应用&#x27;,2),(&#x27;人工智能&#x27;,1),(&#x27;无人机&#x27;,2);</span><br><span class="line"></span><br><span class="line">insert into class(name,z_id) values(&#x27;云计算技术应用2101&#x27;,1),(&#x27;云计算技术应用2102&#x27;,1),(&#x27;电子技术应用2021&#x27;,2),(&#x27;人工智能2001&#x27;,3),(&#x27;人工智能2002&#x27;,3),(&#x27;无人机01&#x27;,4);</span><br><span class="line"></span><br><span class="line">insert into student(name,sex,c_id) values(&#x27;杨大&#x27;,&#x27;男&#x27;,1),(&#x27;杨二&#x27;,&#x27;女&#x27;,2),(&#x27;杨三&#x27;,&#x27;男&#x27;,1),(&#x27;李大&#x27;,&#x27;男&#x27;,3),(&#x27;王大&#x27;,&#x27;女&#x27;,4),(&#x27;王二&#x27;,&#x27;男&#x27;,5),(&#x27;刘大&#x27;,&#x27;男&#x27;,6),(&#x27;刘二&#x27;,&#x27;女&#x27;,6);</span><br><span class="line"></span><br><span class="line">insert into lesson(name) values(&#x27;数据库管理&#x27;),(&#x27;新时代特色社会主义&#x27;),(&#x27;分布式系统&#x27;),(&#x27;机器学习&#x27;),(&#x27;Linux基础&#x27;),(&#x27;创业基础&#x27;),(&#x27;声明科学与人类文明&#x27;);</span><br><span class="line"></span><br><span class="line">insert into score values(1,1,99),(1,2,98),(1,5,95),(1,7,100),(2,1,100),(2,2,99),(2,5,99),(2,6,100),(4,6,90),(4,7,99);</span><br></pre></td></tr></table></figure><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="实现学生信息-、班级、院系、专业等的管理"><a href="#实现学生信息-、班级、院系、专业等的管理" class="headerlink" title="实现学生信息 、班级、院系、专业等的管理"></a>实现学生信息 、班级、院系、专业等的管理</h3><p>管理基本就是增删改的操作，这个跟之前创表的表结构相关,id字段设计表的时候已经是自增，方便管理，所以id不支持修改，添加字段时也不需要填写字段的id</p><p><font color=red size=2px>根据表结构班级信息，表内包含这个班级学生的总人数，后面创建的有对应的触发器，会实时更新班级人数信息，所以不建议对班级总人数字段进行修改，所以在对班级信息的管理，新增时不能提前设定和修改时不能修改总人数字段，新增时字段默认为null，插入数据后会自动更新数据</font></p><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">create procedure y1(in b int,in b1 varchar(30),in b2 int,in b3 int)</span><br><span class="line">begin</span><br><span class="line">declare sex varchar(3);</span><br><span class="line">case</span><br><span class="line">when b = 1 then</span><br><span class="line">insert into yyt.yuanxi(name) values(b1);</span><br><span class="line">select *from yyt.yuanxi where name=b1;</span><br><span class="line">when b = 2 then</span><br><span class="line">insert into yyt.major(name) values(b1);</span><br><span class="line">select *from yyt.major where name=b1;</span><br><span class="line">when b = 3 then</span><br><span class="line">insert into yyt.class(name,z_id) values(b1,b2);</span><br><span class="line">select *from yyt.class where name=b1;</span><br><span class="line">when b = 4 then</span><br><span class="line">if b2 = 1 then</span><br><span class="line">            set sex :=&#x27;男&#x27;;</span><br><span class="line">insert into yyt.student(name,sex,c_id) values(b1,sex,b3);</span><br><span class="line">select *from yyt.student where name=b1;</span><br><span class="line">elseif b2 = 2 then</span><br><span class="line">set sex :=&#x27;女&#x27;;</span><br><span class="line">insert into yyt.student(name,sex,c_id) values(b1,sex,b3);</span><br><span class="line">select *from yyt.student where name=b1;</span><br><span class="line">else</span><br><span class="line">select &#x27;非法参数！请按照要求输入参数！&#x27;;</span><br><span class="line">end if;</span><br><span class="line">else</span><br><span class="line">select &#x27;非法参数！请按照要求输入参数！&#x27;;</span><br><span class="line">end case;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 介绍</span><br><span class="line">#create procedure y1(in b int,in b1 varchar(30),in b2 int,in b3 int)</span><br><span class="line">其中有四个参数，分别对应b,b1,b2,b3</span><br><span class="line">其中b有四个值分别对应1，2，3，4</span><br><span class="line">1 表示院系表</span><br><span class="line">2 表示专业表</span><br><span class="line">3 表示班级表</span><br><span class="line">4 表示学生信息表</span><br><span class="line">b1 对应表字段中的名称</span><br><span class="line">b2 当b的值为3的时候也就是增加班级信息表字段的时候，b2的值表示的是班级对应的专业的id，当引用存储过程时b参数的值为4时，表示增加学生信息表字段的性别，1为男，2为女</span><br><span class="line">b3 表示增加学生信息表内容时对应的班级id(请务必选择班级表中存在的班级id)</span><br><span class="line">b2和b3只有在添加学生信息表的时候用到，其他表需要将这两个参数为任意数字，不参与使用</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><font color='red'>注意：创建表的时候每个表之间都有相应的外键关系，并添加了级联删除和级连更新，谨慎操作！</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">create procedure y2(in c int,in c2 int)</span><br><span class="line">begin</span><br><span class="line">case</span><br><span class="line">when c = 1 then</span><br><span class="line">delete from yyt.yuanxi where id=c2;</span><br><span class="line">select *from yyt.yuanxi;</span><br><span class="line">when c = 2 then</span><br><span class="line">delete from yyt.major where id=c2;</span><br><span class="line">select *from yyt.major;</span><br><span class="line">when c = 3 then</span><br><span class="line">delete from yyt.class where id=c2;</span><br><span class="line">select *from yyt.class;</span><br><span class="line">when c = 4 then</span><br><span class="line">delete from yyt.student where id=c2;</span><br><span class="line">select *from yyt.student;</span><br><span class="line">else</span><br><span class="line">select &#x27;非法参数！请按照要求输入参数！&#x27;;</span><br><span class="line">end case;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 介绍</span><br><span class="line">#create procedure y2(in c int,in c2 int)</span><br><span class="line">其中c有四个值分别对应1，2，3，4</span><br><span class="line">1 表示院系表</span><br><span class="line">2 表示专业表</span><br><span class="line">3 表示班级表</span><br><span class="line">4 表示学生信息表</span><br><span class="line">c2 对应各个表中的id主键</span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">create procedure y3(in a int,in a1 int,in a2 varchar(30),in a3 int)</span><br><span class="line">begin</span><br><span class="line">declare sex varchar(3);</span><br><span class="line">case</span><br><span class="line">when a = 1 then</span><br><span class="line">update yyt.yuanxi set name=a2 where id=a1;</span><br><span class="line">select *from yyt.yuanxi where id=a1;</span><br><span class="line">when a = 2 then</span><br><span class="line">update yyt.major set name=a2 where id=a1;</span><br><span class="line">select *from yyt.major where id=a1;</span><br><span class="line">when a = 3 then</span><br><span class="line">update yyt.class set name=a2,z_id=a3 where id=a1;</span><br><span class="line">select *from yyt.class where id=a1;</span><br><span class="line">when a = 4 then</span><br><span class="line">            if a3 = 1 then</span><br><span class="line">            set sex :=&#x27;男&#x27;;</span><br><span class="line">update yyt.student set name=a2,sex=sex where id=a1;</span><br><span class="line">select *from yyt.student where id=a1;</span><br><span class="line">elseif a3 = 2 then</span><br><span class="line">set sex :=&#x27;女&#x27;;</span><br><span class="line">update yyt.student set name=a2,sex=sex where id=a1;</span><br><span class="line">select *from yyt.student where id=a1;</span><br><span class="line">else</span><br><span class="line">update yyt.student set name=a2 where id=a1;</span><br><span class="line">select *from yyt.student where id=a1;</span><br><span class="line">end if;</span><br><span class="line">else</span><br><span class="line">select &#x27;非法参数！请按照要求输入参数！&#x27;;</span><br><span class="line">end case;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line">## 介绍！</span><br><span class="line"># create procedure y3(in a int,in a1 int,in a2 varchar(30),in a3 int)里面定义了四个参数，a，a1，a2，a3</span><br><span class="line">其中a有四个值分别对应1，2，3，4</span><br><span class="line">1 表示院系表</span><br><span class="line">2 表示专业表</span><br><span class="line">3 表示班级表</span><br><span class="line">4 表示学生信息表</span><br><span class="line">a1 对应的就是各个表内字段的id</span><br><span class="line">a2 对应的就是表内字段的名字是varchar类型需要用&#x27;&#x27;包裹起来</span><br><span class="line">a3 有三个值分别为数字1，2，任意数字;(a3额外值，当a的值为3的时候也就是修改班级表的时候，a3表示的是班级对应的专业的id)</span><br><span class="line">## 引用例子</span><br><span class="line">例如需要修改专业表内id为4的专业名称，使用</span><br><span class="line">call y3(2,4,&#x27;无人机技术&#x27;,1)</span><br><span class="line">其中2表示要修改的是专业表，4表示id为4，引号内的为name字段的值，最后的1由于修改使用不到可以使用任意数字，不参与使用；</span><br><span class="line"></span><br><span class="line">例如需要修改学生信息表中id为1的学生的名称</span><br><span class="line">call y3(4,1,&#x27;杨1&#x27;,3或任意数字)</span><br><span class="line">其中4表示要修改的是学生表，1表示id为1，引号内的为name字段的值，最后的3表示只修改学生的名字，如果改为1表示修改性别为男，2表示为女；</span><br></pre></td></tr></table></figure><h3 id="实现课程、学生成绩信息管理"><a href="#实现课程、学生成绩信息管理" class="headerlink" title="实现课程、学生成绩信息管理"></a>实现课程、学生成绩信息管理</h3><ul><li>此存储过程包含对两个表的增删改操作</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">create procedure y6(y int,y1 int,y2 int,y3 int,y4 int,y5 varchar(30))</span><br><span class="line">begin</span><br><span class="line">case</span><br><span class="line">when y = 1 then</span><br><span class="line">if y1 = 1 then insert into yyt.lesson(name) values(y5); select *from yyt.lesson where name=y5;</span><br><span class="line">elseif y1 = 2 then insert into yyt.score values(y2,y3,y4); select *from yyt.score where student_id=y2 &amp;&amp; lesson_id=y3;</span><br><span class="line">end if;</span><br><span class="line">when y = 2 then</span><br><span class="line">if y1 = 1 then delete from yyt.lesson where id=y2; select *from yyt.lesson;</span><br><span class="line">elseif y1 = 2 then delete from  yyt.score where student_id=y2 &amp;&amp; lesson_id=y3; select *from yyt.score;</span><br><span class="line">end if;</span><br><span class="line">when y = 3 then</span><br><span class="line">if y1 = 1 then update yyt.lesson set name=y5 where id=y2; select *from yyt.lesson where name=y5;</span><br><span class="line">elseif y1 = 2 then update yyt.score set score=y4 where student_id=y2 &amp;&amp; lesson_id=y3; select *from yyt.score where student_id=y2 &amp;&amp; lesson_id=y3;</span><br><span class="line">end if;</span><br><span class="line">end case;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 调用方法create procedure y6(y int,y1 int,y2 int,y3 int,y4 int,y5 varchar(30))</span><br><span class="line">其中y有三个值1，2，3 分别对应增删改功能</span><br><span class="line">y1 有两个值 1，2 分别对应课程表跟成绩表</span><br><span class="line">y2 动态使用</span><br><span class="line">y3 动态使用</span><br><span class="line">y4 动态使用</span><br><span class="line">y5特殊需要用引号包含，y5是:当参数开头 y=1 or y=3 时表示增加课程或者修改课程名字，在这两个中必填</span><br></pre></td></tr></table></figure><h3 id="实现学生的奖惩信息管理"><a href="#实现学生的奖惩信息管理" class="headerlink" title="实现学生的奖惩信息管理"></a>实现学生的奖惩信息管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">create procedure y7(y int,y1 int,y2 int,y3 varchar(300),y4 varchar(300))</span><br><span class="line">begin</span><br><span class="line">case</span><br><span class="line">when y = 1 then</span><br><span class="line">if y1 = 1 then</span><br><span class="line">insert into yyt.re(re_id,re_jname) values(y2,y3);</span><br><span class="line">select *from yyt.re where re_id=y2;</span><br><span class="line">elseif y1 = 2 then</span><br><span class="line">insert into yyt.re(re_id,re_cname) values(y2,y3);</span><br><span class="line">select *from yyt.re where re_id=y2;</span><br><span class="line">elseif y2 = 3 then</span><br><span class="line">insert into yyt.re(re_id,re_jname,re_cname) values(y2,y3,y4);</span><br><span class="line">select *from yyt.re where re_id=y2;</span><br><span class="line">end if;</span><br><span class="line">when y = 2 then</span><br><span class="line">delete from yyt.re where id=y1;</span><br><span class="line">when y = 3 then</span><br><span class="line">if y1 = 1 then</span><br><span class="line">update yyt.re set re_jname=y3 where id=y2;</span><br><span class="line">select *from yyt.re where id=y2;</span><br><span class="line">elseif y1 = 2 then</span><br><span class="line">update yyt.re set re_cname=y3 where id=y2;</span><br><span class="line">select *from yyt.re where id=y2;</span><br><span class="line">elseif y1 = 3 then</span><br><span class="line">update yyt.re set re_jname=y3,re_cname=y4 where id=y2;</span><br><span class="line">select *from yyt.re where id=y2;</span><br><span class="line">end if;</span><br><span class="line">end case;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line"># 增加</span><br><span class="line">当y等于1，y1等于1时表示添加一条奖励信息y2表示学生的学号，y3为奖励信息</span><br><span class="line">当y等于1，y1等于2时表示添加一条惩罚信息y2表示学生的学号，y3为惩罚信息，y4随便加内容用引号包含，不会引用</span><br><span class="line">当y等于1，y1等于3时表示添加一条奖励和惩罚信息y2表示学生的学号，y3为奖励信息，y4为惩罚信息</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">当y=2时表示要删除一条奖惩信息，y1表示奖惩信息表的主键id，需要单独删除某个学生的奖励信息或惩罚信息需要用到修改</span><br><span class="line"></span><br><span class="line"># 修改</span><br><span class="line">当y等于3，y1等于1时表示修改一条奖励信息，y2表示奖惩信息表的主键id，y3为奖励信息</span><br><span class="line">当y等于1，y1等于2时表示修改一条惩罚信息，y2表示奖惩信息表的主键id，y3为惩罚信息，y4随便加内容用引号包含，不会引用</span><br><span class="line">当y等于1，y1等于3时表示修改一条奖励和惩罚信息，y2表示奖惩信息表的主键id，y3为奖励信息，y4为惩罚信息</span><br></pre></td></tr></table></figure><p><strong>通过学生id查询学生的所有奖惩信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create procedure y8(y int)</span><br><span class="line">begin</span><br><span class="line">select a.name 院系,b.name 专业,c.name 班级,e.re_id 学号,d.name 姓名,e.re_jname 奖励信息,e.re_cname 惩罚信息 from yuanxi a,major b,class c,student d,re e where  e.re_id=d.id &amp;&amp; d.c_id=c.id &amp;&amp; c.z_id=b.id &amp;&amp; b.y_id=a.id &amp;&amp; e.re_id=y;</span><br><span class="line">end$$</span><br></pre></td></tr></table></figure><p><img src="https://jihulab.com/yuntian/img/-/raw/main/%E9%AB%98%E6%A0%A1%E5%AD%A6%E7%B1%8D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20221210164607209.png" alt="image-20221210164607209"></p><h3 id="创建视图查询各个学生的学号、姓名、班级、专业、院系"><a href="#创建视图查询各个学生的学号、姓名、班级、专业、院系" class="headerlink" title="创建视图查询各个学生的学号、姓名、班级、专业、院系"></a>创建视图查询各个学生的学号、姓名、班级、专业、院系</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create view zong as select a.id 学生id,a.name 学生姓名,b.name 班级名称,c.name 专业名称,d.name 院系名称 from student a,class b,major c,yuanxi d where a.c_id=b.id&amp;&amp;b.z_id=c.id&amp;&amp;c.y_id=d.id;</span><br><span class="line"></span><br><span class="line">select *from zong;</span><br></pre></td></tr></table></figure><p><img src="https://jihulab.com/yuntian/img/-/raw/main/%E9%AB%98%E6%A0%A1%E5%AD%A6%E7%B1%8D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20221206094828974.png"></p><p>select a.name 学生姓名,b.name 班级名,c.name 课程名,d.score 成绩from student a,class b,lseeon c,score d where d.student_id=a.id &amp;&amp; d.class_id=b.id &amp;&amp; d.lesson_id=c.id &amp;&amp; a.c_id=b.id;</p><p>select e.name,f.name,a.name,b.name,c.name,d.score from class a,student b,lesson c,score d,yuanxi e,major f where b.c_id=a.id &amp;&amp; d.student_id=b.id &amp;&amp; d.lesson_id=c.id &amp;&amp;a.z_id=f.id &amp;&amp; f.y_id=e.id;</p><h3 id="创建存储过程查询指定学生的成绩单"><a href="#创建存储过程查询指定学生的成绩单" class="headerlink" title="创建存储过程查询指定学生的成绩单"></a>创建存储过程查询指定学生的成绩单</h3><ul><li>根据学生的id查询学生所参加的所有考试的成绩</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create procedure y5(in s int)</span><br><span class="line">begin</span><br><span class="line">select e.name 学院,f.name 专业,a.name 班级,b.name 姓名,c.name 课程,d.score 成绩 from class a,student b,lesson c,score d,yuanxi e,major f where b.c_id=a.id &amp;&amp; d.student_id=b.id &amp;&amp; d.lesson_id=c.id &amp;&amp;a.z_id=f.id &amp;&amp; f.y_id=e.id &amp;&amp; d.student_id=s;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line"># s表示学生id</span><br></pre></td></tr></table></figure><img src="https://jihulab.com/yuntian/img/-/raw/main/高校学籍管理系统/image-20221207194206442.png" alt="image-20221207194206442" style="zoom:80%;" /><h3 id="创建触发器当增加、删除学生和修改学生班级信息时自动修改相应班级学生人数"><a href="#创建触发器当增加、删除学生和修改学生班级信息时自动修改相应班级学生人数" class="headerlink" title="创建触发器当增加、删除学生和修改学生班级信息时自动修改相应班级学生人数"></a>创建触发器当增加、删除学生和修改学生班级信息时自动修改相应班级学生人数</h3><h4 id="添加，自动修改各相应班级总人数"><a href="#添加，自动修改各相应班级总人数" class="headerlink" title="添加，自动修改各相应班级总人数"></a>添加，自动修改各相应班级总人数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">方法1:</span><br><span class="line"></span><br><span class="line">create trigger sun_h</span><br><span class="line">after insert on yyt.student for each row</span><br><span class="line">begin</span><br><span class="line">update class set su=(select * from(select count(a.id) from class a,student b where b.c_id=a.id &amp;&amp; a.id=new.c_id) a) where id=new.c_id;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line">方法2：</span><br><span class="line"></span><br><span class="line">create trigger sun_h</span><br><span class="line">after insert on yyt.student for each row</span><br><span class="line">begin</span><br><span class="line">declare cc int;</span><br><span class="line">select count(a.id) into cc from class a,student b where b.c_id=a.id &amp;&amp; a.id=new.c_id;</span><br><span class="line">update class set su=cc where id=new.c_id;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 当对学生信息表进行添加数据的时候会触发</span><br></pre></td></tr></table></figure><h4 id="删除-自动修改各相应班级总人数"><a href="#删除-自动修改各相应班级总人数" class="headerlink" title="删除,自动修改各相应班级总人数"></a>删除,自动修改各相应班级总人数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">方法1:</span><br><span class="line"></span><br><span class="line">create trigger sun_d</span><br><span class="line">after delete on yyt.student for each row</span><br><span class="line">begin</span><br><span class="line">update class set su=(select * from(select count(a.id) from class a,student b where b.c_id=a.id &amp;&amp; a.id=old.c_id) a) where id=old.c_id;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line">方法2：</span><br><span class="line"></span><br><span class="line">create trigger sun_d</span><br><span class="line">after delete on yyt.student for each row</span><br><span class="line">begin</span><br><span class="line">declare aa int;</span><br><span class="line">select count(a.id) into aa from class a,student b where b.c_id=a.id &amp;&amp; a.id=old.c_id;</span><br><span class="line">update class set su=aa where id=old.c_id;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 当对学生信息表进行删除数据的时候会触发</span><br></pre></td></tr></table></figure><h4 id="修改-自动修改各相应班级总人数"><a href="#修改-自动修改各相应班级总人数" class="headerlink" title="修改,自动修改各相应班级总人数"></a>修改,自动修改各相应班级总人数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">方法1:</span><br><span class="line"></span><br><span class="line">create trigger sun_u</span><br><span class="line">after update on yyt.student for each row</span><br><span class="line">begin</span><br><span class="line">update class set su=(select * from(select count(a.id) from class a,student b where b.c_id=a.id &amp;&amp; a.id=old.c_id) a) where id=old.c_id;</span><br><span class="line">update class set su=(select * from(select count(a.id) from class a,student b where b.c_id=a.id &amp;&amp; a.id=new.c_id) a) where id=new.c_id;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line">方法2：</span><br><span class="line"></span><br><span class="line">create trigger sun_d</span><br><span class="line">after update on yyt.student for each row</span><br><span class="line">begin</span><br><span class="line">declare aa int;</span><br><span class="line">select count(a.id) into aa from class a,student b where b.c_id=a.id &amp;&amp; a.id=old.c_id;</span><br><span class="line">update class set su=aa where id=old.c_id;</span><br><span class="line">select count(a.id) into aa from class a,student b where b.c_id=a.id &amp;&amp; a.id=new.c_id;</span><br><span class="line">update class set su=aa where id=new.c_id;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 当对学生信息表进行删除数据的时候会触发</span><br></pre></td></tr></table></figure><h3 id="学籍管理-保留日志"><a href="#学籍管理-保留日志" class="headerlink" title="学籍管理,保留日志"></a>学籍管理,保留日志</h3><p><strong>学籍信息表（sl）结构</strong>：stu_id-学籍状态-年制 </p><p>创建视图，查询所有学生的学籍状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create or replace view sl_st as select a.name 院系,b.name 专业,c.name 班级,d.id 学号,d.name 姓名,e.sta 学籍,e.yea 年制 from yuanxi a,major b,class c,student d,sl e where e.stud_id=d.id &amp;&amp; d.c_id=c.id &amp;&amp; c.z_id=b.id &amp;&amp; b.y_id=a.id;</span><br><span class="line"></span><br><span class="line"># 创建一个视图sl_st</span><br></pre></td></tr></table></figure><img src="https://jihulab.com/yuntian/img/-/raw/main/高校学籍管理系统/image-20221208221313982.png" alt="image-20221208221313982" style="zoom:80%;" /><p>管理学籍信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">create procedure y9(y int,y1 int,y2 varchar(10),y3 varchar(10),y4 int)</span><br><span class="line">begin</span><br><span class="line">case</span><br><span class="line">when y = 1 then</span><br><span class="line">insert into yyt.sl values(y1,y2,y3);</span><br><span class="line">select *from yyt.sl where stud_id=y1;</span><br><span class="line">when y = 2 then</span><br><span class="line">delete from yyt.sl where stud_id=y1;</span><br><span class="line">select *from yyt.sl where stud_id=y1;</span><br><span class="line">when y = 3 then</span><br><span class="line">if y4 = 1 then</span><br><span class="line">update yyt.sl set sta=y2 where stud_id=y1;</span><br><span class="line">select *from yyt.sl where stud_id=y1;</span><br><span class="line">elseif y4 = 2 then</span><br><span class="line">update yyt.sl set yea=y2 where stud_id=y1;</span><br><span class="line">select *from yyt.sl where stud_id=y1;</span><br><span class="line">elseif y4 = 3 then</span><br><span class="line">update yyt.sl set sta=y2,yea=y3 where stud_id=y1;</span><br><span class="line">select *from yyt.sl where stud_id=y1;</span><br><span class="line">end if;</span><br><span class="line">end case;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line"># y有三个值1，2，3分别对应增删改</span><br><span class="line"># y1表示学生学号</span><br><span class="line"># y2，当y4值为1时表示的是要修改学籍的状态，y2为状态值，y4为2时 y2表示年制</span><br><span class="line"># y3，当y为1时y3就表示年制，当y为1，y4为3的时候，y3也表示年制</span><br></pre></td></tr></table></figure><p><strong>根据对学籍信息表的管理，其中学籍的修改和删除属于高危操作。创建触发器，当对表进行修改或删除时，自动触发并记录操作信息到日志表</strong></p><p><font color=green >修改操作时触发</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create trigger update_sl</span><br><span class="line">after update on yyt.sl for each row</span><br><span class="line">begin</span><br><span class="line">insert into  yyt.sl_log(set_id,set_time,set_type,set_c) values(old.stud_id,now(),&#x27;update&#x27;,concat(&#x27;更新之前的内容为：stud_id= &#x27;,old.stud_id,&#x27;,sta= &#x27;,old.sta,&#x27;,yea= &#x27;,old.yea,&#x27; | 更新之后的内容为：stud_id= &#x27;,new.stud_id,&#x27;,sta= &#x27;,new.sta,&#x27;,yea= &#x27;,new.yea));</span><br><span class="line">end$$</span><br></pre></td></tr></table></figure><p><font color=green >删除操作时触发</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create trigger delete_sl</span><br><span class="line">after delete on yyt.sl for each row</span><br><span class="line">begin</span><br><span class="line">insert into  yyt.sl_log(set_id,set_time,set_type,set_c) values(old.stud_id,now(),&#x27;delete&#x27;,concat(&#x27;删除之前的内容为：stud_id= &#x27;,old.stud_id,&#x27;,sta= &#x27;,old.sta,&#x27;,yea= &#x27;,old.yea));</span><br><span class="line">end$$</span><br></pre></td></tr></table></figure><p>实现效果演示图：</p><img src="https://jihulab.com/yuntian/img/-/raw/main/高校学籍管理系统/image-20221208235610992.png" alt="image-20221208235610992" style="zoom:80%;" /> ]]></content>
      
      
      <categories>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gpmall商城课程设计</title>
      <link href="/gpmall/"/>
      <url>/gpmall/</url>
      
        <content type="html"><![CDATA[<h2 id="课程任务"><a href="#课程任务" class="headerlink" title="课程任务"></a>课程任务</h2><ol><li>系统概况</li></ol><p>gpmall商城是一个开源的基于Java开发的网上商城应用。现在用户已经提供了gpmall应用的打包代码及系统架构等信息，我们需要按照要求部署gmall应用。gpmal 商城平台主要涉及MySQL、 Kafka、ZooKeeper、Nginx 和 gpmall 源代码的使用。</p><ol start="2"><li>系统架构</li></ol><p>gpmall商城的系统架构如下图所示。其中：</p><ul><li><p>负载均衡集群：负载均衡软件采用Nginx，Web服务器不用使用Web容器，直接运行编写好的jar包。</p></li><li><p>应用系统调度集群：Zookeeper集群和Kafka集群构提供应用系统调度服务。</p></li><li><p>消息队列服务器：Redis提供消息队列服务。</p></li><li><p>MySQL集群：利用MyCAT实现读写分离功能。</p></li></ul><p><img src="https://jihulab.com/yuntian/img/-/raw/main/gmail%E5%95%86%E5%9F%8E/clip_image002.jpg" alt="clip_image002.jpg"></p><ol start="3"><li>节点规划</li></ol><p>为了节省资源、简化操作，把原有10个节点的功能分布到3个节点上。</p><p>注意：主机名是gpmall应用提供的。</p><table><thead><tr><th>集群</th><th>物理节点</th><th>节点功能</th><th>主机名</th><th align="left">IP</th></tr></thead><tbody><tr><td>MySQL集群</td><td>node1</td><td>MyCAT</td><td>mysql.mall</td><td align="left">192.168.137.101</td></tr><tr><td>MySQL集群</td><td>node2</td><td>MariaDB/主/写</td><td>node2</td><td align="left">192.168.137.102</td></tr><tr><td>MySQL集群</td><td>node3</td><td>MariaDB/从/读</td><td>node3</td><td align="left">192.168.137.103</td></tr><tr><td>Zookeeper集群</td><td>node1</td><td></td><td>zk1.mall</td><td align="left">192.168.137.101</td></tr><tr><td>Zookeeper集群</td><td>node2</td><td></td><td>zk2.mall</td><td align="left">192.168.137.102</td></tr><tr><td>Zookeeper集群</td><td>node3</td><td></td><td>zk3.mall</td><td align="left">192.168.137.103</td></tr><tr><td>Kafka集群</td><td>node1</td><td></td><td>kafka1.mall</td><td align="left">192.168.137.101</td></tr><tr><td>Kafka集群</td><td>node2</td><td></td><td>kafka2.mall</td><td align="left">192.168.137.102</td></tr><tr><td>Kafka集群</td><td>node3</td><td></td><td>kafka3.mall</td><td align="left">192.168.137.103</td></tr><tr><td>Redis</td><td>node1</td><td></td><td>redis.mall</td><td align="left">192.168.137.101</td></tr><tr><td>Web服务集群</td><td>node1</td><td>负载均衡</td><td>nginx</td><td align="left">192.168.137.101</td></tr><tr><td>Web服务集群</td><td>node2</td><td>Web服务</td><td>jar1</td><td align="left">192.168.137.102</td></tr><tr><td>Web服务集群</td><td>node3</td><td>Web服务</td><td>jar2</td><td align="left">192.168.137.103</td></tr></tbody></table><h2 id="节点基础配置"><a href="#节点基础配置" class="headerlink" title="节点基础配置"></a>节点基础配置</h2><h3 id="制作模板机"><a href="#制作模板机" class="headerlink" title="制作模板机"></a>制作模板机</h3><p>模板机信息如下：</p><p><strong>操作系统：</strong><font color=green >centos7.9</font><br><strong>用户名：</strong><font color=red >root</font><br><strong>密码：</strong><font color=green >000000</font></p><p>模板机操作：</p><blockquote><p>修改模板机的主机名，IP地址，配置yum源，关闭防火墙，关闭selinux，安装jdk</p></blockquote><ul><li>修改主机名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@yyt ~]<span class="comment"># hostnamectl set-hostname node0</span></span><br><span class="line">[root@yyt ~]<span class="comment"># bash</span></span><br></pre></td></tr></table></figure><ul><li>修改网络配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@node0 ~]<span class="comment"># vi /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">NAME=eth0</span><br><span class="line">UUID=d1ca53e5-8af5-46db-a170-3076f10794f7</span><br><span class="line">DEVICE=eth0</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">IPADDR=192.168.137.100</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.137.2</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">DNS2=8.8.8.8</span><br></pre></td></tr></table></figure><ul><li>关闭防火墙</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node0 ~]<span class="comment"># systemctl stop firewalld</span></span><br><span class="line">[root@node0 ~]<span class="comment"># systemctl disable firewalld</span></span><br></pre></td></tr></table></figure><ul><li>关闭selinux</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node0 ~]<span class="comment"># setenforce 0</span></span><br><span class="line">[root@node0 ~]<span class="comment"># vi /etc/selinux/config</span></span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><ul><li>修改hosts解析</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@node0 ~]<span class="comment"># vi /etc/hosts</span></span><br><span class="line">127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdoma</span><br><span class="line">in4</span><br><span class="line">::1 localhost localhost.localdomain localhost6 localhost6.localdoma</span><br><span class="line">in6</span><br><span class="line">192.168.137.101 node1 mysql.mall zk1.mall kafka1.mall nginx redis.mall</span><br><span class="line">192.168.137.102 node2 zk2.mall kafka2.mall jar1</span><br><span class="line">192.168.137.103 node3 zk3.mall kafka3.mall jar2</span><br></pre></td></tr></table></figure><ul><li>修改yum源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份原yum文件</span></span><br><span class="line">[root@node0 ~]<span class="comment"># mkdir /etc/yum.repos.e &amp;&amp; mv /etc/yum.repos.d/* /etc/yum.repos.e</span></span><br><span class="line"><span class="comment"># 然后创建local.repo文件并修改为如下内容</span></span><br><span class="line">[root@node0 ~]<span class="comment"># cat /etc/yum.repos.d/local.repo</span></span><br><span class="line">[gpmall]</span><br><span class="line">name=gpmall</span><br><span class="line">baseurl=file:///opt/gpmall-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[mariadb]</span><br><span class="line">name=mariadb</span><br><span class="line">baseurl=file:///opt/gpmall-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 看到如下信息表示配置正确</span></span><br><span class="line">[root@node0 ~]<span class="comment"># yum repolist</span></span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">源标识                                  源名称                                  状态</span><br><span class="line">!gpmall                                 gpmall                                  298</span><br><span class="line">!mariadb                                mariadb                                 298</span><br><span class="line">repolist: 596</span><br></pre></td></tr></table></figure><h2 id="构建读写分离数据库集群"><a href="#构建读写分离数据库集群" class="headerlink" title="构建读写分离数据库集群"></a>构建读写分离数据库集群</h2><p>根据模板机克隆出三台虚拟机，并修改三台虚拟机的主机名和IP地址分别为</p><p>node1：192.168.137.101</p><p>node2：192.168.137.102</p><p>node3：192.168.137.103</p><h3 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h3><p>用Mycat作为数据库中间件服务构建读写分离的数据库集群，节点规划⻅下表 ：</p><p>物理节点 节点功能 主机名 IP<br>node1 MyCAT mysql.mall 192.168.137.101<br>node2 MariaDB/主/写 node2 192.168.137.102<br>node3 MariaDB/从/读 node3 192.168.137.103</p><h3 id="安装mariadb"><a href="#安装mariadb" class="headerlink" title="安装mariadb"></a>安装mariadb</h3><p>node2、node3节点安装mariadb，root密码为123456，启动服务并设置开机自启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@node2 ~]# yum install -y mariadb mariadb-server</span><br><span class="line">[root@node2 ~]# systemctl start mariadb</span><br><span class="line">[root@node2 ~]# systemctl enable mariadb</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/mariadb.se</span><br><span class="line">rvice to /usr/lib/systemd/system/mariadb.service.</span><br><span class="line">[root@node2 ~]# mysql_secure_installation</span><br><span class="line"># 初始化，回车，y,y,n,y,y</span><br></pre></td></tr></table></figure><h3 id="配置主从复制"><a href="#配置主从复制" class="headerlink" title="配置主从复制"></a>配置主从复制</h3><h4 id="主节点（node2）配置"><a href="#主节点（node2）配置" class="headerlink" title="主节点（node2）配置"></a>主节点（node2）配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改主节点配置文件</span></span><br><span class="line">[root@node2 ~]<span class="comment"># vi /etc/my.cnf</span></span><br><span class="line"><span class="comment"># 新增内容，开启二进制日志</span></span><br><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id=102</span><br><span class="line"><span class="comment"># 默认内容</span></span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security ris</span></span><br><span class="line">ks</span><br><span class="line">symbolic-links=0</span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/var/log/mariadb/mariadb.log</span><br><span class="line">pid-file=/var/run/mariadb/mariadb.pid</span><br><span class="line"><span class="comment"># 重启服务，重新加载配置文件</span></span><br><span class="line">[root@node2 ~]<span class="comment"># systemctl restart mariadb</span></span><br><span class="line">[root@node2 ~]<span class="comment"># mysql -uroot -p123456</span></span><br></pre></td></tr></table></figure><p>配置数据库信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 授权访问数据库</span></span><br><span class="line">[root@node2 ~]<span class="comment"># mysql -uroot -p123456 -e &quot;grant all privileges on *.* to root@&#x27;%&#x27; identified by &quot;123456&quot;;&quot;</span></span><br><span class="line"><span class="comment"># 刷新权限</span></span><br><span class="line">[root@node2 ~]<span class="comment"># mysql -uroot -p123456 -e &quot;flush privileges;&quot;</span></span><br><span class="line"><span class="comment"># 创建gpmall数据库</span></span><br><span class="line">[root@node2 ~]<span class="comment"># mysql -uroot -p123456 -e &quot;create database gpmall;&quot;</span></span><br><span class="line">[root@node2 ~]<span class="comment"># mysql -uroot -p123456</span></span><br><span class="line">MariaDB [(none)]&gt; use gpmall</span><br><span class="line">Database changed</span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">MariaDB [gpmall]&gt; <span class="built_in">source</span> /opt/gpmall-web/gpmall.sql</span><br><span class="line">MariaDB [(none)]&gt; quit</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><h4 id="从节点node3配置"><a href="#从节点node3配置" class="headerlink" title="从节点node3配置"></a>从节点node3配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@node3 ~]<span class="comment"># mysql -uroot -p123456 -e &quot;change master to master_host=&#x27;192.168.137.102&#x27;,master_user=&#x27;root&#x27;,master_password=&#x27;123456&#x27;;&quot;</span></span><br><span class="line">[root@node3 ~]<span class="comment"># mysql -uroot -p123456 -e &quot;start slave;&quot;</span></span><br><span class="line">[root@node3 ~]<span class="comment"># mysql -uroot -p123456 -e &quot;show slave status\G&quot;</span></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.137.102</span><br><span class="line">                  Master_User: root</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000002</span><br><span class="line">          Read_Master_Log_Pos: 320</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000004</span><br><span class="line">                Relay_Log_Pos: 604</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000002</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><h3 id="配置Mycat读写分离"><a href="#配置Mycat读写分离" class="headerlink" title="配置Mycat读写分离"></a>配置Mycat读写分离</h3><h3 id="node1配置"><a href="#node1配置" class="headerlink" title="node1配置"></a>node1配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将MyCAT软件包解压到/usr/local目录</span></span><br><span class="line">[root@node1 ~]<span class="comment"># tar -zxvf /opt/Mycat-server-1.6-RELEASE-20161028204710-lin</span></span><br><span class="line">ux.tar.gz -C /usr/local/</span><br><span class="line"><span class="comment"># 添加Mycat服务的系统环境变量</span></span><br><span class="line">[root@node1 ~]<span class="comment"># echo export MYCAT_HOME=/usr/local/mycat/ &gt;&gt; /etc/profile</span></span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line">[root@node1 ~]<span class="comment"># source /etc/profile</span></span><br><span class="line"><span class="comment"># 配置读写分离规则</span></span><br><span class="line">[root@node1 ~]<span class="comment"># vi /usr/local/mycat/conf/schema.xml</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:schema SYSTEM <span class="string">&quot;schema.dtd&quot;</span>&gt;</span><br><span class="line">&lt;mycat:schema xmlns:mycat=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span><br><span class="line">&lt;schema name=<span class="string">&quot;gpmall&quot;</span> checkSQLschema=<span class="string">&quot;false&quot;</span> sqlMaxLimit=<span class="string">&quot;100&quot;</span> dataNode=<span class="string">&quot;dn1&quot;</span>&gt;&lt;/schema&gt;</span><br><span class="line">&lt;dataNode name=<span class="string">&quot;dn1&quot;</span> dataHost=<span class="string">&quot;localhost1&quot;</span> database=<span class="string">&quot;gpmall&quot;</span> /&gt;</span><br><span class="line">&lt;dataHost name=<span class="string">&quot;localhost1&quot;</span> maxCon=<span class="string">&quot;1000&quot;</span> minCon=<span class="string">&quot;10&quot;</span> balance=<span class="string">&quot;3&quot;</span> dbType=<span class="string">&quot;mysql&quot;</span> dbDriver=<span class="string">&quot;native&quot;</span> writeType=<span class="string">&quot;0&quot;</span> switchType=<span class="string">&quot;1&quot;</span> slaveThreshold=<span class="string">&quot;100&quot;</span>&gt;</span><br><span class="line">&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class="line">&lt;writeHost host=<span class="string">&quot;hostM1&quot;</span> url=<span class="string">&quot;192.168.137.102:3306&quot;</span> user=<span class="string">&quot;root&quot;</span> password=<span class="string">&quot;123456&quot;</span>&gt;</span><br><span class="line">&lt;readHost host=<span class="string">&quot;hostS1&quot;</span> url=<span class="string">&quot;192.168.137.103:3306&quot;</span> user=<span class="string">&quot;root&quot;</span> password=<span class="string">&quot;123456&quot;</span> /&gt;</span><br><span class="line">&lt;/writeHost&gt;</span><br><span class="line">&lt;/dataHost&gt;</span><br><span class="line">&lt;/mycat:schema&gt;</span><br><span class="line"><span class="comment"># 配置用户访问规则</span></span><br><span class="line">[root@node1 ~]<span class="comment"># vi /usr/local/mycat/conf/server.xml</span></span><br><span class="line"><span class="comment"># 修改内容</span></span><br><span class="line">&lt;user name=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;password&quot;</span>&gt;123456&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;schemas&quot;</span>&gt;gpmall&lt;/property&gt;</span><br><span class="line"><span class="comment"># 启动mycat</span></span><br><span class="line">[root@node1 ~]<span class="comment"># /usr/local/mycat/bin/mycat start</span></span><br><span class="line">Starting Mycat-server...</span><br><span class="line">[root@node1 ~]<span class="comment"># ss -nltp| egrep &#x27;8066|9066&#x27;</span></span><br><span class="line">State Recv-Q Send-Q Local Address:Port Peer Addre</span><br><span class="line">ss:Port</span><br><span class="line">LISTEN 0 100 [::]:9066</span><br><span class="line">[::]:* <span class="built_in">users</span>:((&quot;java&quot;,pid=<span class="number">16043</span>,fd=<span class="number">74</span>))</span><br><span class="line">LISTEN 0 100 [::]:8066</span><br><span class="line">[::]:* <span class="built_in">users</span>:((&quot;java&quot;,pid=<span class="number">16043</span>,fd=<span class="number">78</span>))</span><br><span class="line"><span class="comment"># 安装mariadb客户端</span></span><br><span class="line">[root@node1 ~]<span class="comment"># yum install -y mariadb</span></span><br><span class="line"><span class="comment"># 验证读写分离配置</span></span><br><span class="line">[root@node1 ~]<span class="comment"># mysql -h127.0.0.1 -P9066 -uroot -p123456 -e &#x27;show @@datasource;&#x27;</span></span><br><span class="line">+----------+--------+-------+-----------------+------+------+--------+------+------+---------+-----------+------------+</span><br><span class="line">| DATANODE | NAME   | TYPE  | HOST            | PORT | W/R  | ACTIVE | IDLE | SIZE | EXECUTE | READ_LOAD | WRITE_LOAD |</span><br><span class="line">+----------+--------+-------+-----------------+------+------+--------+------+------+---------+-----------+------------+</span><br><span class="line">| dn1      | hostM1 | mysql | 192.168.137.102 | 3306 | W    |      0 |    9 | 1000 |   13717 |         0 |          0 |</span><br><span class="line">| dn1      | hostS1 | mysql | 192.168.137.103 | 3306 | R    |      0 |    9 | 1000 |   13710 |         0 |          0 |</span><br><span class="line">+----------+--------+-------+-----------------+------+------+--------+------+------+---------+-----------+------------+</span><br></pre></td></tr></table></figure><h2 id="构建分布式服务集群"><a href="#构建分布式服务集群" class="headerlink" title="构建分布式服务集群"></a>构建分布式服务集群</h2><p>使用ZooKeeper集群、Kafka集群供应用系统调度服务，使用Redis提供应用系统消息队列服务。</p><p><strong>集群规划</strong></p><p>集群 物理节点 主机名  IP</p><p>Zookeeper集群 node1  zk1.mall 192.168.137.101</p><p>Zookeeper集群 node2  zk2.mall 192.168.137.102</p><p>Zookeeper集群 node3  zk3.mall 192.168.137.103</p><p>Kafka集群 node1  kafka1.mall 192.168.137.101</p><p>Kafka集群 node2  kafka2.mall 192.168.137.102</p><p>Kafka集群 node3  kafka3.mall 192.168.137.103</p><h3 id="配置Zookeeper集群"><a href="#配置Zookeeper集群" class="headerlink" title="配置Zookeeper集群"></a>配置Zookeeper集群</h3><p><font color=red>为Zookeeper集群各个节点做以下配置。</font>                                                       </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将ZooKeeper软件包解压到/usr/local目录</span></span><br><span class="line">[root@node1 ~]<span class="comment"># tar -zxvf /opt/zookeeper-3.4.14.tar.gz -C /usr/local/</span></span><br><span class="line"><span class="comment"># 赋予ZooKeeper目录权限</span></span><br><span class="line">[root@node1 ~]<span class="comment"># chown -R 777 /usr/local/zookeeper-3.4.14/</span></span><br><span class="line"><span class="comment"># 添加ZooKeeper的系统环境变量</span></span><br><span class="line">[root@node1 ~]<span class="comment"># echo export ZOOKEEPER_HOME=/usr/local/zookeeper-3.4.14 &gt;&gt;/etc/profile</span></span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line">[root@node1 ~]<span class="comment"># source /etc/profile</span></span><br><span class="line">[root@node1 ~]<span class="comment"># cd /usr/local/zookeeper-3.4.14/conf</span></span><br><span class="line"><span class="comment"># 复制配置文件</span></span><br><span class="line">[root@node1 conf]<span class="comment"># cp zoo_sample.cfg zoo.cfg</span></span><br><span class="line"><span class="comment"># 创建新的数据目录</span></span><br><span class="line">[root@node1 conf]<span class="comment"># mkdir -p /usr/local/zookeeper-3.4.14/data</span></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">[root@node1 conf]<span class="comment"># vi zoo.cfg</span></span><br><span class="line"><span class="comment"># 修改数据目录</span></span><br><span class="line">dataDir=/usr/local/zookeeper-3.4.14/data</span><br><span class="line"><span class="comment"># 新增集群配置</span></span><br><span class="line">server.1=192.168.137.101:2888:3888</span><br><span class="line">server.2=192.168.137.102:2888:3888</span><br><span class="line">server.3=192.168.137.103:2888:3888</span><br><span class="line"><span class="comment"># 注意！分别为每个节点创建myid文件，myid分别为1、2、3</span></span><br><span class="line">[root@node1 conf]<span class="comment"># echo 1 &gt; /usr/local/zookeeper-3.4.14/data/myid</span></span><br><span class="line">[root@node1 conf]<span class="comment"># cat /usr/local/zookeeper-3.4.14/data/myid</span></span><br><span class="line">1</span><br><span class="line"><span class="comment"># 切换目录</span></span><br><span class="line">[root@node1 conf]<span class="comment"># cd /usr/local/zookeeper-3.4.14/bin</span></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">[root@node1 bin]<span class="comment"># ./zkServer.sh start</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line"><span class="comment"># 查看节点状态</span></span><br><span class="line">[root@node1 bin]<span class="comment"># ./zkServer.sh status</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><h3 id="配置Kafka集群"><a href="#配置Kafka集群" class="headerlink" title="配置Kafka集群"></a>配置Kafka集群</h3><p><font color=red>使用ZooKeeper集群的3个节点来构建Kafka集群，因为Kafka依赖于ZooKeeper，所以不再多创建节点。</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将Kafka软件包解压到/usr/local目录</span></span><br><span class="line">[root@node1 ~]<span class="comment"># tar -zxvf /opt/kafka_2.11-1.1.1.tgz -C /usr/local/</span></span><br><span class="line"><span class="comment"># 赋予目录权限</span></span><br><span class="line">[root@node1 ~]<span class="comment"># chown -R 777 /usr/local/kafka_2.11-1.1.1/</span></span><br><span class="line"><span class="comment"># 创建日志目录</span></span><br><span class="line">[root@node1 ~]<span class="comment"># mkdir -p /usr/local/kafka_2.11-1.1.1/config/logs</span></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">[root@node1 ~]<span class="comment"># vi /usr/local/kafka_2.11-1.1.1/config/server.properties</span></span><br><span class="line"><span class="comment">#节点ID</span></span><br><span class="line">broker.id=1</span><br><span class="line"><span class="comment"># Zookeeper集群信息</span></span><br><span class="line">zookeeper.connect=192.168.137.101:2181,192.168.137.102:2181,192.168.137.103:2181</span><br><span class="line"><span class="comment"># 注意！不同节点的listeners地址应按实际地址填写</span></span><br><span class="line">listeners = PLAINTEXT://192.168.137.101:9092</span><br><span class="line"><span class="comment"># 数据目录</span></span><br><span class="line">log.dirs=/usr/local/kafka_2.11-1.1.1/config/logs</span><br><span class="line"><span class="comment"># 切换目录</span></span><br><span class="line">[root@node1 ~]<span class="comment"># cd /usr/local/kafka_2.11-1.1.1/bin</span></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">[root@node1 bin]<span class="comment"># ./kafka-server-start.sh -daemon ../config/server.properties</span></span><br><span class="line"><span class="comment"># 验证服务</span></span><br><span class="line">[root@node1 bin]<span class="comment"># jps</span></span><br><span class="line">119090 Jps</span><br><span class="line">118938 Kafka</span><br><span class="line">65663 WrapperSimpleApp</span><br><span class="line">104111 QuorumPeerMain</span><br></pre></td></tr></table></figure><h3 id="配置redis服务"><a href="#配置redis服务" class="headerlink" title="配置redis服务"></a>配置redis服务</h3><p>在node1节点安装Redis服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装redis</span></span><br><span class="line">[root@node1 ~]<span class="comment"># yum install redis -y</span></span><br><span class="line"><span class="comment"># 修改redis配置文件</span></span><br><span class="line"><span class="comment"># 将 bind 127.0.0.1 这一行注释掉，将 protected-mode yes 改为 protected-mode no。</span></span><br><span class="line">[root@node1 ~]<span class="comment"># vi /etc/redis.conf</span></span><br><span class="line"><span class="comment"># 启动redis服务并设置开机自启</span></span><br><span class="line">[root@node1 ~]<span class="comment"># systemctl start redis</span></span><br><span class="line">[root@node1 ~]<span class="comment"># systemctl enable redis</span></span><br><span class="line"><span class="comment"># 验证redis服务</span></span><br><span class="line">[root@node1 ~]<span class="comment"># ss -nltp | grep 6379</span></span><br><span class="line">LISTEN     0      128          *:6379                     *:*                   <span class="built_in">users</span>:((&quot;redis-server&quot;,pid=<span class="number">122273</span>,fd=<span class="number">5</span>))</span><br><span class="line">LISTEN     0      128       [::]:6379                  [::]:*                   <span class="built_in">users</span>:((&quot;redis-server&quot;,pid=<span class="number">122273</span>,fd=<span class="number">4</span>))</span><br></pre></td></tr></table></figure><h2 id="部署Web服务集群"><a href="#部署Web服务集群" class="headerlink" title="部署Web服务集群"></a>部署Web服务集群</h2><h3 id="Web服务集群规划"><a href="#Web服务集群规划" class="headerlink" title="Web服务集群规划"></a>Web服务集群规划</h3><p>使用gamall提供的gpmall-shopping-0.0.1-SNAPSHOT.jar、gpmall-user-0.0.1-SNAPSHOT.jar、<br>shopping-provider-0.0.1-SNAPSHOT.jar、userprovider-0.0.1-SNAPSHOT.jar 、dist这5个包部署应<br>用系统，其中4个JAR包为后端服务包，在jar1节点和jar2节点运行，dist为前端包，在Nginx节点上部<br>署。</p><p>集群 物理节点 节点功能 主机名 IP<br>Web服务集群 node1 负载均衡 nginx 192.168.137.101<br>Web服务集群 node2 Web服务 jar1 192.168.137.102<br>Web服务集群 node3 Web服务 jar2 192.168.137.103</p><h3 id="部署Web服务"><a href="#部署Web服务" class="headerlink" title="部署Web服务"></a>部署Web服务</h3><p>分别在node2、node3上部署后端服务包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在后台运行Web服务jar包</span></span><br><span class="line">[root@node2 ~]<span class="comment"># nohup java -jar /opt/gpmall-web/user-provider-0.0.1-SNAPSHOT.jar &amp;</span></span><br><span class="line">[root@node2 ~]<span class="comment"># nohup java -jar /opt/gpmall-web/shopping-provider-0.0.1-SNAPSHOT.jar &amp;</span></span><br><span class="line">[root@node2 ~]<span class="comment"># nohup java -jar /opt/gpmall-web/gpmall-shopping-0.0.1-SNAPSHOT.jar &amp;</span></span><br><span class="line">[root@node2 ~]<span class="comment"># nohup java -jar /opt/gpmall-web/gpmall-user-0.0.1-SNAPSHOT.jar &amp;</span></span><br><span class="line"><span class="comment"># 查看服务运行状态</span></span><br><span class="line">[root@node2 ~]<span class="comment"># jps</span></span><br><span class="line">6945 QuorumPeerMain</span><br><span class="line">7282 Kafka</span><br><span class="line">7387 gpmall-user-0.0.1-SNAPSHOT.jar</span><br><span class="line">7579 Jps</span><br><span class="line">7357 user-provider-0.0.1-SNAPSHOT.jar</span><br><span class="line">7358 shopping-provider-0.0.1-SNAPSHOT.jar</span><br><span class="line">7359 gpmall-shopping-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><h3 id="配置负载均衡服务"><a href="#配置负载均衡服务" class="headerlink" title="配置负载均衡服务"></a>配置负载均衡服务</h3><p>在node1上部署负载均衡服务，gpmall主要服务虚拟站点如下</p><p>服务 功能 服务端口<br>gpmall-cashier 收银台，负责支付相关的交互逻辑 8083<br>gpmall-shopping 商品/购物⻋/首⻚渲染等交互 8081<br>gpmall-user 提供用户相关的交互，如登录、注册、个人中心等 8082</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">[root@node1 ~]<span class="comment"># yum install nginx -y</span></span><br><span class="line">[root@node1 ~]<span class="comment"># systemctl start nginx</span></span><br><span class="line">[root@node1 ~]<span class="comment"># systemctl enable nginx</span></span><br><span class="line"><span class="comment"># 删除nginx默认Web目录</span></span><br><span class="line">[root@node1 ~]<span class="comment"># rm -rf /usr/share/nginx/html/*</span></span><br><span class="line"><span class="comment"># 将dist中的前端代码复制到nginx的项目目录</span></span><br><span class="line">[root@node1 ~]<span class="comment"># cp -rvf /opt/gpmall-web/dist/* /usr/share/nginx/html/</span></span><br><span class="line"><span class="comment"># 配置nginx负载均衡</span></span><br><span class="line">[root@node1 ~]<span class="comment"># vi /etc/nginx/conf.d/default.conf</span></span><br><span class="line">upstream myuser &#123;</span><br><span class="line">server 192.168.137.102:8082;</span><br><span class="line">server 192.168.137.103:8082;</span><br><span class="line">ip_hash;</span><br><span class="line">&#125;</span><br><span class="line">upstream myshopping &#123;</span><br><span class="line">server 192.168.137.102:8081;</span><br><span class="line">server 192.168.137.103:8081;</span><br><span class="line">ip_hash;</span><br><span class="line">&#125;</span><br><span class="line">upstream mycashier &#123;</span><br><span class="line">server 192.168.137.102:8083;</span><br><span class="line">server 192.168.137.103:8083;</span><br><span class="line">ip_hash;</span><br><span class="line">&#125;</span><br><span class="line">location / &#123;</span><br><span class="line">root /usr/share/nginx/html;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">location /user &#123;</span><br><span class="line">proxy_pass http://myuser;</span><br><span class="line">&#125;</span><br><span class="line">location /shopping &#123;</span><br><span class="line">proxy_pass http://myshopping;</span><br><span class="line">&#125;</span><br><span class="line">location /cashier &#123;</span><br><span class="line">proxy_pass http://mycashier;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 验证配置文件</span></span><br><span class="line">[root@node1 ~]<span class="comment"># nginx -t</span></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">[root@node1 ~]<span class="comment"># nginx -s reload</span></span><br></pre></td></tr></table></figure><h2 id="系统功能测试"><a href="#系统功能测试" class="headerlink" title="系统功能测试"></a>系统功能测试</h2><p>首页访问页面</p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/gmail%E5%95%86%E5%9F%8E/image-20230203111724824.png" alt="image-20230203111724824"></p><p>登录成功演示图：</p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/gmail%E5%95%86%E5%9F%8E/image-20230203111930871.png" alt="image-20230203111930871"></p><p>提交订单页面演示图：</p><p><img src="https://jihulab.com/yuntian/img/-/raw/main/gmail%E5%95%86%E5%9F%8E/image-20230203112025400.png" alt="image-20230203112025400"></p>]]></content>
      
      
      <categories>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
